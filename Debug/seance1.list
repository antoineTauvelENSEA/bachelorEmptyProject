
seance1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d64  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  08003f44  08003f44  00013f44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004058  08004058  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004058  08004058  00014058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004060  08004060  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004060  08004060  00014060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004064  08004064  00014064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004068  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  20000070  080040d8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  080040d8  00020134  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c957  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c55  00000000  00000000  0002c9f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a08  00000000  00000000  0002e650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000950  00000000  00000000  0002f058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d9ea  00000000  00000000  0002f9a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c216  00000000  00000000  0004d392  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b7ef3  00000000  00000000  000595a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011149b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002fd0  00000000  00000000  001114ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	08003f2c 	.word	0x08003f2c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	08003f2c 	.word	0x08003f2c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80005cc:	1d39      	adds	r1, r7, #4
 80005ce:	f04f 33ff 	mov.w	r3, #4294967295
 80005d2:	2201      	movs	r2, #1
 80005d4:	4803      	ldr	r0, [pc, #12]	; (80005e4 <__io_putchar+0x20>)
 80005d6:	f001 fdfb 	bl	80021d0 <HAL_UART_Transmit>
  return ch;
 80005da:	687b      	ldr	r3, [r7, #4]
}
 80005dc:	4618      	mov	r0, r3
 80005de:	3708      	adds	r7, #8
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	2000008c 	.word	0x2000008c

080005e8 <__io_getchar>:

int __io_getchar(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
  uint8_t ch = 0;
 80005ee:	2300      	movs	r3, #0
 80005f0:	71fb      	strb	r3, [r7, #7]
  __HAL_UART_CLEAR_OREFLAG(&huart2);
 80005f2:	4b0b      	ldr	r3, [pc, #44]	; (8000620 <__io_getchar+0x38>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	2208      	movs	r2, #8
 80005f8:	621a      	str	r2, [r3, #32]
  HAL_UART_Receive(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80005fa:	1df9      	adds	r1, r7, #7
 80005fc:	f04f 33ff 	mov.w	r3, #4294967295
 8000600:	2201      	movs	r2, #1
 8000602:	4807      	ldr	r0, [pc, #28]	; (8000620 <__io_getchar+0x38>)
 8000604:	f001 fe7a 	bl	80022fc <HAL_UART_Receive>
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000608:	1df9      	adds	r1, r7, #7
 800060a:	f04f 33ff 	mov.w	r3, #4294967295
 800060e:	2201      	movs	r2, #1
 8000610:	4803      	ldr	r0, [pc, #12]	; (8000620 <__io_getchar+0x38>)
 8000612:	f001 fddd 	bl	80021d0 <HAL_UART_Transmit>
  return ch;
 8000616:	79fb      	ldrb	r3, [r7, #7]
}
 8000618:	4618      	mov	r0, r3
 800061a:	3708      	adds	r7, #8
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	2000008c 	.word	0x2000008c

08000624 <main>:
  * @brief  The application entry point.
  * @retval int
  */

int main(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b084      	sub	sp, #16
 8000628:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800062a:	f000 faa8 	bl	8000b7e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800062e:	f000 f843 	bl	80006b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000632:	f000 f8d9 	bl	80007e8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000636:	f000 f88b 	bl	8000750 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	int compteur=0;
 800063a:	2300      	movs	r3, #0
 800063c:	60fb      	str	r3, [r7, #12]
	char ordre='0';
 800063e:	2330      	movs	r3, #48	; 0x30
 8000640:	70fb      	strb	r3, [r7, #3]
	int delay=100;
 8000642:	2364      	movs	r3, #100	; 0x64
 8000644:	60bb      	str	r3, [r7, #8]
	int status_led=0;
 8000646:	2300      	movs	r3, #0
 8000648:	607b      	str	r3, [r7, #4]
  while (1)
  {
		/*printf("Bonjour, compteur = %d\n\r",compteur);*/
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,status_led);
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	b2db      	uxtb	r3, r3
 800064e:	461a      	mov	r2, r3
 8000650:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000654:	4814      	ldr	r0, [pc, #80]	; (80006a8 <main+0x84>)
 8000656:	f000 fd8b 	bl	8001170 <HAL_GPIO_WritePin>
	  	HAL_UART_Receive(&huart2, (uint8_t *)&ordre, 1, 1);
 800065a:	1cf9      	adds	r1, r7, #3
 800065c:	2301      	movs	r3, #1
 800065e:	2201      	movs	r2, #1
 8000660:	4812      	ldr	r0, [pc, #72]	; (80006ac <main+0x88>)
 8000662:	f001 fe4b 	bl	80022fc <HAL_UART_Receive>
		if ((ordre>='0')&&(ordre<='9')){
 8000666:	78fb      	ldrb	r3, [r7, #3]
 8000668:	2b2f      	cmp	r3, #47	; 0x2f
 800066a:	d90a      	bls.n	8000682 <main+0x5e>
 800066c:	78fb      	ldrb	r3, [r7, #3]
 800066e:	2b39      	cmp	r3, #57	; 0x39
 8000670:	d807      	bhi.n	8000682 <main+0x5e>
			// ordre valide
			delay=75+50*(ordre-'0');
 8000672:	78fb      	ldrb	r3, [r7, #3]
 8000674:	3b30      	subs	r3, #48	; 0x30
 8000676:	2232      	movs	r2, #50	; 0x32
 8000678:	fb02 f303 	mul.w	r3, r2, r3
 800067c:	334b      	adds	r3, #75	; 0x4b
 800067e:	60bb      	str	r3, [r7, #8]
 8000680:	e002      	b.n	8000688 <main+0x64>
		}

		else{
			// ordre invalide
			printf("Merci de saisir un nombre entre 0 et 9\n\r");
 8000682:	480b      	ldr	r0, [pc, #44]	; (80006b0 <main+0x8c>)
 8000684:	f002 fcc4 	bl	8003010 <iprintf>
		}

	  	printf("delay = %d\n\r",delay);
 8000688:	68b9      	ldr	r1, [r7, #8]
 800068a:	480a      	ldr	r0, [pc, #40]	; (80006b4 <main+0x90>)
 800068c:	f002 fcc0 	bl	8003010 <iprintf>
		compteur=compteur+1;
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	3301      	adds	r3, #1
 8000694:	60fb      	str	r3, [r7, #12]
		HAL_Delay(delay);
 8000696:	68bb      	ldr	r3, [r7, #8]
 8000698:	4618      	mov	r0, r3
 800069a:	f000 fae1 	bl	8000c60 <HAL_Delay>
		status_led=1-status_led;
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	f1c3 0301 	rsb	r3, r3, #1
 80006a4:	607b      	str	r3, [r7, #4]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,status_led);
 80006a6:	e7d0      	b.n	800064a <main+0x26>
 80006a8:	48000400 	.word	0x48000400
 80006ac:	2000008c 	.word	0x2000008c
 80006b0:	08003f44 	.word	0x08003f44
 80006b4:	08003f70 	.word	0x08003f70

080006b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b094      	sub	sp, #80	; 0x50
 80006bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006be:	f107 0318 	add.w	r3, r7, #24
 80006c2:	2238      	movs	r2, #56	; 0x38
 80006c4:	2100      	movs	r1, #0
 80006c6:	4618      	mov	r0, r3
 80006c8:	f002 fc9a 	bl	8003000 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006cc:	1d3b      	adds	r3, r7, #4
 80006ce:	2200      	movs	r2, #0
 80006d0:	601a      	str	r2, [r3, #0]
 80006d2:	605a      	str	r2, [r3, #4]
 80006d4:	609a      	str	r2, [r3, #8]
 80006d6:	60da      	str	r2, [r3, #12]
 80006d8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80006da:	2000      	movs	r0, #0
 80006dc:	f000 fd60 	bl	80011a0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006e0:	2302      	movs	r3, #2
 80006e2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006e8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ea:	2340      	movs	r3, #64	; 0x40
 80006ec:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ee:	2302      	movs	r3, #2
 80006f0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006f2:	2302      	movs	r3, #2
 80006f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80006f6:	2304      	movs	r3, #4
 80006f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80006fa:	2355      	movs	r3, #85	; 0x55
 80006fc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006fe:	2302      	movs	r3, #2
 8000700:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000702:	2302      	movs	r3, #2
 8000704:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000706:	2302      	movs	r3, #2
 8000708:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800070a:	f107 0318 	add.w	r3, r7, #24
 800070e:	4618      	mov	r0, r3
 8000710:	f000 fdea 	bl	80012e8 <HAL_RCC_OscConfig>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800071a:	f000 f8a5 	bl	8000868 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071e:	230f      	movs	r3, #15
 8000720:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000722:	2303      	movs	r3, #3
 8000724:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000726:	2300      	movs	r3, #0
 8000728:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800072a:	2300      	movs	r3, #0
 800072c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800072e:	2300      	movs	r3, #0
 8000730:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000732:	1d3b      	adds	r3, r7, #4
 8000734:	2104      	movs	r1, #4
 8000736:	4618      	mov	r0, r3
 8000738:	f001 f8ee 	bl	8001918 <HAL_RCC_ClockConfig>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000742:	f000 f891 	bl	8000868 <Error_Handler>
  }
}
 8000746:	bf00      	nop
 8000748:	3750      	adds	r7, #80	; 0x50
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
	...

08000750 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000754:	4b22      	ldr	r3, [pc, #136]	; (80007e0 <MX_USART2_UART_Init+0x90>)
 8000756:	4a23      	ldr	r2, [pc, #140]	; (80007e4 <MX_USART2_UART_Init+0x94>)
 8000758:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800075a:	4b21      	ldr	r3, [pc, #132]	; (80007e0 <MX_USART2_UART_Init+0x90>)
 800075c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000760:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000762:	4b1f      	ldr	r3, [pc, #124]	; (80007e0 <MX_USART2_UART_Init+0x90>)
 8000764:	2200      	movs	r2, #0
 8000766:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000768:	4b1d      	ldr	r3, [pc, #116]	; (80007e0 <MX_USART2_UART_Init+0x90>)
 800076a:	2200      	movs	r2, #0
 800076c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800076e:	4b1c      	ldr	r3, [pc, #112]	; (80007e0 <MX_USART2_UART_Init+0x90>)
 8000770:	2200      	movs	r2, #0
 8000772:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000774:	4b1a      	ldr	r3, [pc, #104]	; (80007e0 <MX_USART2_UART_Init+0x90>)
 8000776:	220c      	movs	r2, #12
 8000778:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800077a:	4b19      	ldr	r3, [pc, #100]	; (80007e0 <MX_USART2_UART_Init+0x90>)
 800077c:	2200      	movs	r2, #0
 800077e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000780:	4b17      	ldr	r3, [pc, #92]	; (80007e0 <MX_USART2_UART_Init+0x90>)
 8000782:	2200      	movs	r2, #0
 8000784:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000786:	4b16      	ldr	r3, [pc, #88]	; (80007e0 <MX_USART2_UART_Init+0x90>)
 8000788:	2200      	movs	r2, #0
 800078a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800078c:	4b14      	ldr	r3, [pc, #80]	; (80007e0 <MX_USART2_UART_Init+0x90>)
 800078e:	2200      	movs	r2, #0
 8000790:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000792:	4b13      	ldr	r3, [pc, #76]	; (80007e0 <MX_USART2_UART_Init+0x90>)
 8000794:	2200      	movs	r2, #0
 8000796:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000798:	4811      	ldr	r0, [pc, #68]	; (80007e0 <MX_USART2_UART_Init+0x90>)
 800079a:	f001 fcc9 	bl	8002130 <HAL_UART_Init>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80007a4:	f000 f860 	bl	8000868 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007a8:	2100      	movs	r1, #0
 80007aa:	480d      	ldr	r0, [pc, #52]	; (80007e0 <MX_USART2_UART_Init+0x90>)
 80007ac:	f002 fb34 	bl	8002e18 <HAL_UARTEx_SetTxFifoThreshold>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80007b6:	f000 f857 	bl	8000868 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007ba:	2100      	movs	r1, #0
 80007bc:	4808      	ldr	r0, [pc, #32]	; (80007e0 <MX_USART2_UART_Init+0x90>)
 80007be:	f002 fb69 	bl	8002e94 <HAL_UARTEx_SetRxFifoThreshold>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80007c8:	f000 f84e 	bl	8000868 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80007cc:	4804      	ldr	r0, [pc, #16]	; (80007e0 <MX_USART2_UART_Init+0x90>)
 80007ce:	f002 faea 	bl	8002da6 <HAL_UARTEx_DisableFifoMode>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80007d8:	f000 f846 	bl	8000868 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007dc:	bf00      	nop
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	2000008c 	.word	0x2000008c
 80007e4:	40004400 	.word	0x40004400

080007e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b088      	sub	sp, #32
 80007ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ee:	f107 030c 	add.w	r3, r7, #12
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	605a      	str	r2, [r3, #4]
 80007f8:	609a      	str	r2, [r3, #8]
 80007fa:	60da      	str	r2, [r3, #12]
 80007fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fe:	4b18      	ldr	r3, [pc, #96]	; (8000860 <MX_GPIO_Init+0x78>)
 8000800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000802:	4a17      	ldr	r2, [pc, #92]	; (8000860 <MX_GPIO_Init+0x78>)
 8000804:	f043 0301 	orr.w	r3, r3, #1
 8000808:	64d3      	str	r3, [r2, #76]	; 0x4c
 800080a:	4b15      	ldr	r3, [pc, #84]	; (8000860 <MX_GPIO_Init+0x78>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080e:	f003 0301 	and.w	r3, r3, #1
 8000812:	60bb      	str	r3, [r7, #8]
 8000814:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000816:	4b12      	ldr	r3, [pc, #72]	; (8000860 <MX_GPIO_Init+0x78>)
 8000818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081a:	4a11      	ldr	r2, [pc, #68]	; (8000860 <MX_GPIO_Init+0x78>)
 800081c:	f043 0302 	orr.w	r3, r3, #2
 8000820:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000822:	4b0f      	ldr	r3, [pc, #60]	; (8000860 <MX_GPIO_Init+0x78>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000826:	f003 0302 	and.w	r3, r3, #2
 800082a:	607b      	str	r3, [r7, #4]
 800082c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800082e:	2200      	movs	r2, #0
 8000830:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000834:	480b      	ldr	r0, [pc, #44]	; (8000864 <MX_GPIO_Init+0x7c>)
 8000836:	f000 fc9b 	bl	8001170 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800083a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800083e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000840:	2301      	movs	r3, #1
 8000842:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000844:	2300      	movs	r3, #0
 8000846:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000848:	2300      	movs	r3, #0
 800084a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800084c:	f107 030c 	add.w	r3, r7, #12
 8000850:	4619      	mov	r1, r3
 8000852:	4804      	ldr	r0, [pc, #16]	; (8000864 <MX_GPIO_Init+0x7c>)
 8000854:	f000 fb0a 	bl	8000e6c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000858:	bf00      	nop
 800085a:	3720      	adds	r7, #32
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	40021000 	.word	0x40021000
 8000864:	48000400 	.word	0x48000400

08000868 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800086c:	b672      	cpsid	i
}
 800086e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000870:	e7fe      	b.n	8000870 <Error_Handler+0x8>
	...

08000874 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800087a:	4b0f      	ldr	r3, [pc, #60]	; (80008b8 <HAL_MspInit+0x44>)
 800087c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800087e:	4a0e      	ldr	r2, [pc, #56]	; (80008b8 <HAL_MspInit+0x44>)
 8000880:	f043 0301 	orr.w	r3, r3, #1
 8000884:	6613      	str	r3, [r2, #96]	; 0x60
 8000886:	4b0c      	ldr	r3, [pc, #48]	; (80008b8 <HAL_MspInit+0x44>)
 8000888:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800088a:	f003 0301 	and.w	r3, r3, #1
 800088e:	607b      	str	r3, [r7, #4]
 8000890:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000892:	4b09      	ldr	r3, [pc, #36]	; (80008b8 <HAL_MspInit+0x44>)
 8000894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000896:	4a08      	ldr	r2, [pc, #32]	; (80008b8 <HAL_MspInit+0x44>)
 8000898:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800089c:	6593      	str	r3, [r2, #88]	; 0x58
 800089e:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <HAL_MspInit+0x44>)
 80008a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008a6:	603b      	str	r3, [r7, #0]
 80008a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008aa:	bf00      	nop
 80008ac:	370c      	adds	r7, #12
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	40021000 	.word	0x40021000

080008bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b09a      	sub	sp, #104	; 0x68
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80008c8:	2200      	movs	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
 80008cc:	605a      	str	r2, [r3, #4]
 80008ce:	609a      	str	r2, [r3, #8]
 80008d0:	60da      	str	r2, [r3, #12]
 80008d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008d4:	f107 0310 	add.w	r3, r7, #16
 80008d8:	2244      	movs	r2, #68	; 0x44
 80008da:	2100      	movs	r1, #0
 80008dc:	4618      	mov	r0, r3
 80008de:	f002 fb8f 	bl	8003000 <memset>
  if(huart->Instance==USART2)
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	4a1f      	ldr	r2, [pc, #124]	; (8000964 <HAL_UART_MspInit+0xa8>)
 80008e8:	4293      	cmp	r3, r2
 80008ea:	d136      	bne.n	800095a <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80008ec:	2302      	movs	r3, #2
 80008ee:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80008f0:	2300      	movs	r3, #0
 80008f2:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008f4:	f107 0310 	add.w	r3, r7, #16
 80008f8:	4618      	mov	r0, r3
 80008fa:	f001 fa29 	bl	8001d50 <HAL_RCCEx_PeriphCLKConfig>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000904:	f7ff ffb0 	bl	8000868 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000908:	4b17      	ldr	r3, [pc, #92]	; (8000968 <HAL_UART_MspInit+0xac>)
 800090a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800090c:	4a16      	ldr	r2, [pc, #88]	; (8000968 <HAL_UART_MspInit+0xac>)
 800090e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000912:	6593      	str	r3, [r2, #88]	; 0x58
 8000914:	4b14      	ldr	r3, [pc, #80]	; (8000968 <HAL_UART_MspInit+0xac>)
 8000916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000918:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800091c:	60fb      	str	r3, [r7, #12]
 800091e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000920:	4b11      	ldr	r3, [pc, #68]	; (8000968 <HAL_UART_MspInit+0xac>)
 8000922:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000924:	4a10      	ldr	r2, [pc, #64]	; (8000968 <HAL_UART_MspInit+0xac>)
 8000926:	f043 0301 	orr.w	r3, r3, #1
 800092a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800092c:	4b0e      	ldr	r3, [pc, #56]	; (8000968 <HAL_UART_MspInit+0xac>)
 800092e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000930:	f003 0301 	and.w	r3, r3, #1
 8000934:	60bb      	str	r3, [r7, #8]
 8000936:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000938:	230c      	movs	r3, #12
 800093a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093c:	2302      	movs	r3, #2
 800093e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000944:	2300      	movs	r3, #0
 8000946:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000948:	2307      	movs	r3, #7
 800094a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800094c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000950:	4619      	mov	r1, r3
 8000952:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000956:	f000 fa89 	bl	8000e6c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800095a:	bf00      	nop
 800095c:	3768      	adds	r7, #104	; 0x68
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40004400 	.word	0x40004400
 8000968:	40021000 	.word	0x40021000

0800096c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000970:	e7fe      	b.n	8000970 <NMI_Handler+0x4>

08000972 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000972:	b480      	push	{r7}
 8000974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000976:	e7fe      	b.n	8000976 <HardFault_Handler+0x4>

08000978 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800097c:	e7fe      	b.n	800097c <MemManage_Handler+0x4>

0800097e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800097e:	b480      	push	{r7}
 8000980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000982:	e7fe      	b.n	8000982 <BusFault_Handler+0x4>

08000984 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000988:	e7fe      	b.n	8000988 <UsageFault_Handler+0x4>

0800098a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800098a:	b480      	push	{r7}
 800098c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800098e:	bf00      	nop
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr

08000998 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800099c:	bf00      	nop
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr

080009a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009a6:	b480      	push	{r7}
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009aa:	bf00      	nop
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr

080009b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009b8:	f000 f934 	bl	8000c24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009bc:	bf00      	nop
 80009be:	bd80      	pop	{r7, pc}

080009c0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b086      	sub	sp, #24
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	60f8      	str	r0, [r7, #12]
 80009c8:	60b9      	str	r1, [r7, #8]
 80009ca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009cc:	2300      	movs	r3, #0
 80009ce:	617b      	str	r3, [r7, #20]
 80009d0:	e00a      	b.n	80009e8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80009d2:	f7ff fe09 	bl	80005e8 <__io_getchar>
 80009d6:	4601      	mov	r1, r0
 80009d8:	68bb      	ldr	r3, [r7, #8]
 80009da:	1c5a      	adds	r2, r3, #1
 80009dc:	60ba      	str	r2, [r7, #8]
 80009de:	b2ca      	uxtb	r2, r1
 80009e0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009e2:	697b      	ldr	r3, [r7, #20]
 80009e4:	3301      	adds	r3, #1
 80009e6:	617b      	str	r3, [r7, #20]
 80009e8:	697a      	ldr	r2, [r7, #20]
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	429a      	cmp	r2, r3
 80009ee:	dbf0      	blt.n	80009d2 <_read+0x12>
  }

  return len;
 80009f0:	687b      	ldr	r3, [r7, #4]
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	3718      	adds	r7, #24
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}

080009fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009fa:	b580      	push	{r7, lr}
 80009fc:	b086      	sub	sp, #24
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	60f8      	str	r0, [r7, #12]
 8000a02:	60b9      	str	r1, [r7, #8]
 8000a04:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a06:	2300      	movs	r3, #0
 8000a08:	617b      	str	r3, [r7, #20]
 8000a0a:	e009      	b.n	8000a20 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a0c:	68bb      	ldr	r3, [r7, #8]
 8000a0e:	1c5a      	adds	r2, r3, #1
 8000a10:	60ba      	str	r2, [r7, #8]
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	4618      	mov	r0, r3
 8000a16:	f7ff fdd5 	bl	80005c4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a1a:	697b      	ldr	r3, [r7, #20]
 8000a1c:	3301      	adds	r3, #1
 8000a1e:	617b      	str	r3, [r7, #20]
 8000a20:	697a      	ldr	r2, [r7, #20]
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	429a      	cmp	r2, r3
 8000a26:	dbf1      	blt.n	8000a0c <_write+0x12>
  }
  return len;
 8000a28:	687b      	ldr	r3, [r7, #4]
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	3718      	adds	r7, #24
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}

08000a32 <_close>:

int _close(int file)
{
 8000a32:	b480      	push	{r7}
 8000a34:	b083      	sub	sp, #12
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a3a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	370c      	adds	r7, #12
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr

08000a4a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	b083      	sub	sp, #12
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	6078      	str	r0, [r7, #4]
 8000a52:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a5a:	605a      	str	r2, [r3, #4]
  return 0;
 8000a5c:	2300      	movs	r3, #0
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	370c      	adds	r7, #12
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr

08000a6a <_isatty>:

int _isatty(int file)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	b083      	sub	sp, #12
 8000a6e:	af00      	add	r7, sp, #0
 8000a70:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a72:	2301      	movs	r3, #1
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	370c      	adds	r7, #12
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr

08000a80 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b085      	sub	sp, #20
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	60f8      	str	r0, [r7, #12]
 8000a88:	60b9      	str	r1, [r7, #8]
 8000a8a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a8c:	2300      	movs	r3, #0
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	3714      	adds	r7, #20
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
	...

08000a9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b086      	sub	sp, #24
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000aa4:	4a14      	ldr	r2, [pc, #80]	; (8000af8 <_sbrk+0x5c>)
 8000aa6:	4b15      	ldr	r3, [pc, #84]	; (8000afc <_sbrk+0x60>)
 8000aa8:	1ad3      	subs	r3, r2, r3
 8000aaa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ab0:	4b13      	ldr	r3, [pc, #76]	; (8000b00 <_sbrk+0x64>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d102      	bne.n	8000abe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ab8:	4b11      	ldr	r3, [pc, #68]	; (8000b00 <_sbrk+0x64>)
 8000aba:	4a12      	ldr	r2, [pc, #72]	; (8000b04 <_sbrk+0x68>)
 8000abc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000abe:	4b10      	ldr	r3, [pc, #64]	; (8000b00 <_sbrk+0x64>)
 8000ac0:	681a      	ldr	r2, [r3, #0]
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	4413      	add	r3, r2
 8000ac6:	693a      	ldr	r2, [r7, #16]
 8000ac8:	429a      	cmp	r2, r3
 8000aca:	d207      	bcs.n	8000adc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000acc:	f002 fa6e 	bl	8002fac <__errno>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	220c      	movs	r2, #12
 8000ad4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8000ada:	e009      	b.n	8000af0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000adc:	4b08      	ldr	r3, [pc, #32]	; (8000b00 <_sbrk+0x64>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ae2:	4b07      	ldr	r3, [pc, #28]	; (8000b00 <_sbrk+0x64>)
 8000ae4:	681a      	ldr	r2, [r3, #0]
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	4413      	add	r3, r2
 8000aea:	4a05      	ldr	r2, [pc, #20]	; (8000b00 <_sbrk+0x64>)
 8000aec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000aee:	68fb      	ldr	r3, [r7, #12]
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	3718      	adds	r7, #24
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	20008000 	.word	0x20008000
 8000afc:	00000400 	.word	0x00000400
 8000b00:	2000011c 	.word	0x2000011c
 8000b04:	20000138 	.word	0x20000138

08000b08 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b0c:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <SystemInit+0x20>)
 8000b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b12:	4a05      	ldr	r2, [pc, #20]	; (8000b28 <SystemInit+0x20>)
 8000b14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b1c:	bf00      	nop
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	e000ed00 	.word	0xe000ed00

08000b2c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b2c:	480d      	ldr	r0, [pc, #52]	; (8000b64 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b2e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b30:	480d      	ldr	r0, [pc, #52]	; (8000b68 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b32:	490e      	ldr	r1, [pc, #56]	; (8000b6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b34:	4a0e      	ldr	r2, [pc, #56]	; (8000b70 <LoopForever+0xe>)
  movs r3, #0
 8000b36:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000b38:	e002      	b.n	8000b40 <LoopCopyDataInit>

08000b3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b3e:	3304      	adds	r3, #4

08000b40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b44:	d3f9      	bcc.n	8000b3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b46:	4a0b      	ldr	r2, [pc, #44]	; (8000b74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b48:	4c0b      	ldr	r4, [pc, #44]	; (8000b78 <LoopForever+0x16>)
  movs r3, #0
 8000b4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b4c:	e001      	b.n	8000b52 <LoopFillZerobss>

08000b4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b50:	3204      	adds	r2, #4

08000b52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b54:	d3fb      	bcc.n	8000b4e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b56:	f7ff ffd7 	bl	8000b08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b5a:	f002 fa2d 	bl	8002fb8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b5e:	f7ff fd61 	bl	8000624 <main>

08000b62 <LoopForever>:

LoopForever:
    b LoopForever
 8000b62:	e7fe      	b.n	8000b62 <LoopForever>
  ldr   r0, =_estack
 8000b64:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000b68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b6c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000b70:	08004068 	.word	0x08004068
  ldr r2, =_sbss
 8000b74:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000b78:	20000134 	.word	0x20000134

08000b7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b7c:	e7fe      	b.n	8000b7c <ADC1_2_IRQHandler>

08000b7e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	b082      	sub	sp, #8
 8000b82:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b84:	2300      	movs	r3, #0
 8000b86:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b88:	2003      	movs	r0, #3
 8000b8a:	f000 f93d 	bl	8000e08 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b8e:	2000      	movs	r0, #0
 8000b90:	f000 f80e 	bl	8000bb0 <HAL_InitTick>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d002      	beq.n	8000ba0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	71fb      	strb	r3, [r7, #7]
 8000b9e:	e001      	b.n	8000ba4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ba0:	f7ff fe68 	bl	8000874 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ba4:	79fb      	ldrb	r3, [r7, #7]

}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
	...

08000bb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b084      	sub	sp, #16
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000bbc:	4b16      	ldr	r3, [pc, #88]	; (8000c18 <HAL_InitTick+0x68>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d022      	beq.n	8000c0a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000bc4:	4b15      	ldr	r3, [pc, #84]	; (8000c1c <HAL_InitTick+0x6c>)
 8000bc6:	681a      	ldr	r2, [r3, #0]
 8000bc8:	4b13      	ldr	r3, [pc, #76]	; (8000c18 <HAL_InitTick+0x68>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000bd0:	fbb1 f3f3 	udiv	r3, r1, r3
 8000bd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f000 f93a 	bl	8000e52 <HAL_SYSTICK_Config>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d10f      	bne.n	8000c04 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2b0f      	cmp	r3, #15
 8000be8:	d809      	bhi.n	8000bfe <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bea:	2200      	movs	r2, #0
 8000bec:	6879      	ldr	r1, [r7, #4]
 8000bee:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf2:	f000 f914 	bl	8000e1e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bf6:	4a0a      	ldr	r2, [pc, #40]	; (8000c20 <HAL_InitTick+0x70>)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	6013      	str	r3, [r2, #0]
 8000bfc:	e007      	b.n	8000c0e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	73fb      	strb	r3, [r7, #15]
 8000c02:	e004      	b.n	8000c0e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c04:	2301      	movs	r3, #1
 8000c06:	73fb      	strb	r3, [r7, #15]
 8000c08:	e001      	b.n	8000c0e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	3710      	adds	r7, #16
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	20000008 	.word	0x20000008
 8000c1c:	20000000 	.word	0x20000000
 8000c20:	20000004 	.word	0x20000004

08000c24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c28:	4b05      	ldr	r3, [pc, #20]	; (8000c40 <HAL_IncTick+0x1c>)
 8000c2a:	681a      	ldr	r2, [r3, #0]
 8000c2c:	4b05      	ldr	r3, [pc, #20]	; (8000c44 <HAL_IncTick+0x20>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4413      	add	r3, r2
 8000c32:	4a03      	ldr	r2, [pc, #12]	; (8000c40 <HAL_IncTick+0x1c>)
 8000c34:	6013      	str	r3, [r2, #0]
}
 8000c36:	bf00      	nop
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr
 8000c40:	20000120 	.word	0x20000120
 8000c44:	20000008 	.word	0x20000008

08000c48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c4c:	4b03      	ldr	r3, [pc, #12]	; (8000c5c <HAL_GetTick+0x14>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	20000120 	.word	0x20000120

08000c60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b084      	sub	sp, #16
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c68:	f7ff ffee 	bl	8000c48 <HAL_GetTick>
 8000c6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c78:	d004      	beq.n	8000c84 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c7a:	4b09      	ldr	r3, [pc, #36]	; (8000ca0 <HAL_Delay+0x40>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	68fa      	ldr	r2, [r7, #12]
 8000c80:	4413      	add	r3, r2
 8000c82:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c84:	bf00      	nop
 8000c86:	f7ff ffdf 	bl	8000c48 <HAL_GetTick>
 8000c8a:	4602      	mov	r2, r0
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	1ad3      	subs	r3, r2, r3
 8000c90:	68fa      	ldr	r2, [r7, #12]
 8000c92:	429a      	cmp	r2, r3
 8000c94:	d8f7      	bhi.n	8000c86 <HAL_Delay+0x26>
  {
  }
}
 8000c96:	bf00      	nop
 8000c98:	bf00      	nop
 8000c9a:	3710      	adds	r7, #16
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	20000008 	.word	0x20000008

08000ca4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b085      	sub	sp, #20
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	f003 0307 	and.w	r3, r3, #7
 8000cb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cb4:	4b0c      	ldr	r3, [pc, #48]	; (8000ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cb6:	68db      	ldr	r3, [r3, #12]
 8000cb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cba:	68ba      	ldr	r2, [r7, #8]
 8000cbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ccc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cd6:	4a04      	ldr	r2, [pc, #16]	; (8000ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	60d3      	str	r3, [r2, #12]
}
 8000cdc:	bf00      	nop
 8000cde:	3714      	adds	r7, #20
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr
 8000ce8:	e000ed00 	.word	0xe000ed00

08000cec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cf0:	4b04      	ldr	r3, [pc, #16]	; (8000d04 <__NVIC_GetPriorityGrouping+0x18>)
 8000cf2:	68db      	ldr	r3, [r3, #12]
 8000cf4:	0a1b      	lsrs	r3, r3, #8
 8000cf6:	f003 0307 	and.w	r3, r3, #7
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr
 8000d04:	e000ed00 	.word	0xe000ed00

08000d08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	4603      	mov	r3, r0
 8000d10:	6039      	str	r1, [r7, #0]
 8000d12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	db0a      	blt.n	8000d32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	b2da      	uxtb	r2, r3
 8000d20:	490c      	ldr	r1, [pc, #48]	; (8000d54 <__NVIC_SetPriority+0x4c>)
 8000d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d26:	0112      	lsls	r2, r2, #4
 8000d28:	b2d2      	uxtb	r2, r2
 8000d2a:	440b      	add	r3, r1
 8000d2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d30:	e00a      	b.n	8000d48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	b2da      	uxtb	r2, r3
 8000d36:	4908      	ldr	r1, [pc, #32]	; (8000d58 <__NVIC_SetPriority+0x50>)
 8000d38:	79fb      	ldrb	r3, [r7, #7]
 8000d3a:	f003 030f 	and.w	r3, r3, #15
 8000d3e:	3b04      	subs	r3, #4
 8000d40:	0112      	lsls	r2, r2, #4
 8000d42:	b2d2      	uxtb	r2, r2
 8000d44:	440b      	add	r3, r1
 8000d46:	761a      	strb	r2, [r3, #24]
}
 8000d48:	bf00      	nop
 8000d4a:	370c      	adds	r7, #12
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr
 8000d54:	e000e100 	.word	0xe000e100
 8000d58:	e000ed00 	.word	0xe000ed00

08000d5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b089      	sub	sp, #36	; 0x24
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	60f8      	str	r0, [r7, #12]
 8000d64:	60b9      	str	r1, [r7, #8]
 8000d66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	f003 0307 	and.w	r3, r3, #7
 8000d6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d70:	69fb      	ldr	r3, [r7, #28]
 8000d72:	f1c3 0307 	rsb	r3, r3, #7
 8000d76:	2b04      	cmp	r3, #4
 8000d78:	bf28      	it	cs
 8000d7a:	2304      	movcs	r3, #4
 8000d7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	3304      	adds	r3, #4
 8000d82:	2b06      	cmp	r3, #6
 8000d84:	d902      	bls.n	8000d8c <NVIC_EncodePriority+0x30>
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	3b03      	subs	r3, #3
 8000d8a:	e000      	b.n	8000d8e <NVIC_EncodePriority+0x32>
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d90:	f04f 32ff 	mov.w	r2, #4294967295
 8000d94:	69bb      	ldr	r3, [r7, #24]
 8000d96:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9a:	43da      	mvns	r2, r3
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	401a      	ands	r2, r3
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000da4:	f04f 31ff 	mov.w	r1, #4294967295
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	fa01 f303 	lsl.w	r3, r1, r3
 8000dae:	43d9      	mvns	r1, r3
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db4:	4313      	orrs	r3, r2
         );
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3724      	adds	r7, #36	; 0x24
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
	...

08000dc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	3b01      	subs	r3, #1
 8000dd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dd4:	d301      	bcc.n	8000dda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	e00f      	b.n	8000dfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dda:	4a0a      	ldr	r2, [pc, #40]	; (8000e04 <SysTick_Config+0x40>)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	3b01      	subs	r3, #1
 8000de0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000de2:	210f      	movs	r1, #15
 8000de4:	f04f 30ff 	mov.w	r0, #4294967295
 8000de8:	f7ff ff8e 	bl	8000d08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dec:	4b05      	ldr	r3, [pc, #20]	; (8000e04 <SysTick_Config+0x40>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000df2:	4b04      	ldr	r3, [pc, #16]	; (8000e04 <SysTick_Config+0x40>)
 8000df4:	2207      	movs	r2, #7
 8000df6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000df8:	2300      	movs	r3, #0
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3708      	adds	r7, #8
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	e000e010 	.word	0xe000e010

08000e08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e10:	6878      	ldr	r0, [r7, #4]
 8000e12:	f7ff ff47 	bl	8000ca4 <__NVIC_SetPriorityGrouping>
}
 8000e16:	bf00      	nop
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}

08000e1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e1e:	b580      	push	{r7, lr}
 8000e20:	b086      	sub	sp, #24
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	4603      	mov	r3, r0
 8000e26:	60b9      	str	r1, [r7, #8]
 8000e28:	607a      	str	r2, [r7, #4]
 8000e2a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e2c:	f7ff ff5e 	bl	8000cec <__NVIC_GetPriorityGrouping>
 8000e30:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e32:	687a      	ldr	r2, [r7, #4]
 8000e34:	68b9      	ldr	r1, [r7, #8]
 8000e36:	6978      	ldr	r0, [r7, #20]
 8000e38:	f7ff ff90 	bl	8000d5c <NVIC_EncodePriority>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e42:	4611      	mov	r1, r2
 8000e44:	4618      	mov	r0, r3
 8000e46:	f7ff ff5f 	bl	8000d08 <__NVIC_SetPriority>
}
 8000e4a:	bf00      	nop
 8000e4c:	3718      	adds	r7, #24
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e52:	b580      	push	{r7, lr}
 8000e54:	b082      	sub	sp, #8
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e5a:	6878      	ldr	r0, [r7, #4]
 8000e5c:	f7ff ffb2 	bl	8000dc4 <SysTick_Config>
 8000e60:	4603      	mov	r3, r0
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
	...

08000e6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b087      	sub	sp, #28
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
 8000e74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000e76:	2300      	movs	r3, #0
 8000e78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000e7a:	e15a      	b.n	8001132 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	2101      	movs	r1, #1
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	fa01 f303 	lsl.w	r3, r1, r3
 8000e88:	4013      	ands	r3, r2
 8000e8a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	f000 814c 	beq.w	800112c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	f003 0303 	and.w	r3, r3, #3
 8000e9c:	2b01      	cmp	r3, #1
 8000e9e:	d005      	beq.n	8000eac <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ea8:	2b02      	cmp	r3, #2
 8000eaa:	d130      	bne.n	8000f0e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	689b      	ldr	r3, [r3, #8]
 8000eb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	005b      	lsls	r3, r3, #1
 8000eb6:	2203      	movs	r2, #3
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	43db      	mvns	r3, r3
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	68da      	ldr	r2, [r3, #12]
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	005b      	lsls	r3, r3, #1
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	693a      	ldr	r2, [r7, #16]
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	693a      	ldr	r2, [r7, #16]
 8000eda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eea:	43db      	mvns	r3, r3
 8000eec:	693a      	ldr	r2, [r7, #16]
 8000eee:	4013      	ands	r3, r2
 8000ef0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	091b      	lsrs	r3, r3, #4
 8000ef8:	f003 0201 	and.w	r2, r3, #1
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	fa02 f303 	lsl.w	r3, r2, r3
 8000f02:	693a      	ldr	r2, [r7, #16]
 8000f04:	4313      	orrs	r3, r2
 8000f06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	693a      	ldr	r2, [r7, #16]
 8000f0c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	f003 0303 	and.w	r3, r3, #3
 8000f16:	2b03      	cmp	r3, #3
 8000f18:	d017      	beq.n	8000f4a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	68db      	ldr	r3, [r3, #12]
 8000f1e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	2203      	movs	r2, #3
 8000f26:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2a:	43db      	mvns	r3, r3
 8000f2c:	693a      	ldr	r2, [r7, #16]
 8000f2e:	4013      	ands	r3, r2
 8000f30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	689a      	ldr	r2, [r3, #8]
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	005b      	lsls	r3, r3, #1
 8000f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3e:	693a      	ldr	r2, [r7, #16]
 8000f40:	4313      	orrs	r3, r2
 8000f42:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	693a      	ldr	r2, [r7, #16]
 8000f48:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f003 0303 	and.w	r3, r3, #3
 8000f52:	2b02      	cmp	r3, #2
 8000f54:	d123      	bne.n	8000f9e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	08da      	lsrs	r2, r3, #3
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	3208      	adds	r2, #8
 8000f5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f62:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	f003 0307 	and.w	r3, r3, #7
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	220f      	movs	r2, #15
 8000f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f72:	43db      	mvns	r3, r3
 8000f74:	693a      	ldr	r2, [r7, #16]
 8000f76:	4013      	ands	r3, r2
 8000f78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	691a      	ldr	r2, [r3, #16]
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	f003 0307 	and.w	r3, r3, #7
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8a:	693a      	ldr	r2, [r7, #16]
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	08da      	lsrs	r2, r3, #3
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	3208      	adds	r2, #8
 8000f98:	6939      	ldr	r1, [r7, #16]
 8000f9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	005b      	lsls	r3, r3, #1
 8000fa8:	2203      	movs	r2, #3
 8000faa:	fa02 f303 	lsl.w	r3, r2, r3
 8000fae:	43db      	mvns	r3, r3
 8000fb0:	693a      	ldr	r2, [r7, #16]
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	f003 0203 	and.w	r2, r3, #3
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	f000 80a6 	beq.w	800112c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fe0:	4b5b      	ldr	r3, [pc, #364]	; (8001150 <HAL_GPIO_Init+0x2e4>)
 8000fe2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fe4:	4a5a      	ldr	r2, [pc, #360]	; (8001150 <HAL_GPIO_Init+0x2e4>)
 8000fe6:	f043 0301 	orr.w	r3, r3, #1
 8000fea:	6613      	str	r3, [r2, #96]	; 0x60
 8000fec:	4b58      	ldr	r3, [pc, #352]	; (8001150 <HAL_GPIO_Init+0x2e4>)
 8000fee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ff0:	f003 0301 	and.w	r3, r3, #1
 8000ff4:	60bb      	str	r3, [r7, #8]
 8000ff6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ff8:	4a56      	ldr	r2, [pc, #344]	; (8001154 <HAL_GPIO_Init+0x2e8>)
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	089b      	lsrs	r3, r3, #2
 8000ffe:	3302      	adds	r3, #2
 8001000:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001004:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	f003 0303 	and.w	r3, r3, #3
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	220f      	movs	r2, #15
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	43db      	mvns	r3, r3
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	4013      	ands	r3, r2
 800101a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001022:	d01f      	beq.n	8001064 <HAL_GPIO_Init+0x1f8>
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	4a4c      	ldr	r2, [pc, #304]	; (8001158 <HAL_GPIO_Init+0x2ec>)
 8001028:	4293      	cmp	r3, r2
 800102a:	d019      	beq.n	8001060 <HAL_GPIO_Init+0x1f4>
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	4a4b      	ldr	r2, [pc, #300]	; (800115c <HAL_GPIO_Init+0x2f0>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d013      	beq.n	800105c <HAL_GPIO_Init+0x1f0>
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	4a4a      	ldr	r2, [pc, #296]	; (8001160 <HAL_GPIO_Init+0x2f4>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d00d      	beq.n	8001058 <HAL_GPIO_Init+0x1ec>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	4a49      	ldr	r2, [pc, #292]	; (8001164 <HAL_GPIO_Init+0x2f8>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d007      	beq.n	8001054 <HAL_GPIO_Init+0x1e8>
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	4a48      	ldr	r2, [pc, #288]	; (8001168 <HAL_GPIO_Init+0x2fc>)
 8001048:	4293      	cmp	r3, r2
 800104a:	d101      	bne.n	8001050 <HAL_GPIO_Init+0x1e4>
 800104c:	2305      	movs	r3, #5
 800104e:	e00a      	b.n	8001066 <HAL_GPIO_Init+0x1fa>
 8001050:	2306      	movs	r3, #6
 8001052:	e008      	b.n	8001066 <HAL_GPIO_Init+0x1fa>
 8001054:	2304      	movs	r3, #4
 8001056:	e006      	b.n	8001066 <HAL_GPIO_Init+0x1fa>
 8001058:	2303      	movs	r3, #3
 800105a:	e004      	b.n	8001066 <HAL_GPIO_Init+0x1fa>
 800105c:	2302      	movs	r3, #2
 800105e:	e002      	b.n	8001066 <HAL_GPIO_Init+0x1fa>
 8001060:	2301      	movs	r3, #1
 8001062:	e000      	b.n	8001066 <HAL_GPIO_Init+0x1fa>
 8001064:	2300      	movs	r3, #0
 8001066:	697a      	ldr	r2, [r7, #20]
 8001068:	f002 0203 	and.w	r2, r2, #3
 800106c:	0092      	lsls	r2, r2, #2
 800106e:	4093      	lsls	r3, r2
 8001070:	693a      	ldr	r2, [r7, #16]
 8001072:	4313      	orrs	r3, r2
 8001074:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001076:	4937      	ldr	r1, [pc, #220]	; (8001154 <HAL_GPIO_Init+0x2e8>)
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	089b      	lsrs	r3, r3, #2
 800107c:	3302      	adds	r3, #2
 800107e:	693a      	ldr	r2, [r7, #16]
 8001080:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001084:	4b39      	ldr	r3, [pc, #228]	; (800116c <HAL_GPIO_Init+0x300>)
 8001086:	689b      	ldr	r3, [r3, #8]
 8001088:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	43db      	mvns	r3, r3
 800108e:	693a      	ldr	r2, [r7, #16]
 8001090:	4013      	ands	r3, r2
 8001092:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800109c:	2b00      	cmp	r3, #0
 800109e:	d003      	beq.n	80010a8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80010a0:	693a      	ldr	r2, [r7, #16]
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010a8:	4a30      	ldr	r2, [pc, #192]	; (800116c <HAL_GPIO_Init+0x300>)
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80010ae:	4b2f      	ldr	r3, [pc, #188]	; (800116c <HAL_GPIO_Init+0x300>)
 80010b0:	68db      	ldr	r3, [r3, #12]
 80010b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	43db      	mvns	r3, r3
 80010b8:	693a      	ldr	r2, [r7, #16]
 80010ba:	4013      	ands	r3, r2
 80010bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d003      	beq.n	80010d2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80010ca:	693a      	ldr	r2, [r7, #16]
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010d2:	4a26      	ldr	r2, [pc, #152]	; (800116c <HAL_GPIO_Init+0x300>)
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80010d8:	4b24      	ldr	r3, [pc, #144]	; (800116c <HAL_GPIO_Init+0x300>)
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	43db      	mvns	r3, r3
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	4013      	ands	r3, r2
 80010e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d003      	beq.n	80010fc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80010f4:	693a      	ldr	r2, [r7, #16]
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80010fc:	4a1b      	ldr	r2, [pc, #108]	; (800116c <HAL_GPIO_Init+0x300>)
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001102:	4b1a      	ldr	r3, [pc, #104]	; (800116c <HAL_GPIO_Init+0x300>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	43db      	mvns	r3, r3
 800110c:	693a      	ldr	r2, [r7, #16]
 800110e:	4013      	ands	r3, r2
 8001110:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800111a:	2b00      	cmp	r3, #0
 800111c:	d003      	beq.n	8001126 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800111e:	693a      	ldr	r2, [r7, #16]
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	4313      	orrs	r3, r2
 8001124:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001126:	4a11      	ldr	r2, [pc, #68]	; (800116c <HAL_GPIO_Init+0x300>)
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	3301      	adds	r3, #1
 8001130:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	fa22 f303 	lsr.w	r3, r2, r3
 800113c:	2b00      	cmp	r3, #0
 800113e:	f47f ae9d 	bne.w	8000e7c <HAL_GPIO_Init+0x10>
  }
}
 8001142:	bf00      	nop
 8001144:	bf00      	nop
 8001146:	371c      	adds	r7, #28
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr
 8001150:	40021000 	.word	0x40021000
 8001154:	40010000 	.word	0x40010000
 8001158:	48000400 	.word	0x48000400
 800115c:	48000800 	.word	0x48000800
 8001160:	48000c00 	.word	0x48000c00
 8001164:	48001000 	.word	0x48001000
 8001168:	48001400 	.word	0x48001400
 800116c:	40010400 	.word	0x40010400

08001170 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	460b      	mov	r3, r1
 800117a:	807b      	strh	r3, [r7, #2]
 800117c:	4613      	mov	r3, r2
 800117e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001180:	787b      	ldrb	r3, [r7, #1]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d003      	beq.n	800118e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001186:	887a      	ldrh	r2, [r7, #2]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800118c:	e002      	b.n	8001194 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800118e:	887a      	ldrh	r2, [r7, #2]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001194:	bf00      	nop
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr

080011a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b085      	sub	sp, #20
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d141      	bne.n	8001232 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80011ae:	4b4b      	ldr	r3, [pc, #300]	; (80012dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80011b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011ba:	d131      	bne.n	8001220 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80011bc:	4b47      	ldr	r3, [pc, #284]	; (80012dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80011c2:	4a46      	ldr	r2, [pc, #280]	; (80012dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80011c8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80011cc:	4b43      	ldr	r3, [pc, #268]	; (80012dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80011d4:	4a41      	ldr	r2, [pc, #260]	; (80012dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011da:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80011dc:	4b40      	ldr	r3, [pc, #256]	; (80012e0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	2232      	movs	r2, #50	; 0x32
 80011e2:	fb02 f303 	mul.w	r3, r2, r3
 80011e6:	4a3f      	ldr	r2, [pc, #252]	; (80012e4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80011e8:	fba2 2303 	umull	r2, r3, r2, r3
 80011ec:	0c9b      	lsrs	r3, r3, #18
 80011ee:	3301      	adds	r3, #1
 80011f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011f2:	e002      	b.n	80011fa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	3b01      	subs	r3, #1
 80011f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011fa:	4b38      	ldr	r3, [pc, #224]	; (80012dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011fc:	695b      	ldr	r3, [r3, #20]
 80011fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001202:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001206:	d102      	bne.n	800120e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d1f2      	bne.n	80011f4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800120e:	4b33      	ldr	r3, [pc, #204]	; (80012dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001210:	695b      	ldr	r3, [r3, #20]
 8001212:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001216:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800121a:	d158      	bne.n	80012ce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800121c:	2303      	movs	r3, #3
 800121e:	e057      	b.n	80012d0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001220:	4b2e      	ldr	r3, [pc, #184]	; (80012dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001222:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001226:	4a2d      	ldr	r2, [pc, #180]	; (80012dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001228:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800122c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001230:	e04d      	b.n	80012ce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001238:	d141      	bne.n	80012be <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800123a:	4b28      	ldr	r3, [pc, #160]	; (80012dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001242:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001246:	d131      	bne.n	80012ac <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001248:	4b24      	ldr	r3, [pc, #144]	; (80012dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800124a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800124e:	4a23      	ldr	r2, [pc, #140]	; (80012dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001250:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001254:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001258:	4b20      	ldr	r3, [pc, #128]	; (80012dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001260:	4a1e      	ldr	r2, [pc, #120]	; (80012dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001262:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001266:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001268:	4b1d      	ldr	r3, [pc, #116]	; (80012e0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	2232      	movs	r2, #50	; 0x32
 800126e:	fb02 f303 	mul.w	r3, r2, r3
 8001272:	4a1c      	ldr	r2, [pc, #112]	; (80012e4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001274:	fba2 2303 	umull	r2, r3, r2, r3
 8001278:	0c9b      	lsrs	r3, r3, #18
 800127a:	3301      	adds	r3, #1
 800127c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800127e:	e002      	b.n	8001286 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	3b01      	subs	r3, #1
 8001284:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001286:	4b15      	ldr	r3, [pc, #84]	; (80012dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001288:	695b      	ldr	r3, [r3, #20]
 800128a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800128e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001292:	d102      	bne.n	800129a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d1f2      	bne.n	8001280 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800129a:	4b10      	ldr	r3, [pc, #64]	; (80012dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800129c:	695b      	ldr	r3, [r3, #20]
 800129e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012a6:	d112      	bne.n	80012ce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80012a8:	2303      	movs	r3, #3
 80012aa:	e011      	b.n	80012d0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80012ac:	4b0b      	ldr	r3, [pc, #44]	; (80012dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80012b2:	4a0a      	ldr	r2, [pc, #40]	; (80012dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012b8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80012bc:	e007      	b.n	80012ce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80012be:	4b07      	ldr	r3, [pc, #28]	; (80012dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80012c6:	4a05      	ldr	r2, [pc, #20]	; (80012dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012cc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80012ce:	2300      	movs	r3, #0
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3714      	adds	r7, #20
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr
 80012dc:	40007000 	.word	0x40007000
 80012e0:	20000000 	.word	0x20000000
 80012e4:	431bde83 	.word	0x431bde83

080012e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b088      	sub	sp, #32
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d101      	bne.n	80012fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	e306      	b.n	8001908 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	2b00      	cmp	r3, #0
 8001304:	d075      	beq.n	80013f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001306:	4b97      	ldr	r3, [pc, #604]	; (8001564 <HAL_RCC_OscConfig+0x27c>)
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	f003 030c 	and.w	r3, r3, #12
 800130e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001310:	4b94      	ldr	r3, [pc, #592]	; (8001564 <HAL_RCC_OscConfig+0x27c>)
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	f003 0303 	and.w	r3, r3, #3
 8001318:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800131a:	69bb      	ldr	r3, [r7, #24]
 800131c:	2b0c      	cmp	r3, #12
 800131e:	d102      	bne.n	8001326 <HAL_RCC_OscConfig+0x3e>
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	2b03      	cmp	r3, #3
 8001324:	d002      	beq.n	800132c <HAL_RCC_OscConfig+0x44>
 8001326:	69bb      	ldr	r3, [r7, #24]
 8001328:	2b08      	cmp	r3, #8
 800132a:	d10b      	bne.n	8001344 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800132c:	4b8d      	ldr	r3, [pc, #564]	; (8001564 <HAL_RCC_OscConfig+0x27c>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001334:	2b00      	cmp	r3, #0
 8001336:	d05b      	beq.n	80013f0 <HAL_RCC_OscConfig+0x108>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d157      	bne.n	80013f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001340:	2301      	movs	r3, #1
 8001342:	e2e1      	b.n	8001908 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800134c:	d106      	bne.n	800135c <HAL_RCC_OscConfig+0x74>
 800134e:	4b85      	ldr	r3, [pc, #532]	; (8001564 <HAL_RCC_OscConfig+0x27c>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a84      	ldr	r2, [pc, #528]	; (8001564 <HAL_RCC_OscConfig+0x27c>)
 8001354:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001358:	6013      	str	r3, [r2, #0]
 800135a:	e01d      	b.n	8001398 <HAL_RCC_OscConfig+0xb0>
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001364:	d10c      	bne.n	8001380 <HAL_RCC_OscConfig+0x98>
 8001366:	4b7f      	ldr	r3, [pc, #508]	; (8001564 <HAL_RCC_OscConfig+0x27c>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a7e      	ldr	r2, [pc, #504]	; (8001564 <HAL_RCC_OscConfig+0x27c>)
 800136c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001370:	6013      	str	r3, [r2, #0]
 8001372:	4b7c      	ldr	r3, [pc, #496]	; (8001564 <HAL_RCC_OscConfig+0x27c>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a7b      	ldr	r2, [pc, #492]	; (8001564 <HAL_RCC_OscConfig+0x27c>)
 8001378:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800137c:	6013      	str	r3, [r2, #0]
 800137e:	e00b      	b.n	8001398 <HAL_RCC_OscConfig+0xb0>
 8001380:	4b78      	ldr	r3, [pc, #480]	; (8001564 <HAL_RCC_OscConfig+0x27c>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a77      	ldr	r2, [pc, #476]	; (8001564 <HAL_RCC_OscConfig+0x27c>)
 8001386:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800138a:	6013      	str	r3, [r2, #0]
 800138c:	4b75      	ldr	r3, [pc, #468]	; (8001564 <HAL_RCC_OscConfig+0x27c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a74      	ldr	r2, [pc, #464]	; (8001564 <HAL_RCC_OscConfig+0x27c>)
 8001392:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001396:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d013      	beq.n	80013c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013a0:	f7ff fc52 	bl	8000c48 <HAL_GetTick>
 80013a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013a6:	e008      	b.n	80013ba <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013a8:	f7ff fc4e 	bl	8000c48 <HAL_GetTick>
 80013ac:	4602      	mov	r2, r0
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	2b64      	cmp	r3, #100	; 0x64
 80013b4:	d901      	bls.n	80013ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80013b6:	2303      	movs	r3, #3
 80013b8:	e2a6      	b.n	8001908 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013ba:	4b6a      	ldr	r3, [pc, #424]	; (8001564 <HAL_RCC_OscConfig+0x27c>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d0f0      	beq.n	80013a8 <HAL_RCC_OscConfig+0xc0>
 80013c6:	e014      	b.n	80013f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013c8:	f7ff fc3e 	bl	8000c48 <HAL_GetTick>
 80013cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013ce:	e008      	b.n	80013e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013d0:	f7ff fc3a 	bl	8000c48 <HAL_GetTick>
 80013d4:	4602      	mov	r2, r0
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	2b64      	cmp	r3, #100	; 0x64
 80013dc:	d901      	bls.n	80013e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013de:	2303      	movs	r3, #3
 80013e0:	e292      	b.n	8001908 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013e2:	4b60      	ldr	r3, [pc, #384]	; (8001564 <HAL_RCC_OscConfig+0x27c>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d1f0      	bne.n	80013d0 <HAL_RCC_OscConfig+0xe8>
 80013ee:	e000      	b.n	80013f2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f003 0302 	and.w	r3, r3, #2
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d075      	beq.n	80014ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013fe:	4b59      	ldr	r3, [pc, #356]	; (8001564 <HAL_RCC_OscConfig+0x27c>)
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	f003 030c 	and.w	r3, r3, #12
 8001406:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001408:	4b56      	ldr	r3, [pc, #344]	; (8001564 <HAL_RCC_OscConfig+0x27c>)
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	f003 0303 	and.w	r3, r3, #3
 8001410:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001412:	69bb      	ldr	r3, [r7, #24]
 8001414:	2b0c      	cmp	r3, #12
 8001416:	d102      	bne.n	800141e <HAL_RCC_OscConfig+0x136>
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	2b02      	cmp	r3, #2
 800141c:	d002      	beq.n	8001424 <HAL_RCC_OscConfig+0x13c>
 800141e:	69bb      	ldr	r3, [r7, #24]
 8001420:	2b04      	cmp	r3, #4
 8001422:	d11f      	bne.n	8001464 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001424:	4b4f      	ldr	r3, [pc, #316]	; (8001564 <HAL_RCC_OscConfig+0x27c>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800142c:	2b00      	cmp	r3, #0
 800142e:	d005      	beq.n	800143c <HAL_RCC_OscConfig+0x154>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d101      	bne.n	800143c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001438:	2301      	movs	r3, #1
 800143a:	e265      	b.n	8001908 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800143c:	4b49      	ldr	r3, [pc, #292]	; (8001564 <HAL_RCC_OscConfig+0x27c>)
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	691b      	ldr	r3, [r3, #16]
 8001448:	061b      	lsls	r3, r3, #24
 800144a:	4946      	ldr	r1, [pc, #280]	; (8001564 <HAL_RCC_OscConfig+0x27c>)
 800144c:	4313      	orrs	r3, r2
 800144e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001450:	4b45      	ldr	r3, [pc, #276]	; (8001568 <HAL_RCC_OscConfig+0x280>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff fbab 	bl	8000bb0 <HAL_InitTick>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d043      	beq.n	80014e8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001460:	2301      	movs	r3, #1
 8001462:	e251      	b.n	8001908 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d023      	beq.n	80014b4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800146c:	4b3d      	ldr	r3, [pc, #244]	; (8001564 <HAL_RCC_OscConfig+0x27c>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a3c      	ldr	r2, [pc, #240]	; (8001564 <HAL_RCC_OscConfig+0x27c>)
 8001472:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001476:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001478:	f7ff fbe6 	bl	8000c48 <HAL_GetTick>
 800147c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800147e:	e008      	b.n	8001492 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001480:	f7ff fbe2 	bl	8000c48 <HAL_GetTick>
 8001484:	4602      	mov	r2, r0
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	2b02      	cmp	r3, #2
 800148c:	d901      	bls.n	8001492 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800148e:	2303      	movs	r3, #3
 8001490:	e23a      	b.n	8001908 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001492:	4b34      	ldr	r3, [pc, #208]	; (8001564 <HAL_RCC_OscConfig+0x27c>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800149a:	2b00      	cmp	r3, #0
 800149c:	d0f0      	beq.n	8001480 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800149e:	4b31      	ldr	r3, [pc, #196]	; (8001564 <HAL_RCC_OscConfig+0x27c>)
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	691b      	ldr	r3, [r3, #16]
 80014aa:	061b      	lsls	r3, r3, #24
 80014ac:	492d      	ldr	r1, [pc, #180]	; (8001564 <HAL_RCC_OscConfig+0x27c>)
 80014ae:	4313      	orrs	r3, r2
 80014b0:	604b      	str	r3, [r1, #4]
 80014b2:	e01a      	b.n	80014ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014b4:	4b2b      	ldr	r3, [pc, #172]	; (8001564 <HAL_RCC_OscConfig+0x27c>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a2a      	ldr	r2, [pc, #168]	; (8001564 <HAL_RCC_OscConfig+0x27c>)
 80014ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80014be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014c0:	f7ff fbc2 	bl	8000c48 <HAL_GetTick>
 80014c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014c6:	e008      	b.n	80014da <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014c8:	f7ff fbbe 	bl	8000c48 <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	d901      	bls.n	80014da <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80014d6:	2303      	movs	r3, #3
 80014d8:	e216      	b.n	8001908 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014da:	4b22      	ldr	r3, [pc, #136]	; (8001564 <HAL_RCC_OscConfig+0x27c>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d1f0      	bne.n	80014c8 <HAL_RCC_OscConfig+0x1e0>
 80014e6:	e000      	b.n	80014ea <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014e8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 0308 	and.w	r3, r3, #8
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d041      	beq.n	800157a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	695b      	ldr	r3, [r3, #20]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d01c      	beq.n	8001538 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014fe:	4b19      	ldr	r3, [pc, #100]	; (8001564 <HAL_RCC_OscConfig+0x27c>)
 8001500:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001504:	4a17      	ldr	r2, [pc, #92]	; (8001564 <HAL_RCC_OscConfig+0x27c>)
 8001506:	f043 0301 	orr.w	r3, r3, #1
 800150a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800150e:	f7ff fb9b 	bl	8000c48 <HAL_GetTick>
 8001512:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001514:	e008      	b.n	8001528 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001516:	f7ff fb97 	bl	8000c48 <HAL_GetTick>
 800151a:	4602      	mov	r2, r0
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	2b02      	cmp	r3, #2
 8001522:	d901      	bls.n	8001528 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001524:	2303      	movs	r3, #3
 8001526:	e1ef      	b.n	8001908 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001528:	4b0e      	ldr	r3, [pc, #56]	; (8001564 <HAL_RCC_OscConfig+0x27c>)
 800152a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800152e:	f003 0302 	and.w	r3, r3, #2
 8001532:	2b00      	cmp	r3, #0
 8001534:	d0ef      	beq.n	8001516 <HAL_RCC_OscConfig+0x22e>
 8001536:	e020      	b.n	800157a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001538:	4b0a      	ldr	r3, [pc, #40]	; (8001564 <HAL_RCC_OscConfig+0x27c>)
 800153a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800153e:	4a09      	ldr	r2, [pc, #36]	; (8001564 <HAL_RCC_OscConfig+0x27c>)
 8001540:	f023 0301 	bic.w	r3, r3, #1
 8001544:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001548:	f7ff fb7e 	bl	8000c48 <HAL_GetTick>
 800154c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800154e:	e00d      	b.n	800156c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001550:	f7ff fb7a 	bl	8000c48 <HAL_GetTick>
 8001554:	4602      	mov	r2, r0
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	2b02      	cmp	r3, #2
 800155c:	d906      	bls.n	800156c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800155e:	2303      	movs	r3, #3
 8001560:	e1d2      	b.n	8001908 <HAL_RCC_OscConfig+0x620>
 8001562:	bf00      	nop
 8001564:	40021000 	.word	0x40021000
 8001568:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800156c:	4b8c      	ldr	r3, [pc, #560]	; (80017a0 <HAL_RCC_OscConfig+0x4b8>)
 800156e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	2b00      	cmp	r3, #0
 8001578:	d1ea      	bne.n	8001550 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 0304 	and.w	r3, r3, #4
 8001582:	2b00      	cmp	r3, #0
 8001584:	f000 80a6 	beq.w	80016d4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001588:	2300      	movs	r3, #0
 800158a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800158c:	4b84      	ldr	r3, [pc, #528]	; (80017a0 <HAL_RCC_OscConfig+0x4b8>)
 800158e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001590:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001594:	2b00      	cmp	r3, #0
 8001596:	d101      	bne.n	800159c <HAL_RCC_OscConfig+0x2b4>
 8001598:	2301      	movs	r3, #1
 800159a:	e000      	b.n	800159e <HAL_RCC_OscConfig+0x2b6>
 800159c:	2300      	movs	r3, #0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d00d      	beq.n	80015be <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015a2:	4b7f      	ldr	r3, [pc, #508]	; (80017a0 <HAL_RCC_OscConfig+0x4b8>)
 80015a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015a6:	4a7e      	ldr	r2, [pc, #504]	; (80017a0 <HAL_RCC_OscConfig+0x4b8>)
 80015a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015ac:	6593      	str	r3, [r2, #88]	; 0x58
 80015ae:	4b7c      	ldr	r3, [pc, #496]	; (80017a0 <HAL_RCC_OscConfig+0x4b8>)
 80015b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015b6:	60fb      	str	r3, [r7, #12]
 80015b8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80015ba:	2301      	movs	r3, #1
 80015bc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015be:	4b79      	ldr	r3, [pc, #484]	; (80017a4 <HAL_RCC_OscConfig+0x4bc>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d118      	bne.n	80015fc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80015ca:	4b76      	ldr	r3, [pc, #472]	; (80017a4 <HAL_RCC_OscConfig+0x4bc>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a75      	ldr	r2, [pc, #468]	; (80017a4 <HAL_RCC_OscConfig+0x4bc>)
 80015d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015d6:	f7ff fb37 	bl	8000c48 <HAL_GetTick>
 80015da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015dc:	e008      	b.n	80015f0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015de:	f7ff fb33 	bl	8000c48 <HAL_GetTick>
 80015e2:	4602      	mov	r2, r0
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	d901      	bls.n	80015f0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80015ec:	2303      	movs	r3, #3
 80015ee:	e18b      	b.n	8001908 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015f0:	4b6c      	ldr	r3, [pc, #432]	; (80017a4 <HAL_RCC_OscConfig+0x4bc>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d0f0      	beq.n	80015de <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	2b01      	cmp	r3, #1
 8001602:	d108      	bne.n	8001616 <HAL_RCC_OscConfig+0x32e>
 8001604:	4b66      	ldr	r3, [pc, #408]	; (80017a0 <HAL_RCC_OscConfig+0x4b8>)
 8001606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800160a:	4a65      	ldr	r2, [pc, #404]	; (80017a0 <HAL_RCC_OscConfig+0x4b8>)
 800160c:	f043 0301 	orr.w	r3, r3, #1
 8001610:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001614:	e024      	b.n	8001660 <HAL_RCC_OscConfig+0x378>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	2b05      	cmp	r3, #5
 800161c:	d110      	bne.n	8001640 <HAL_RCC_OscConfig+0x358>
 800161e:	4b60      	ldr	r3, [pc, #384]	; (80017a0 <HAL_RCC_OscConfig+0x4b8>)
 8001620:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001624:	4a5e      	ldr	r2, [pc, #376]	; (80017a0 <HAL_RCC_OscConfig+0x4b8>)
 8001626:	f043 0304 	orr.w	r3, r3, #4
 800162a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800162e:	4b5c      	ldr	r3, [pc, #368]	; (80017a0 <HAL_RCC_OscConfig+0x4b8>)
 8001630:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001634:	4a5a      	ldr	r2, [pc, #360]	; (80017a0 <HAL_RCC_OscConfig+0x4b8>)
 8001636:	f043 0301 	orr.w	r3, r3, #1
 800163a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800163e:	e00f      	b.n	8001660 <HAL_RCC_OscConfig+0x378>
 8001640:	4b57      	ldr	r3, [pc, #348]	; (80017a0 <HAL_RCC_OscConfig+0x4b8>)
 8001642:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001646:	4a56      	ldr	r2, [pc, #344]	; (80017a0 <HAL_RCC_OscConfig+0x4b8>)
 8001648:	f023 0301 	bic.w	r3, r3, #1
 800164c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001650:	4b53      	ldr	r3, [pc, #332]	; (80017a0 <HAL_RCC_OscConfig+0x4b8>)
 8001652:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001656:	4a52      	ldr	r2, [pc, #328]	; (80017a0 <HAL_RCC_OscConfig+0x4b8>)
 8001658:	f023 0304 	bic.w	r3, r3, #4
 800165c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d016      	beq.n	8001696 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001668:	f7ff faee 	bl	8000c48 <HAL_GetTick>
 800166c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800166e:	e00a      	b.n	8001686 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001670:	f7ff faea 	bl	8000c48 <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	f241 3288 	movw	r2, #5000	; 0x1388
 800167e:	4293      	cmp	r3, r2
 8001680:	d901      	bls.n	8001686 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e140      	b.n	8001908 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001686:	4b46      	ldr	r3, [pc, #280]	; (80017a0 <HAL_RCC_OscConfig+0x4b8>)
 8001688:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800168c:	f003 0302 	and.w	r3, r3, #2
 8001690:	2b00      	cmp	r3, #0
 8001692:	d0ed      	beq.n	8001670 <HAL_RCC_OscConfig+0x388>
 8001694:	e015      	b.n	80016c2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001696:	f7ff fad7 	bl	8000c48 <HAL_GetTick>
 800169a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800169c:	e00a      	b.n	80016b4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800169e:	f7ff fad3 	bl	8000c48 <HAL_GetTick>
 80016a2:	4602      	mov	r2, r0
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d901      	bls.n	80016b4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80016b0:	2303      	movs	r3, #3
 80016b2:	e129      	b.n	8001908 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016b4:	4b3a      	ldr	r3, [pc, #232]	; (80017a0 <HAL_RCC_OscConfig+0x4b8>)
 80016b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016ba:	f003 0302 	and.w	r3, r3, #2
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d1ed      	bne.n	800169e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80016c2:	7ffb      	ldrb	r3, [r7, #31]
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d105      	bne.n	80016d4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016c8:	4b35      	ldr	r3, [pc, #212]	; (80017a0 <HAL_RCC_OscConfig+0x4b8>)
 80016ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016cc:	4a34      	ldr	r2, [pc, #208]	; (80017a0 <HAL_RCC_OscConfig+0x4b8>)
 80016ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016d2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f003 0320 	and.w	r3, r3, #32
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d03c      	beq.n	800175a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	699b      	ldr	r3, [r3, #24]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d01c      	beq.n	8001722 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80016e8:	4b2d      	ldr	r3, [pc, #180]	; (80017a0 <HAL_RCC_OscConfig+0x4b8>)
 80016ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80016ee:	4a2c      	ldr	r2, [pc, #176]	; (80017a0 <HAL_RCC_OscConfig+0x4b8>)
 80016f0:	f043 0301 	orr.w	r3, r3, #1
 80016f4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016f8:	f7ff faa6 	bl	8000c48 <HAL_GetTick>
 80016fc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80016fe:	e008      	b.n	8001712 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001700:	f7ff faa2 	bl	8000c48 <HAL_GetTick>
 8001704:	4602      	mov	r2, r0
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	2b02      	cmp	r3, #2
 800170c:	d901      	bls.n	8001712 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800170e:	2303      	movs	r3, #3
 8001710:	e0fa      	b.n	8001908 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001712:	4b23      	ldr	r3, [pc, #140]	; (80017a0 <HAL_RCC_OscConfig+0x4b8>)
 8001714:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001718:	f003 0302 	and.w	r3, r3, #2
 800171c:	2b00      	cmp	r3, #0
 800171e:	d0ef      	beq.n	8001700 <HAL_RCC_OscConfig+0x418>
 8001720:	e01b      	b.n	800175a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001722:	4b1f      	ldr	r3, [pc, #124]	; (80017a0 <HAL_RCC_OscConfig+0x4b8>)
 8001724:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001728:	4a1d      	ldr	r2, [pc, #116]	; (80017a0 <HAL_RCC_OscConfig+0x4b8>)
 800172a:	f023 0301 	bic.w	r3, r3, #1
 800172e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001732:	f7ff fa89 	bl	8000c48 <HAL_GetTick>
 8001736:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001738:	e008      	b.n	800174c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800173a:	f7ff fa85 	bl	8000c48 <HAL_GetTick>
 800173e:	4602      	mov	r2, r0
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	2b02      	cmp	r3, #2
 8001746:	d901      	bls.n	800174c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001748:	2303      	movs	r3, #3
 800174a:	e0dd      	b.n	8001908 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800174c:	4b14      	ldr	r3, [pc, #80]	; (80017a0 <HAL_RCC_OscConfig+0x4b8>)
 800174e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001752:	f003 0302 	and.w	r3, r3, #2
 8001756:	2b00      	cmp	r3, #0
 8001758:	d1ef      	bne.n	800173a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	69db      	ldr	r3, [r3, #28]
 800175e:	2b00      	cmp	r3, #0
 8001760:	f000 80d1 	beq.w	8001906 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001764:	4b0e      	ldr	r3, [pc, #56]	; (80017a0 <HAL_RCC_OscConfig+0x4b8>)
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	f003 030c 	and.w	r3, r3, #12
 800176c:	2b0c      	cmp	r3, #12
 800176e:	f000 808b 	beq.w	8001888 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	69db      	ldr	r3, [r3, #28]
 8001776:	2b02      	cmp	r3, #2
 8001778:	d15e      	bne.n	8001838 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800177a:	4b09      	ldr	r3, [pc, #36]	; (80017a0 <HAL_RCC_OscConfig+0x4b8>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a08      	ldr	r2, [pc, #32]	; (80017a0 <HAL_RCC_OscConfig+0x4b8>)
 8001780:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001784:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001786:	f7ff fa5f 	bl	8000c48 <HAL_GetTick>
 800178a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800178c:	e00c      	b.n	80017a8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800178e:	f7ff fa5b 	bl	8000c48 <HAL_GetTick>
 8001792:	4602      	mov	r2, r0
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	2b02      	cmp	r3, #2
 800179a:	d905      	bls.n	80017a8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800179c:	2303      	movs	r3, #3
 800179e:	e0b3      	b.n	8001908 <HAL_RCC_OscConfig+0x620>
 80017a0:	40021000 	.word	0x40021000
 80017a4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017a8:	4b59      	ldr	r3, [pc, #356]	; (8001910 <HAL_RCC_OscConfig+0x628>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d1ec      	bne.n	800178e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017b4:	4b56      	ldr	r3, [pc, #344]	; (8001910 <HAL_RCC_OscConfig+0x628>)
 80017b6:	68da      	ldr	r2, [r3, #12]
 80017b8:	4b56      	ldr	r3, [pc, #344]	; (8001914 <HAL_RCC_OscConfig+0x62c>)
 80017ba:	4013      	ands	r3, r2
 80017bc:	687a      	ldr	r2, [r7, #4]
 80017be:	6a11      	ldr	r1, [r2, #32]
 80017c0:	687a      	ldr	r2, [r7, #4]
 80017c2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80017c4:	3a01      	subs	r2, #1
 80017c6:	0112      	lsls	r2, r2, #4
 80017c8:	4311      	orrs	r1, r2
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80017ce:	0212      	lsls	r2, r2, #8
 80017d0:	4311      	orrs	r1, r2
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80017d6:	0852      	lsrs	r2, r2, #1
 80017d8:	3a01      	subs	r2, #1
 80017da:	0552      	lsls	r2, r2, #21
 80017dc:	4311      	orrs	r1, r2
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80017e2:	0852      	lsrs	r2, r2, #1
 80017e4:	3a01      	subs	r2, #1
 80017e6:	0652      	lsls	r2, r2, #25
 80017e8:	4311      	orrs	r1, r2
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80017ee:	06d2      	lsls	r2, r2, #27
 80017f0:	430a      	orrs	r2, r1
 80017f2:	4947      	ldr	r1, [pc, #284]	; (8001910 <HAL_RCC_OscConfig+0x628>)
 80017f4:	4313      	orrs	r3, r2
 80017f6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017f8:	4b45      	ldr	r3, [pc, #276]	; (8001910 <HAL_RCC_OscConfig+0x628>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a44      	ldr	r2, [pc, #272]	; (8001910 <HAL_RCC_OscConfig+0x628>)
 80017fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001802:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001804:	4b42      	ldr	r3, [pc, #264]	; (8001910 <HAL_RCC_OscConfig+0x628>)
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	4a41      	ldr	r2, [pc, #260]	; (8001910 <HAL_RCC_OscConfig+0x628>)
 800180a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800180e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001810:	f7ff fa1a 	bl	8000c48 <HAL_GetTick>
 8001814:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001816:	e008      	b.n	800182a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001818:	f7ff fa16 	bl	8000c48 <HAL_GetTick>
 800181c:	4602      	mov	r2, r0
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	2b02      	cmp	r3, #2
 8001824:	d901      	bls.n	800182a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001826:	2303      	movs	r3, #3
 8001828:	e06e      	b.n	8001908 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800182a:	4b39      	ldr	r3, [pc, #228]	; (8001910 <HAL_RCC_OscConfig+0x628>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d0f0      	beq.n	8001818 <HAL_RCC_OscConfig+0x530>
 8001836:	e066      	b.n	8001906 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001838:	4b35      	ldr	r3, [pc, #212]	; (8001910 <HAL_RCC_OscConfig+0x628>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a34      	ldr	r2, [pc, #208]	; (8001910 <HAL_RCC_OscConfig+0x628>)
 800183e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001842:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001844:	4b32      	ldr	r3, [pc, #200]	; (8001910 <HAL_RCC_OscConfig+0x628>)
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	4a31      	ldr	r2, [pc, #196]	; (8001910 <HAL_RCC_OscConfig+0x628>)
 800184a:	f023 0303 	bic.w	r3, r3, #3
 800184e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001850:	4b2f      	ldr	r3, [pc, #188]	; (8001910 <HAL_RCC_OscConfig+0x628>)
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	4a2e      	ldr	r2, [pc, #184]	; (8001910 <HAL_RCC_OscConfig+0x628>)
 8001856:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800185a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800185e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001860:	f7ff f9f2 	bl	8000c48 <HAL_GetTick>
 8001864:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001866:	e008      	b.n	800187a <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001868:	f7ff f9ee 	bl	8000c48 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	2b02      	cmp	r3, #2
 8001874:	d901      	bls.n	800187a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e046      	b.n	8001908 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800187a:	4b25      	ldr	r3, [pc, #148]	; (8001910 <HAL_RCC_OscConfig+0x628>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d1f0      	bne.n	8001868 <HAL_RCC_OscConfig+0x580>
 8001886:	e03e      	b.n	8001906 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	69db      	ldr	r3, [r3, #28]
 800188c:	2b01      	cmp	r3, #1
 800188e:	d101      	bne.n	8001894 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	e039      	b.n	8001908 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001894:	4b1e      	ldr	r3, [pc, #120]	; (8001910 <HAL_RCC_OscConfig+0x628>)
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	f003 0203 	and.w	r2, r3, #3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6a1b      	ldr	r3, [r3, #32]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d12c      	bne.n	8001902 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b2:	3b01      	subs	r3, #1
 80018b4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d123      	bne.n	8001902 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d11b      	bne.n	8001902 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d113      	bne.n	8001902 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e4:	085b      	lsrs	r3, r3, #1
 80018e6:	3b01      	subs	r3, #1
 80018e8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d109      	bne.n	8001902 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018f8:	085b      	lsrs	r3, r3, #1
 80018fa:	3b01      	subs	r3, #1
 80018fc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018fe:	429a      	cmp	r2, r3
 8001900:	d001      	beq.n	8001906 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e000      	b.n	8001908 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8001906:	2300      	movs	r3, #0
}
 8001908:	4618      	mov	r0, r3
 800190a:	3720      	adds	r7, #32
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	40021000 	.word	0x40021000
 8001914:	019f800c 	.word	0x019f800c

08001918 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b086      	sub	sp, #24
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001922:	2300      	movs	r3, #0
 8001924:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d101      	bne.n	8001930 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e11e      	b.n	8001b6e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001930:	4b91      	ldr	r3, [pc, #580]	; (8001b78 <HAL_RCC_ClockConfig+0x260>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 030f 	and.w	r3, r3, #15
 8001938:	683a      	ldr	r2, [r7, #0]
 800193a:	429a      	cmp	r2, r3
 800193c:	d910      	bls.n	8001960 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800193e:	4b8e      	ldr	r3, [pc, #568]	; (8001b78 <HAL_RCC_ClockConfig+0x260>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f023 020f 	bic.w	r2, r3, #15
 8001946:	498c      	ldr	r1, [pc, #560]	; (8001b78 <HAL_RCC_ClockConfig+0x260>)
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	4313      	orrs	r3, r2
 800194c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800194e:	4b8a      	ldr	r3, [pc, #552]	; (8001b78 <HAL_RCC_ClockConfig+0x260>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 030f 	and.w	r3, r3, #15
 8001956:	683a      	ldr	r2, [r7, #0]
 8001958:	429a      	cmp	r2, r3
 800195a:	d001      	beq.n	8001960 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e106      	b.n	8001b6e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 0301 	and.w	r3, r3, #1
 8001968:	2b00      	cmp	r3, #0
 800196a:	d073      	beq.n	8001a54 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	2b03      	cmp	r3, #3
 8001972:	d129      	bne.n	80019c8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001974:	4b81      	ldr	r3, [pc, #516]	; (8001b7c <HAL_RCC_ClockConfig+0x264>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800197c:	2b00      	cmp	r3, #0
 800197e:	d101      	bne.n	8001984 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	e0f4      	b.n	8001b6e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001984:	f000 f99e 	bl	8001cc4 <RCC_GetSysClockFreqFromPLLSource>
 8001988:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	4a7c      	ldr	r2, [pc, #496]	; (8001b80 <HAL_RCC_ClockConfig+0x268>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d93f      	bls.n	8001a12 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001992:	4b7a      	ldr	r3, [pc, #488]	; (8001b7c <HAL_RCC_ClockConfig+0x264>)
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d009      	beq.n	80019b2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d033      	beq.n	8001a12 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d12f      	bne.n	8001a12 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80019b2:	4b72      	ldr	r3, [pc, #456]	; (8001b7c <HAL_RCC_ClockConfig+0x264>)
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80019ba:	4a70      	ldr	r2, [pc, #448]	; (8001b7c <HAL_RCC_ClockConfig+0x264>)
 80019bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019c0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80019c2:	2380      	movs	r3, #128	; 0x80
 80019c4:	617b      	str	r3, [r7, #20]
 80019c6:	e024      	b.n	8001a12 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d107      	bne.n	80019e0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019d0:	4b6a      	ldr	r3, [pc, #424]	; (8001b7c <HAL_RCC_ClockConfig+0x264>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d109      	bne.n	80019f0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e0c6      	b.n	8001b6e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019e0:	4b66      	ldr	r3, [pc, #408]	; (8001b7c <HAL_RCC_ClockConfig+0x264>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d101      	bne.n	80019f0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e0be      	b.n	8001b6e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80019f0:	f000 f8ce 	bl	8001b90 <HAL_RCC_GetSysClockFreq>
 80019f4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	4a61      	ldr	r2, [pc, #388]	; (8001b80 <HAL_RCC_ClockConfig+0x268>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d909      	bls.n	8001a12 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80019fe:	4b5f      	ldr	r3, [pc, #380]	; (8001b7c <HAL_RCC_ClockConfig+0x264>)
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a06:	4a5d      	ldr	r2, [pc, #372]	; (8001b7c <HAL_RCC_ClockConfig+0x264>)
 8001a08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a0c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001a0e:	2380      	movs	r3, #128	; 0x80
 8001a10:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a12:	4b5a      	ldr	r3, [pc, #360]	; (8001b7c <HAL_RCC_ClockConfig+0x264>)
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	f023 0203 	bic.w	r2, r3, #3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	4957      	ldr	r1, [pc, #348]	; (8001b7c <HAL_RCC_ClockConfig+0x264>)
 8001a20:	4313      	orrs	r3, r2
 8001a22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a24:	f7ff f910 	bl	8000c48 <HAL_GetTick>
 8001a28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a2a:	e00a      	b.n	8001a42 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a2c:	f7ff f90c 	bl	8000c48 <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d901      	bls.n	8001a42 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e095      	b.n	8001b6e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a42:	4b4e      	ldr	r3, [pc, #312]	; (8001b7c <HAL_RCC_ClockConfig+0x264>)
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	f003 020c 	and.w	r2, r3, #12
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d1eb      	bne.n	8001a2c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 0302 	and.w	r3, r3, #2
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d023      	beq.n	8001aa8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 0304 	and.w	r3, r3, #4
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d005      	beq.n	8001a78 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a6c:	4b43      	ldr	r3, [pc, #268]	; (8001b7c <HAL_RCC_ClockConfig+0x264>)
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	4a42      	ldr	r2, [pc, #264]	; (8001b7c <HAL_RCC_ClockConfig+0x264>)
 8001a72:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a76:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0308 	and.w	r3, r3, #8
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d007      	beq.n	8001a94 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001a84:	4b3d      	ldr	r3, [pc, #244]	; (8001b7c <HAL_RCC_ClockConfig+0x264>)
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001a8c:	4a3b      	ldr	r2, [pc, #236]	; (8001b7c <HAL_RCC_ClockConfig+0x264>)
 8001a8e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a92:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a94:	4b39      	ldr	r3, [pc, #228]	; (8001b7c <HAL_RCC_ClockConfig+0x264>)
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	4936      	ldr	r1, [pc, #216]	; (8001b7c <HAL_RCC_ClockConfig+0x264>)
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	608b      	str	r3, [r1, #8]
 8001aa6:	e008      	b.n	8001aba <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	2b80      	cmp	r3, #128	; 0x80
 8001aac:	d105      	bne.n	8001aba <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001aae:	4b33      	ldr	r3, [pc, #204]	; (8001b7c <HAL_RCC_ClockConfig+0x264>)
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	4a32      	ldr	r2, [pc, #200]	; (8001b7c <HAL_RCC_ClockConfig+0x264>)
 8001ab4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ab8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001aba:	4b2f      	ldr	r3, [pc, #188]	; (8001b78 <HAL_RCC_ClockConfig+0x260>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 030f 	and.w	r3, r3, #15
 8001ac2:	683a      	ldr	r2, [r7, #0]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d21d      	bcs.n	8001b04 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ac8:	4b2b      	ldr	r3, [pc, #172]	; (8001b78 <HAL_RCC_ClockConfig+0x260>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f023 020f 	bic.w	r2, r3, #15
 8001ad0:	4929      	ldr	r1, [pc, #164]	; (8001b78 <HAL_RCC_ClockConfig+0x260>)
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001ad8:	f7ff f8b6 	bl	8000c48 <HAL_GetTick>
 8001adc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ade:	e00a      	b.n	8001af6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ae0:	f7ff f8b2 	bl	8000c48 <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e03b      	b.n	8001b6e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001af6:	4b20      	ldr	r3, [pc, #128]	; (8001b78 <HAL_RCC_ClockConfig+0x260>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 030f 	and.w	r3, r3, #15
 8001afe:	683a      	ldr	r2, [r7, #0]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d1ed      	bne.n	8001ae0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0304 	and.w	r3, r3, #4
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d008      	beq.n	8001b22 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b10:	4b1a      	ldr	r3, [pc, #104]	; (8001b7c <HAL_RCC_ClockConfig+0x264>)
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	4917      	ldr	r1, [pc, #92]	; (8001b7c <HAL_RCC_ClockConfig+0x264>)
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0308 	and.w	r3, r3, #8
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d009      	beq.n	8001b42 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b2e:	4b13      	ldr	r3, [pc, #76]	; (8001b7c <HAL_RCC_ClockConfig+0x264>)
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	691b      	ldr	r3, [r3, #16]
 8001b3a:	00db      	lsls	r3, r3, #3
 8001b3c:	490f      	ldr	r1, [pc, #60]	; (8001b7c <HAL_RCC_ClockConfig+0x264>)
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b42:	f000 f825 	bl	8001b90 <HAL_RCC_GetSysClockFreq>
 8001b46:	4602      	mov	r2, r0
 8001b48:	4b0c      	ldr	r3, [pc, #48]	; (8001b7c <HAL_RCC_ClockConfig+0x264>)
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	091b      	lsrs	r3, r3, #4
 8001b4e:	f003 030f 	and.w	r3, r3, #15
 8001b52:	490c      	ldr	r1, [pc, #48]	; (8001b84 <HAL_RCC_ClockConfig+0x26c>)
 8001b54:	5ccb      	ldrb	r3, [r1, r3]
 8001b56:	f003 031f 	and.w	r3, r3, #31
 8001b5a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b5e:	4a0a      	ldr	r2, [pc, #40]	; (8001b88 <HAL_RCC_ClockConfig+0x270>)
 8001b60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001b62:	4b0a      	ldr	r3, [pc, #40]	; (8001b8c <HAL_RCC_ClockConfig+0x274>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7ff f822 	bl	8000bb0 <HAL_InitTick>
 8001b6c:	4603      	mov	r3, r0
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3718      	adds	r7, #24
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	40022000 	.word	0x40022000
 8001b7c:	40021000 	.word	0x40021000
 8001b80:	04c4b400 	.word	0x04c4b400
 8001b84:	08003f80 	.word	0x08003f80
 8001b88:	20000000 	.word	0x20000000
 8001b8c:	20000004 	.word	0x20000004

08001b90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b087      	sub	sp, #28
 8001b94:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001b96:	4b2c      	ldr	r3, [pc, #176]	; (8001c48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	f003 030c 	and.w	r3, r3, #12
 8001b9e:	2b04      	cmp	r3, #4
 8001ba0:	d102      	bne.n	8001ba8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ba2:	4b2a      	ldr	r3, [pc, #168]	; (8001c4c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ba4:	613b      	str	r3, [r7, #16]
 8001ba6:	e047      	b.n	8001c38 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001ba8:	4b27      	ldr	r3, [pc, #156]	; (8001c48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	f003 030c 	and.w	r3, r3, #12
 8001bb0:	2b08      	cmp	r3, #8
 8001bb2:	d102      	bne.n	8001bba <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001bb4:	4b26      	ldr	r3, [pc, #152]	; (8001c50 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001bb6:	613b      	str	r3, [r7, #16]
 8001bb8:	e03e      	b.n	8001c38 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001bba:	4b23      	ldr	r3, [pc, #140]	; (8001c48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	f003 030c 	and.w	r3, r3, #12
 8001bc2:	2b0c      	cmp	r3, #12
 8001bc4:	d136      	bne.n	8001c34 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001bc6:	4b20      	ldr	r3, [pc, #128]	; (8001c48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	f003 0303 	and.w	r3, r3, #3
 8001bce:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001bd0:	4b1d      	ldr	r3, [pc, #116]	; (8001c48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	091b      	lsrs	r3, r3, #4
 8001bd6:	f003 030f 	and.w	r3, r3, #15
 8001bda:	3301      	adds	r3, #1
 8001bdc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	2b03      	cmp	r3, #3
 8001be2:	d10c      	bne.n	8001bfe <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001be4:	4a1a      	ldr	r2, [pc, #104]	; (8001c50 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bec:	4a16      	ldr	r2, [pc, #88]	; (8001c48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bee:	68d2      	ldr	r2, [r2, #12]
 8001bf0:	0a12      	lsrs	r2, r2, #8
 8001bf2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001bf6:	fb02 f303 	mul.w	r3, r2, r3
 8001bfa:	617b      	str	r3, [r7, #20]
      break;
 8001bfc:	e00c      	b.n	8001c18 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001bfe:	4a13      	ldr	r2, [pc, #76]	; (8001c4c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c06:	4a10      	ldr	r2, [pc, #64]	; (8001c48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c08:	68d2      	ldr	r2, [r2, #12]
 8001c0a:	0a12      	lsrs	r2, r2, #8
 8001c0c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001c10:	fb02 f303 	mul.w	r3, r2, r3
 8001c14:	617b      	str	r3, [r7, #20]
      break;
 8001c16:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c18:	4b0b      	ldr	r3, [pc, #44]	; (8001c48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	0e5b      	lsrs	r3, r3, #25
 8001c1e:	f003 0303 	and.w	r3, r3, #3
 8001c22:	3301      	adds	r3, #1
 8001c24:	005b      	lsls	r3, r3, #1
 8001c26:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001c28:	697a      	ldr	r2, [r7, #20]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c30:	613b      	str	r3, [r7, #16]
 8001c32:	e001      	b.n	8001c38 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001c34:	2300      	movs	r3, #0
 8001c36:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001c38:	693b      	ldr	r3, [r7, #16]
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	371c      	adds	r7, #28
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	40021000 	.word	0x40021000
 8001c4c:	00f42400 	.word	0x00f42400
 8001c50:	007a1200 	.word	0x007a1200

08001c54 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c58:	4b03      	ldr	r3, [pc, #12]	; (8001c68 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	20000000 	.word	0x20000000

08001c6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001c70:	f7ff fff0 	bl	8001c54 <HAL_RCC_GetHCLKFreq>
 8001c74:	4602      	mov	r2, r0
 8001c76:	4b06      	ldr	r3, [pc, #24]	; (8001c90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	0a1b      	lsrs	r3, r3, #8
 8001c7c:	f003 0307 	and.w	r3, r3, #7
 8001c80:	4904      	ldr	r1, [pc, #16]	; (8001c94 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c82:	5ccb      	ldrb	r3, [r1, r3]
 8001c84:	f003 031f 	and.w	r3, r3, #31
 8001c88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	40021000 	.word	0x40021000
 8001c94:	08003f90 	.word	0x08003f90

08001c98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001c9c:	f7ff ffda 	bl	8001c54 <HAL_RCC_GetHCLKFreq>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	4b06      	ldr	r3, [pc, #24]	; (8001cbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	0adb      	lsrs	r3, r3, #11
 8001ca8:	f003 0307 	and.w	r3, r3, #7
 8001cac:	4904      	ldr	r1, [pc, #16]	; (8001cc0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001cae:	5ccb      	ldrb	r3, [r1, r3]
 8001cb0:	f003 031f 	and.w	r3, r3, #31
 8001cb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	40021000 	.word	0x40021000
 8001cc0:	08003f90 	.word	0x08003f90

08001cc4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b087      	sub	sp, #28
 8001cc8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001cca:	4b1e      	ldr	r3, [pc, #120]	; (8001d44 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001ccc:	68db      	ldr	r3, [r3, #12]
 8001cce:	f003 0303 	and.w	r3, r3, #3
 8001cd2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001cd4:	4b1b      	ldr	r3, [pc, #108]	; (8001d44 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	091b      	lsrs	r3, r3, #4
 8001cda:	f003 030f 	and.w	r3, r3, #15
 8001cde:	3301      	adds	r3, #1
 8001ce0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	2b03      	cmp	r3, #3
 8001ce6:	d10c      	bne.n	8001d02 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ce8:	4a17      	ldr	r2, [pc, #92]	; (8001d48 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cf0:	4a14      	ldr	r2, [pc, #80]	; (8001d44 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001cf2:	68d2      	ldr	r2, [r2, #12]
 8001cf4:	0a12      	lsrs	r2, r2, #8
 8001cf6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001cfa:	fb02 f303 	mul.w	r3, r2, r3
 8001cfe:	617b      	str	r3, [r7, #20]
    break;
 8001d00:	e00c      	b.n	8001d1c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d02:	4a12      	ldr	r2, [pc, #72]	; (8001d4c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d0a:	4a0e      	ldr	r2, [pc, #56]	; (8001d44 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d0c:	68d2      	ldr	r2, [r2, #12]
 8001d0e:	0a12      	lsrs	r2, r2, #8
 8001d10:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001d14:	fb02 f303 	mul.w	r3, r2, r3
 8001d18:	617b      	str	r3, [r7, #20]
    break;
 8001d1a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d1c:	4b09      	ldr	r3, [pc, #36]	; (8001d44 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	0e5b      	lsrs	r3, r3, #25
 8001d22:	f003 0303 	and.w	r3, r3, #3
 8001d26:	3301      	adds	r3, #1
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001d2c:	697a      	ldr	r2, [r7, #20]
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d34:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001d36:	687b      	ldr	r3, [r7, #4]
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	371c      	adds	r7, #28
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr
 8001d44:	40021000 	.word	0x40021000
 8001d48:	007a1200 	.word	0x007a1200
 8001d4c:	00f42400 	.word	0x00f42400

08001d50 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b086      	sub	sp, #24
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001d58:	2300      	movs	r3, #0
 8001d5a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	f000 8098 	beq.w	8001e9e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d72:	4b43      	ldr	r3, [pc, #268]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d10d      	bne.n	8001d9a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d7e:	4b40      	ldr	r3, [pc, #256]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d82:	4a3f      	ldr	r2, [pc, #252]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d88:	6593      	str	r3, [r2, #88]	; 0x58
 8001d8a:	4b3d      	ldr	r3, [pc, #244]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d92:	60bb      	str	r3, [r7, #8]
 8001d94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d96:	2301      	movs	r3, #1
 8001d98:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d9a:	4b3a      	ldr	r3, [pc, #232]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a39      	ldr	r2, [pc, #228]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001da0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001da4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001da6:	f7fe ff4f 	bl	8000c48 <HAL_GetTick>
 8001daa:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001dac:	e009      	b.n	8001dc2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dae:	f7fe ff4b 	bl	8000c48 <HAL_GetTick>
 8001db2:	4602      	mov	r2, r0
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	d902      	bls.n	8001dc2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	74fb      	strb	r3, [r7, #19]
        break;
 8001dc0:	e005      	b.n	8001dce <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001dc2:	4b30      	ldr	r3, [pc, #192]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d0ef      	beq.n	8001dae <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001dce:	7cfb      	ldrb	r3, [r7, #19]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d159      	bne.n	8001e88 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001dd4:	4b2a      	ldr	r3, [pc, #168]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dde:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d01e      	beq.n	8001e24 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dea:	697a      	ldr	r2, [r7, #20]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d019      	beq.n	8001e24 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001df0:	4b23      	ldr	r3, [pc, #140]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001df6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001dfa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001dfc:	4b20      	ldr	r3, [pc, #128]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e02:	4a1f      	ldr	r2, [pc, #124]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001e0c:	4b1c      	ldr	r3, [pc, #112]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e12:	4a1b      	ldr	r2, [pc, #108]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001e1c:	4a18      	ldr	r2, [pc, #96]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d016      	beq.n	8001e5c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e2e:	f7fe ff0b 	bl	8000c48 <HAL_GetTick>
 8001e32:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e34:	e00b      	b.n	8001e4e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e36:	f7fe ff07 	bl	8000c48 <HAL_GetTick>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d902      	bls.n	8001e4e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	74fb      	strb	r3, [r7, #19]
            break;
 8001e4c:	e006      	b.n	8001e5c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e4e:	4b0c      	ldr	r3, [pc, #48]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e54:	f003 0302 	and.w	r3, r3, #2
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d0ec      	beq.n	8001e36 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8001e5c:	7cfb      	ldrb	r3, [r7, #19]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d10b      	bne.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e62:	4b07      	ldr	r3, [pc, #28]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e68:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e70:	4903      	ldr	r1, [pc, #12]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e72:	4313      	orrs	r3, r2
 8001e74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001e78:	e008      	b.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001e7a:	7cfb      	ldrb	r3, [r7, #19]
 8001e7c:	74bb      	strb	r3, [r7, #18]
 8001e7e:	e005      	b.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001e80:	40021000 	.word	0x40021000
 8001e84:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e88:	7cfb      	ldrb	r3, [r7, #19]
 8001e8a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e8c:	7c7b      	ldrb	r3, [r7, #17]
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d105      	bne.n	8001e9e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e92:	4ba6      	ldr	r3, [pc, #664]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e96:	4aa5      	ldr	r2, [pc, #660]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e9c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d00a      	beq.n	8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001eaa:	4ba0      	ldr	r3, [pc, #640]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eb0:	f023 0203 	bic.w	r2, r3, #3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	499c      	ldr	r1, [pc, #624]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0302 	and.w	r3, r3, #2
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d00a      	beq.n	8001ee2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001ecc:	4b97      	ldr	r3, [pc, #604]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ed2:	f023 020c 	bic.w	r2, r3, #12
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	4994      	ldr	r1, [pc, #592]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001edc:	4313      	orrs	r3, r2
 8001ede:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0304 	and.w	r3, r3, #4
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d00a      	beq.n	8001f04 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001eee:	4b8f      	ldr	r3, [pc, #572]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ef4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	498b      	ldr	r1, [pc, #556]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001efe:	4313      	orrs	r3, r2
 8001f00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0308 	and.w	r3, r3, #8
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d00a      	beq.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001f10:	4b86      	ldr	r3, [pc, #536]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f16:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	691b      	ldr	r3, [r3, #16]
 8001f1e:	4983      	ldr	r1, [pc, #524]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f20:	4313      	orrs	r3, r2
 8001f22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0320 	and.w	r3, r3, #32
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d00a      	beq.n	8001f48 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001f32:	4b7e      	ldr	r3, [pc, #504]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f38:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	695b      	ldr	r3, [r3, #20]
 8001f40:	497a      	ldr	r1, [pc, #488]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f42:	4313      	orrs	r3, r2
 8001f44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d00a      	beq.n	8001f6a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f54:	4b75      	ldr	r3, [pc, #468]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f5a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	699b      	ldr	r3, [r3, #24]
 8001f62:	4972      	ldr	r1, [pc, #456]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f64:	4313      	orrs	r3, r2
 8001f66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d00a      	beq.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001f76:	4b6d      	ldr	r3, [pc, #436]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f7c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	69db      	ldr	r3, [r3, #28]
 8001f84:	4969      	ldr	r1, [pc, #420]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f86:	4313      	orrs	r3, r2
 8001f88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d00a      	beq.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001f98:	4b64      	ldr	r3, [pc, #400]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f9e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6a1b      	ldr	r3, [r3, #32]
 8001fa6:	4961      	ldr	r1, [pc, #388]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d00a      	beq.n	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001fba:	4b5c      	ldr	r3, [pc, #368]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fc0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc8:	4958      	ldr	r1, [pc, #352]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d015      	beq.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001fdc:	4b53      	ldr	r3, [pc, #332]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fe2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fea:	4950      	ldr	r1, [pc, #320]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fec:	4313      	orrs	r3, r2
 8001fee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ffa:	d105      	bne.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001ffc:	4b4b      	ldr	r3, [pc, #300]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	4a4a      	ldr	r2, [pc, #296]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002002:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002006:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002010:	2b00      	cmp	r3, #0
 8002012:	d015      	beq.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002014:	4b45      	ldr	r3, [pc, #276]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002016:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800201a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002022:	4942      	ldr	r1, [pc, #264]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002024:	4313      	orrs	r3, r2
 8002026:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800202e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002032:	d105      	bne.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002034:	4b3d      	ldr	r3, [pc, #244]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	4a3c      	ldr	r2, [pc, #240]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800203a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800203e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d015      	beq.n	8002078 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800204c:	4b37      	ldr	r3, [pc, #220]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800204e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002052:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205a:	4934      	ldr	r1, [pc, #208]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800205c:	4313      	orrs	r3, r2
 800205e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002066:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800206a:	d105      	bne.n	8002078 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800206c:	4b2f      	ldr	r3, [pc, #188]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	4a2e      	ldr	r2, [pc, #184]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002072:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002076:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002080:	2b00      	cmp	r3, #0
 8002082:	d015      	beq.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002084:	4b29      	ldr	r3, [pc, #164]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800208a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002092:	4926      	ldr	r1, [pc, #152]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002094:	4313      	orrs	r3, r2
 8002096:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800209e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80020a2:	d105      	bne.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020a4:	4b21      	ldr	r3, [pc, #132]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	4a20      	ldr	r2, [pc, #128]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80020ae:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d015      	beq.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80020bc:	4b1b      	ldr	r3, [pc, #108]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020c2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ca:	4918      	ldr	r1, [pc, #96]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020cc:	4313      	orrs	r3, r2
 80020ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80020da:	d105      	bne.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020dc:	4b13      	ldr	r3, [pc, #76]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	4a12      	ldr	r2, [pc, #72]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80020e6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d015      	beq.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80020f4:	4b0d      	ldr	r3, [pc, #52]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020fa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002102:	490a      	ldr	r1, [pc, #40]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002104:	4313      	orrs	r3, r2
 8002106:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800210e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002112:	d105      	bne.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002114:	4b05      	ldr	r3, [pc, #20]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	4a04      	ldr	r2, [pc, #16]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800211a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800211e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002120:	7cbb      	ldrb	r3, [r7, #18]
}
 8002122:	4618      	mov	r0, r3
 8002124:	3718      	adds	r7, #24
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	40021000 	.word	0x40021000

08002130 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d101      	bne.n	8002142 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e042      	b.n	80021c8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002148:	2b00      	cmp	r3, #0
 800214a:	d106      	bne.n	800215a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f7fe fbb1 	bl	80008bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2224      	movs	r2, #36	; 0x24
 800215e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f022 0201 	bic.w	r2, r2, #1
 8002170:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f000 f996 	bl	80024a4 <UART_SetConfig>
 8002178:	4603      	mov	r3, r0
 800217a:	2b01      	cmp	r3, #1
 800217c:	d101      	bne.n	8002182 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e022      	b.n	80021c8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002186:	2b00      	cmp	r3, #0
 8002188:	d002      	beq.n	8002190 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f000 fc56 	bl	8002a3c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	685a      	ldr	r2, [r3, #4]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800219e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	689a      	ldr	r2, [r3, #8]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80021ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f042 0201 	orr.w	r2, r2, #1
 80021be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f000 fcdd 	bl	8002b80 <UART_CheckIdleState>
 80021c6:	4603      	mov	r3, r0
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3708      	adds	r7, #8
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b08a      	sub	sp, #40	; 0x28
 80021d4:	af02      	add	r7, sp, #8
 80021d6:	60f8      	str	r0, [r7, #12]
 80021d8:	60b9      	str	r1, [r7, #8]
 80021da:	603b      	str	r3, [r7, #0]
 80021dc:	4613      	mov	r3, r2
 80021de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021e6:	2b20      	cmp	r3, #32
 80021e8:	f040 8083 	bne.w	80022f2 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d002      	beq.n	80021f8 <HAL_UART_Transmit+0x28>
 80021f2:	88fb      	ldrh	r3, [r7, #6]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d101      	bne.n	80021fc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e07b      	b.n	80022f4 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002202:	2b01      	cmp	r3, #1
 8002204:	d101      	bne.n	800220a <HAL_UART_Transmit+0x3a>
 8002206:	2302      	movs	r3, #2
 8002208:	e074      	b.n	80022f4 <HAL_UART_Transmit+0x124>
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2201      	movs	r2, #1
 800220e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2200      	movs	r2, #0
 8002216:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2221      	movs	r2, #33	; 0x21
 800221e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002222:	f7fe fd11 	bl	8000c48 <HAL_GetTick>
 8002226:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	88fa      	ldrh	r2, [r7, #6]
 800222c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	88fa      	ldrh	r2, [r7, #6]
 8002234:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002240:	d108      	bne.n	8002254 <HAL_UART_Transmit+0x84>
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	691b      	ldr	r3, [r3, #16]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d104      	bne.n	8002254 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800224a:	2300      	movs	r3, #0
 800224c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	61bb      	str	r3, [r7, #24]
 8002252:	e003      	b.n	800225c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002258:	2300      	movs	r3, #0
 800225a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2200      	movs	r2, #0
 8002260:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8002264:	e02c      	b.n	80022c0 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	9300      	str	r3, [sp, #0]
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	2200      	movs	r2, #0
 800226e:	2180      	movs	r1, #128	; 0x80
 8002270:	68f8      	ldr	r0, [r7, #12]
 8002272:	f000 fcd0 	bl	8002c16 <UART_WaitOnFlagUntilTimeout>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800227c:	2303      	movs	r3, #3
 800227e:	e039      	b.n	80022f4 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d10b      	bne.n	800229e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002286:	69bb      	ldr	r3, [r7, #24]
 8002288:	881b      	ldrh	r3, [r3, #0]
 800228a:	461a      	mov	r2, r3
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002294:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	3302      	adds	r3, #2
 800229a:	61bb      	str	r3, [r7, #24]
 800229c:	e007      	b.n	80022ae <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	781a      	ldrb	r2, [r3, #0]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	3301      	adds	r3, #1
 80022ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	3b01      	subs	r3, #1
 80022b8:	b29a      	uxth	r2, r3
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d1cc      	bne.n	8002266 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	9300      	str	r3, [sp, #0]
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	2200      	movs	r2, #0
 80022d4:	2140      	movs	r1, #64	; 0x40
 80022d6:	68f8      	ldr	r0, [r7, #12]
 80022d8:	f000 fc9d 	bl	8002c16 <UART_WaitOnFlagUntilTimeout>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d001      	beq.n	80022e6 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e006      	b.n	80022f4 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2220      	movs	r2, #32
 80022ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80022ee:	2300      	movs	r3, #0
 80022f0:	e000      	b.n	80022f4 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80022f2:	2302      	movs	r3, #2
  }
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3720      	adds	r7, #32
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}

080022fc <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b08a      	sub	sp, #40	; 0x28
 8002300:	af02      	add	r7, sp, #8
 8002302:	60f8      	str	r0, [r7, #12]
 8002304:	60b9      	str	r1, [r7, #8]
 8002306:	603b      	str	r3, [r7, #0]
 8002308:	4613      	mov	r3, r2
 800230a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002312:	2b20      	cmp	r3, #32
 8002314:	f040 80c0 	bne.w	8002498 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d002      	beq.n	8002324 <HAL_UART_Receive+0x28>
 800231e:	88fb      	ldrh	r3, [r7, #6]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d101      	bne.n	8002328 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e0b8      	b.n	800249a <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800232e:	2b01      	cmp	r3, #1
 8002330:	d101      	bne.n	8002336 <HAL_UART_Receive+0x3a>
 8002332:	2302      	movs	r3, #2
 8002334:	e0b1      	b.n	800249a <HAL_UART_Receive+0x19e>
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2201      	movs	r2, #1
 800233a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2200      	movs	r2, #0
 8002342:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2222      	movs	r2, #34	; 0x22
 800234a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2200      	movs	r2, #0
 8002352:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002354:	f7fe fc78 	bl	8000c48 <HAL_GetTick>
 8002358:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	88fa      	ldrh	r2, [r7, #6]
 800235e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	88fa      	ldrh	r2, [r7, #6]
 8002366:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002372:	d10e      	bne.n	8002392 <HAL_UART_Receive+0x96>
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	691b      	ldr	r3, [r3, #16]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d105      	bne.n	8002388 <HAL_UART_Receive+0x8c>
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002382:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8002386:	e02d      	b.n	80023e4 <HAL_UART_Receive+0xe8>
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	22ff      	movs	r2, #255	; 0xff
 800238c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8002390:	e028      	b.n	80023e4 <HAL_UART_Receive+0xe8>
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d10d      	bne.n	80023b6 <HAL_UART_Receive+0xba>
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	691b      	ldr	r3, [r3, #16]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d104      	bne.n	80023ac <HAL_UART_Receive+0xb0>
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	22ff      	movs	r2, #255	; 0xff
 80023a6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80023aa:	e01b      	b.n	80023e4 <HAL_UART_Receive+0xe8>
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	227f      	movs	r2, #127	; 0x7f
 80023b0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80023b4:	e016      	b.n	80023e4 <HAL_UART_Receive+0xe8>
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80023be:	d10d      	bne.n	80023dc <HAL_UART_Receive+0xe0>
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	691b      	ldr	r3, [r3, #16]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d104      	bne.n	80023d2 <HAL_UART_Receive+0xd6>
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	227f      	movs	r2, #127	; 0x7f
 80023cc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80023d0:	e008      	b.n	80023e4 <HAL_UART_Receive+0xe8>
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	223f      	movs	r2, #63	; 0x3f
 80023d6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80023da:	e003      	b.n	80023e4 <HAL_UART_Receive+0xe8>
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2200      	movs	r2, #0
 80023e0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80023ea:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023f4:	d108      	bne.n	8002408 <HAL_UART_Receive+0x10c>
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	691b      	ldr	r3, [r3, #16]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d104      	bne.n	8002408 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 80023fe:	2300      	movs	r3, #0
 8002400:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	61bb      	str	r3, [r7, #24]
 8002406:	e003      	b.n	8002410 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800240c:	2300      	movs	r3, #0
 800240e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2200      	movs	r2, #0
 8002414:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002418:	e032      	b.n	8002480 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	9300      	str	r3, [sp, #0]
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	2200      	movs	r2, #0
 8002422:	2120      	movs	r1, #32
 8002424:	68f8      	ldr	r0, [r7, #12]
 8002426:	f000 fbf6 	bl	8002c16 <UART_WaitOnFlagUntilTimeout>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d001      	beq.n	8002434 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	e032      	b.n	800249a <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d10c      	bne.n	8002454 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002440:	b29a      	uxth	r2, r3
 8002442:	8a7b      	ldrh	r3, [r7, #18]
 8002444:	4013      	ands	r3, r2
 8002446:	b29a      	uxth	r2, r3
 8002448:	69bb      	ldr	r3, [r7, #24]
 800244a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800244c:	69bb      	ldr	r3, [r7, #24]
 800244e:	3302      	adds	r3, #2
 8002450:	61bb      	str	r3, [r7, #24]
 8002452:	e00c      	b.n	800246e <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245a:	b2da      	uxtb	r2, r3
 800245c:	8a7b      	ldrh	r3, [r7, #18]
 800245e:	b2db      	uxtb	r3, r3
 8002460:	4013      	ands	r3, r2
 8002462:	b2da      	uxtb	r2, r3
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	3301      	adds	r3, #1
 800246c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002474:	b29b      	uxth	r3, r3
 8002476:	3b01      	subs	r3, #1
 8002478:	b29a      	uxth	r2, r3
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002486:	b29b      	uxth	r3, r3
 8002488:	2b00      	cmp	r3, #0
 800248a:	d1c6      	bne.n	800241a <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2220      	movs	r2, #32
 8002490:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8002494:	2300      	movs	r3, #0
 8002496:	e000      	b.n	800249a <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 8002498:	2302      	movs	r3, #2
  }
}
 800249a:	4618      	mov	r0, r3
 800249c:	3720      	adds	r7, #32
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
	...

080024a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80024a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024a8:	b08c      	sub	sp, #48	; 0x30
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80024ae:	2300      	movs	r3, #0
 80024b0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	689a      	ldr	r2, [r3, #8]
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	691b      	ldr	r3, [r3, #16]
 80024bc:	431a      	orrs	r2, r3
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	695b      	ldr	r3, [r3, #20]
 80024c2:	431a      	orrs	r2, r3
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	69db      	ldr	r3, [r3, #28]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	4bab      	ldr	r3, [pc, #684]	; (8002780 <UART_SetConfig+0x2dc>)
 80024d4:	4013      	ands	r3, r2
 80024d6:	697a      	ldr	r2, [r7, #20]
 80024d8:	6812      	ldr	r2, [r2, #0]
 80024da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80024dc:	430b      	orrs	r3, r1
 80024de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	68da      	ldr	r2, [r3, #12]
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	430a      	orrs	r2, r1
 80024f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	699b      	ldr	r3, [r3, #24]
 80024fa:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4aa0      	ldr	r2, [pc, #640]	; (8002784 <UART_SetConfig+0x2e0>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d004      	beq.n	8002510 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	6a1b      	ldr	r3, [r3, #32]
 800250a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800250c:	4313      	orrs	r3, r2
 800250e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800251a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800251e:	697a      	ldr	r2, [r7, #20]
 8002520:	6812      	ldr	r2, [r2, #0]
 8002522:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002524:	430b      	orrs	r3, r1
 8002526:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800252e:	f023 010f 	bic.w	r1, r3, #15
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	430a      	orrs	r2, r1
 800253c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a91      	ldr	r2, [pc, #580]	; (8002788 <UART_SetConfig+0x2e4>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d125      	bne.n	8002594 <UART_SetConfig+0xf0>
 8002548:	4b90      	ldr	r3, [pc, #576]	; (800278c <UART_SetConfig+0x2e8>)
 800254a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800254e:	f003 0303 	and.w	r3, r3, #3
 8002552:	2b03      	cmp	r3, #3
 8002554:	d81a      	bhi.n	800258c <UART_SetConfig+0xe8>
 8002556:	a201      	add	r2, pc, #4	; (adr r2, 800255c <UART_SetConfig+0xb8>)
 8002558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800255c:	0800256d 	.word	0x0800256d
 8002560:	0800257d 	.word	0x0800257d
 8002564:	08002575 	.word	0x08002575
 8002568:	08002585 	.word	0x08002585
 800256c:	2301      	movs	r3, #1
 800256e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002572:	e0d6      	b.n	8002722 <UART_SetConfig+0x27e>
 8002574:	2302      	movs	r3, #2
 8002576:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800257a:	e0d2      	b.n	8002722 <UART_SetConfig+0x27e>
 800257c:	2304      	movs	r3, #4
 800257e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002582:	e0ce      	b.n	8002722 <UART_SetConfig+0x27e>
 8002584:	2308      	movs	r3, #8
 8002586:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800258a:	e0ca      	b.n	8002722 <UART_SetConfig+0x27e>
 800258c:	2310      	movs	r3, #16
 800258e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002592:	e0c6      	b.n	8002722 <UART_SetConfig+0x27e>
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a7d      	ldr	r2, [pc, #500]	; (8002790 <UART_SetConfig+0x2ec>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d138      	bne.n	8002610 <UART_SetConfig+0x16c>
 800259e:	4b7b      	ldr	r3, [pc, #492]	; (800278c <UART_SetConfig+0x2e8>)
 80025a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025a4:	f003 030c 	and.w	r3, r3, #12
 80025a8:	2b0c      	cmp	r3, #12
 80025aa:	d82d      	bhi.n	8002608 <UART_SetConfig+0x164>
 80025ac:	a201      	add	r2, pc, #4	; (adr r2, 80025b4 <UART_SetConfig+0x110>)
 80025ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025b2:	bf00      	nop
 80025b4:	080025e9 	.word	0x080025e9
 80025b8:	08002609 	.word	0x08002609
 80025bc:	08002609 	.word	0x08002609
 80025c0:	08002609 	.word	0x08002609
 80025c4:	080025f9 	.word	0x080025f9
 80025c8:	08002609 	.word	0x08002609
 80025cc:	08002609 	.word	0x08002609
 80025d0:	08002609 	.word	0x08002609
 80025d4:	080025f1 	.word	0x080025f1
 80025d8:	08002609 	.word	0x08002609
 80025dc:	08002609 	.word	0x08002609
 80025e0:	08002609 	.word	0x08002609
 80025e4:	08002601 	.word	0x08002601
 80025e8:	2300      	movs	r3, #0
 80025ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80025ee:	e098      	b.n	8002722 <UART_SetConfig+0x27e>
 80025f0:	2302      	movs	r3, #2
 80025f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80025f6:	e094      	b.n	8002722 <UART_SetConfig+0x27e>
 80025f8:	2304      	movs	r3, #4
 80025fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80025fe:	e090      	b.n	8002722 <UART_SetConfig+0x27e>
 8002600:	2308      	movs	r3, #8
 8002602:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002606:	e08c      	b.n	8002722 <UART_SetConfig+0x27e>
 8002608:	2310      	movs	r3, #16
 800260a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800260e:	e088      	b.n	8002722 <UART_SetConfig+0x27e>
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a5f      	ldr	r2, [pc, #380]	; (8002794 <UART_SetConfig+0x2f0>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d125      	bne.n	8002666 <UART_SetConfig+0x1c2>
 800261a:	4b5c      	ldr	r3, [pc, #368]	; (800278c <UART_SetConfig+0x2e8>)
 800261c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002620:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002624:	2b30      	cmp	r3, #48	; 0x30
 8002626:	d016      	beq.n	8002656 <UART_SetConfig+0x1b2>
 8002628:	2b30      	cmp	r3, #48	; 0x30
 800262a:	d818      	bhi.n	800265e <UART_SetConfig+0x1ba>
 800262c:	2b20      	cmp	r3, #32
 800262e:	d00a      	beq.n	8002646 <UART_SetConfig+0x1a2>
 8002630:	2b20      	cmp	r3, #32
 8002632:	d814      	bhi.n	800265e <UART_SetConfig+0x1ba>
 8002634:	2b00      	cmp	r3, #0
 8002636:	d002      	beq.n	800263e <UART_SetConfig+0x19a>
 8002638:	2b10      	cmp	r3, #16
 800263a:	d008      	beq.n	800264e <UART_SetConfig+0x1aa>
 800263c:	e00f      	b.n	800265e <UART_SetConfig+0x1ba>
 800263e:	2300      	movs	r3, #0
 8002640:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002644:	e06d      	b.n	8002722 <UART_SetConfig+0x27e>
 8002646:	2302      	movs	r3, #2
 8002648:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800264c:	e069      	b.n	8002722 <UART_SetConfig+0x27e>
 800264e:	2304      	movs	r3, #4
 8002650:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002654:	e065      	b.n	8002722 <UART_SetConfig+0x27e>
 8002656:	2308      	movs	r3, #8
 8002658:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800265c:	e061      	b.n	8002722 <UART_SetConfig+0x27e>
 800265e:	2310      	movs	r3, #16
 8002660:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002664:	e05d      	b.n	8002722 <UART_SetConfig+0x27e>
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a4b      	ldr	r2, [pc, #300]	; (8002798 <UART_SetConfig+0x2f4>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d125      	bne.n	80026bc <UART_SetConfig+0x218>
 8002670:	4b46      	ldr	r3, [pc, #280]	; (800278c <UART_SetConfig+0x2e8>)
 8002672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002676:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800267a:	2bc0      	cmp	r3, #192	; 0xc0
 800267c:	d016      	beq.n	80026ac <UART_SetConfig+0x208>
 800267e:	2bc0      	cmp	r3, #192	; 0xc0
 8002680:	d818      	bhi.n	80026b4 <UART_SetConfig+0x210>
 8002682:	2b80      	cmp	r3, #128	; 0x80
 8002684:	d00a      	beq.n	800269c <UART_SetConfig+0x1f8>
 8002686:	2b80      	cmp	r3, #128	; 0x80
 8002688:	d814      	bhi.n	80026b4 <UART_SetConfig+0x210>
 800268a:	2b00      	cmp	r3, #0
 800268c:	d002      	beq.n	8002694 <UART_SetConfig+0x1f0>
 800268e:	2b40      	cmp	r3, #64	; 0x40
 8002690:	d008      	beq.n	80026a4 <UART_SetConfig+0x200>
 8002692:	e00f      	b.n	80026b4 <UART_SetConfig+0x210>
 8002694:	2300      	movs	r3, #0
 8002696:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800269a:	e042      	b.n	8002722 <UART_SetConfig+0x27e>
 800269c:	2302      	movs	r3, #2
 800269e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80026a2:	e03e      	b.n	8002722 <UART_SetConfig+0x27e>
 80026a4:	2304      	movs	r3, #4
 80026a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80026aa:	e03a      	b.n	8002722 <UART_SetConfig+0x27e>
 80026ac:	2308      	movs	r3, #8
 80026ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80026b2:	e036      	b.n	8002722 <UART_SetConfig+0x27e>
 80026b4:	2310      	movs	r3, #16
 80026b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80026ba:	e032      	b.n	8002722 <UART_SetConfig+0x27e>
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a30      	ldr	r2, [pc, #192]	; (8002784 <UART_SetConfig+0x2e0>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d12a      	bne.n	800271c <UART_SetConfig+0x278>
 80026c6:	4b31      	ldr	r3, [pc, #196]	; (800278c <UART_SetConfig+0x2e8>)
 80026c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026cc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80026d0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80026d4:	d01a      	beq.n	800270c <UART_SetConfig+0x268>
 80026d6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80026da:	d81b      	bhi.n	8002714 <UART_SetConfig+0x270>
 80026dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026e0:	d00c      	beq.n	80026fc <UART_SetConfig+0x258>
 80026e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026e6:	d815      	bhi.n	8002714 <UART_SetConfig+0x270>
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d003      	beq.n	80026f4 <UART_SetConfig+0x250>
 80026ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026f0:	d008      	beq.n	8002704 <UART_SetConfig+0x260>
 80026f2:	e00f      	b.n	8002714 <UART_SetConfig+0x270>
 80026f4:	2300      	movs	r3, #0
 80026f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80026fa:	e012      	b.n	8002722 <UART_SetConfig+0x27e>
 80026fc:	2302      	movs	r3, #2
 80026fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002702:	e00e      	b.n	8002722 <UART_SetConfig+0x27e>
 8002704:	2304      	movs	r3, #4
 8002706:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800270a:	e00a      	b.n	8002722 <UART_SetConfig+0x27e>
 800270c:	2308      	movs	r3, #8
 800270e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002712:	e006      	b.n	8002722 <UART_SetConfig+0x27e>
 8002714:	2310      	movs	r3, #16
 8002716:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800271a:	e002      	b.n	8002722 <UART_SetConfig+0x27e>
 800271c:	2310      	movs	r3, #16
 800271e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a17      	ldr	r2, [pc, #92]	; (8002784 <UART_SetConfig+0x2e0>)
 8002728:	4293      	cmp	r3, r2
 800272a:	f040 80a8 	bne.w	800287e <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800272e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002732:	2b08      	cmp	r3, #8
 8002734:	d834      	bhi.n	80027a0 <UART_SetConfig+0x2fc>
 8002736:	a201      	add	r2, pc, #4	; (adr r2, 800273c <UART_SetConfig+0x298>)
 8002738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800273c:	08002761 	.word	0x08002761
 8002740:	080027a1 	.word	0x080027a1
 8002744:	08002769 	.word	0x08002769
 8002748:	080027a1 	.word	0x080027a1
 800274c:	0800276f 	.word	0x0800276f
 8002750:	080027a1 	.word	0x080027a1
 8002754:	080027a1 	.word	0x080027a1
 8002758:	080027a1 	.word	0x080027a1
 800275c:	08002777 	.word	0x08002777
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002760:	f7ff fa84 	bl	8001c6c <HAL_RCC_GetPCLK1Freq>
 8002764:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002766:	e021      	b.n	80027ac <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002768:	4b0c      	ldr	r3, [pc, #48]	; (800279c <UART_SetConfig+0x2f8>)
 800276a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800276c:	e01e      	b.n	80027ac <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800276e:	f7ff fa0f 	bl	8001b90 <HAL_RCC_GetSysClockFreq>
 8002772:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002774:	e01a      	b.n	80027ac <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002776:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800277a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800277c:	e016      	b.n	80027ac <UART_SetConfig+0x308>
 800277e:	bf00      	nop
 8002780:	cfff69f3 	.word	0xcfff69f3
 8002784:	40008000 	.word	0x40008000
 8002788:	40013800 	.word	0x40013800
 800278c:	40021000 	.word	0x40021000
 8002790:	40004400 	.word	0x40004400
 8002794:	40004800 	.word	0x40004800
 8002798:	40004c00 	.word	0x40004c00
 800279c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80027a0:	2300      	movs	r3, #0
 80027a2:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80027aa:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80027ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	f000 812a 	beq.w	8002a08 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b8:	4a9e      	ldr	r2, [pc, #632]	; (8002a34 <UART_SetConfig+0x590>)
 80027ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80027be:	461a      	mov	r2, r3
 80027c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80027c6:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	685a      	ldr	r2, [r3, #4]
 80027cc:	4613      	mov	r3, r2
 80027ce:	005b      	lsls	r3, r3, #1
 80027d0:	4413      	add	r3, r2
 80027d2:	69ba      	ldr	r2, [r7, #24]
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d305      	bcc.n	80027e4 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80027de:	69ba      	ldr	r2, [r7, #24]
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d903      	bls.n	80027ec <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80027ea:	e10d      	b.n	8002a08 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80027ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ee:	2200      	movs	r2, #0
 80027f0:	60bb      	str	r3, [r7, #8]
 80027f2:	60fa      	str	r2, [r7, #12]
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f8:	4a8e      	ldr	r2, [pc, #568]	; (8002a34 <UART_SetConfig+0x590>)
 80027fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80027fe:	b29b      	uxth	r3, r3
 8002800:	2200      	movs	r2, #0
 8002802:	603b      	str	r3, [r7, #0]
 8002804:	607a      	str	r2, [r7, #4]
 8002806:	e9d7 2300 	ldrd	r2, r3, [r7]
 800280a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800280e:	f7fd fd57 	bl	80002c0 <__aeabi_uldivmod>
 8002812:	4602      	mov	r2, r0
 8002814:	460b      	mov	r3, r1
 8002816:	4610      	mov	r0, r2
 8002818:	4619      	mov	r1, r3
 800281a:	f04f 0200 	mov.w	r2, #0
 800281e:	f04f 0300 	mov.w	r3, #0
 8002822:	020b      	lsls	r3, r1, #8
 8002824:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002828:	0202      	lsls	r2, r0, #8
 800282a:	6979      	ldr	r1, [r7, #20]
 800282c:	6849      	ldr	r1, [r1, #4]
 800282e:	0849      	lsrs	r1, r1, #1
 8002830:	2000      	movs	r0, #0
 8002832:	460c      	mov	r4, r1
 8002834:	4605      	mov	r5, r0
 8002836:	eb12 0804 	adds.w	r8, r2, r4
 800283a:	eb43 0905 	adc.w	r9, r3, r5
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	2200      	movs	r2, #0
 8002844:	469a      	mov	sl, r3
 8002846:	4693      	mov	fp, r2
 8002848:	4652      	mov	r2, sl
 800284a:	465b      	mov	r3, fp
 800284c:	4640      	mov	r0, r8
 800284e:	4649      	mov	r1, r9
 8002850:	f7fd fd36 	bl	80002c0 <__aeabi_uldivmod>
 8002854:	4602      	mov	r2, r0
 8002856:	460b      	mov	r3, r1
 8002858:	4613      	mov	r3, r2
 800285a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800285c:	6a3b      	ldr	r3, [r7, #32]
 800285e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002862:	d308      	bcc.n	8002876 <UART_SetConfig+0x3d2>
 8002864:	6a3b      	ldr	r3, [r7, #32]
 8002866:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800286a:	d204      	bcs.n	8002876 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	6a3a      	ldr	r2, [r7, #32]
 8002872:	60da      	str	r2, [r3, #12]
 8002874:	e0c8      	b.n	8002a08 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800287c:	e0c4      	b.n	8002a08 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	69db      	ldr	r3, [r3, #28]
 8002882:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002886:	d167      	bne.n	8002958 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8002888:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800288c:	2b08      	cmp	r3, #8
 800288e:	d828      	bhi.n	80028e2 <UART_SetConfig+0x43e>
 8002890:	a201      	add	r2, pc, #4	; (adr r2, 8002898 <UART_SetConfig+0x3f4>)
 8002892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002896:	bf00      	nop
 8002898:	080028bd 	.word	0x080028bd
 800289c:	080028c5 	.word	0x080028c5
 80028a0:	080028cd 	.word	0x080028cd
 80028a4:	080028e3 	.word	0x080028e3
 80028a8:	080028d3 	.word	0x080028d3
 80028ac:	080028e3 	.word	0x080028e3
 80028b0:	080028e3 	.word	0x080028e3
 80028b4:	080028e3 	.word	0x080028e3
 80028b8:	080028db 	.word	0x080028db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80028bc:	f7ff f9d6 	bl	8001c6c <HAL_RCC_GetPCLK1Freq>
 80028c0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80028c2:	e014      	b.n	80028ee <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80028c4:	f7ff f9e8 	bl	8001c98 <HAL_RCC_GetPCLK2Freq>
 80028c8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80028ca:	e010      	b.n	80028ee <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80028cc:	4b5a      	ldr	r3, [pc, #360]	; (8002a38 <UART_SetConfig+0x594>)
 80028ce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80028d0:	e00d      	b.n	80028ee <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80028d2:	f7ff f95d 	bl	8001b90 <HAL_RCC_GetSysClockFreq>
 80028d6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80028d8:	e009      	b.n	80028ee <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80028da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028de:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80028e0:	e005      	b.n	80028ee <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80028e2:	2300      	movs	r3, #0
 80028e4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80028ec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80028ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	f000 8089 	beq.w	8002a08 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fa:	4a4e      	ldr	r2, [pc, #312]	; (8002a34 <UART_SetConfig+0x590>)
 80028fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002900:	461a      	mov	r2, r3
 8002902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002904:	fbb3 f3f2 	udiv	r3, r3, r2
 8002908:	005a      	lsls	r2, r3, #1
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	085b      	lsrs	r3, r3, #1
 8002910:	441a      	add	r2, r3
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	fbb2 f3f3 	udiv	r3, r2, r3
 800291a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800291c:	6a3b      	ldr	r3, [r7, #32]
 800291e:	2b0f      	cmp	r3, #15
 8002920:	d916      	bls.n	8002950 <UART_SetConfig+0x4ac>
 8002922:	6a3b      	ldr	r3, [r7, #32]
 8002924:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002928:	d212      	bcs.n	8002950 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800292a:	6a3b      	ldr	r3, [r7, #32]
 800292c:	b29b      	uxth	r3, r3
 800292e:	f023 030f 	bic.w	r3, r3, #15
 8002932:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002934:	6a3b      	ldr	r3, [r7, #32]
 8002936:	085b      	lsrs	r3, r3, #1
 8002938:	b29b      	uxth	r3, r3
 800293a:	f003 0307 	and.w	r3, r3, #7
 800293e:	b29a      	uxth	r2, r3
 8002940:	8bfb      	ldrh	r3, [r7, #30]
 8002942:	4313      	orrs	r3, r2
 8002944:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	8bfa      	ldrh	r2, [r7, #30]
 800294c:	60da      	str	r2, [r3, #12]
 800294e:	e05b      	b.n	8002a08 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002956:	e057      	b.n	8002a08 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002958:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800295c:	2b08      	cmp	r3, #8
 800295e:	d828      	bhi.n	80029b2 <UART_SetConfig+0x50e>
 8002960:	a201      	add	r2, pc, #4	; (adr r2, 8002968 <UART_SetConfig+0x4c4>)
 8002962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002966:	bf00      	nop
 8002968:	0800298d 	.word	0x0800298d
 800296c:	08002995 	.word	0x08002995
 8002970:	0800299d 	.word	0x0800299d
 8002974:	080029b3 	.word	0x080029b3
 8002978:	080029a3 	.word	0x080029a3
 800297c:	080029b3 	.word	0x080029b3
 8002980:	080029b3 	.word	0x080029b3
 8002984:	080029b3 	.word	0x080029b3
 8002988:	080029ab 	.word	0x080029ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800298c:	f7ff f96e 	bl	8001c6c <HAL_RCC_GetPCLK1Freq>
 8002990:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002992:	e014      	b.n	80029be <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002994:	f7ff f980 	bl	8001c98 <HAL_RCC_GetPCLK2Freq>
 8002998:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800299a:	e010      	b.n	80029be <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800299c:	4b26      	ldr	r3, [pc, #152]	; (8002a38 <UART_SetConfig+0x594>)
 800299e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80029a0:	e00d      	b.n	80029be <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80029a2:	f7ff f8f5 	bl	8001b90 <HAL_RCC_GetSysClockFreq>
 80029a6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80029a8:	e009      	b.n	80029be <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80029aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029ae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80029b0:	e005      	b.n	80029be <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80029b2:	2300      	movs	r3, #0
 80029b4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80029bc:	bf00      	nop
    }

    if (pclk != 0U)
 80029be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d021      	beq.n	8002a08 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c8:	4a1a      	ldr	r2, [pc, #104]	; (8002a34 <UART_SetConfig+0x590>)
 80029ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80029ce:	461a      	mov	r2, r3
 80029d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d2:	fbb3 f2f2 	udiv	r2, r3, r2
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	085b      	lsrs	r3, r3, #1
 80029dc:	441a      	add	r2, r3
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80029e6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80029e8:	6a3b      	ldr	r3, [r7, #32]
 80029ea:	2b0f      	cmp	r3, #15
 80029ec:	d909      	bls.n	8002a02 <UART_SetConfig+0x55e>
 80029ee:	6a3b      	ldr	r3, [r7, #32]
 80029f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029f4:	d205      	bcs.n	8002a02 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80029f6:	6a3b      	ldr	r3, [r7, #32]
 80029f8:	b29a      	uxth	r2, r3
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	60da      	str	r2, [r3, #12]
 8002a00:	e002      	b.n	8002a08 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	2201      	movs	r2, #1
 8002a14:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	2200      	movs	r2, #0
 8002a22:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8002a24:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3730      	adds	r7, #48	; 0x30
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a32:	bf00      	nop
 8002a34:	08003f98 	.word	0x08003f98
 8002a38:	00f42400 	.word	0x00f42400

08002a3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a48:	f003 0301 	and.w	r3, r3, #1
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d00a      	beq.n	8002a66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	430a      	orrs	r2, r1
 8002a64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a6a:	f003 0302 	and.w	r3, r3, #2
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d00a      	beq.n	8002a88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	430a      	orrs	r2, r1
 8002a86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a8c:	f003 0304 	and.w	r3, r3, #4
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d00a      	beq.n	8002aaa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	430a      	orrs	r2, r1
 8002aa8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aae:	f003 0308 	and.w	r3, r3, #8
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d00a      	beq.n	8002acc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	430a      	orrs	r2, r1
 8002aca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad0:	f003 0310 	and.w	r3, r3, #16
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d00a      	beq.n	8002aee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	430a      	orrs	r2, r1
 8002aec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002af2:	f003 0320 	and.w	r3, r3, #32
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d00a      	beq.n	8002b10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	430a      	orrs	r2, r1
 8002b0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d01a      	beq.n	8002b52 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	430a      	orrs	r2, r1
 8002b30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b3a:	d10a      	bne.n	8002b52 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	430a      	orrs	r2, r1
 8002b50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d00a      	beq.n	8002b74 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	430a      	orrs	r2, r1
 8002b72:	605a      	str	r2, [r3, #4]
  }
}
 8002b74:	bf00      	nop
 8002b76:	370c      	adds	r7, #12
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr

08002b80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b086      	sub	sp, #24
 8002b84:	af02      	add	r7, sp, #8
 8002b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002b90:	f7fe f85a 	bl	8000c48 <HAL_GetTick>
 8002b94:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0308 	and.w	r3, r3, #8
 8002ba0:	2b08      	cmp	r3, #8
 8002ba2:	d10e      	bne.n	8002bc2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ba4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002ba8:	9300      	str	r3, [sp, #0]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2200      	movs	r2, #0
 8002bae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f000 f82f 	bl	8002c16 <UART_WaitOnFlagUntilTimeout>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d001      	beq.n	8002bc2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e025      	b.n	8002c0e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0304 	and.w	r3, r3, #4
 8002bcc:	2b04      	cmp	r3, #4
 8002bce:	d10e      	bne.n	8002bee <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002bd0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002bd4:	9300      	str	r3, [sp, #0]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f000 f819 	bl	8002c16 <UART_WaitOnFlagUntilTimeout>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d001      	beq.n	8002bee <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e00f      	b.n	8002c0e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2220      	movs	r2, #32
 8002bf2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2220      	movs	r2, #32
 8002bfa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2200      	movs	r2, #0
 8002c08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3710      	adds	r7, #16
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}

08002c16 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002c16:	b580      	push	{r7, lr}
 8002c18:	b09c      	sub	sp, #112	; 0x70
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	60f8      	str	r0, [r7, #12]
 8002c1e:	60b9      	str	r1, [r7, #8]
 8002c20:	603b      	str	r3, [r7, #0]
 8002c22:	4613      	mov	r3, r2
 8002c24:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c26:	e0a9      	b.n	8002d7c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c2e:	f000 80a5 	beq.w	8002d7c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c32:	f7fe f809 	bl	8000c48 <HAL_GetTick>
 8002c36:	4602      	mov	r2, r0
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	1ad3      	subs	r3, r2, r3
 8002c3c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d302      	bcc.n	8002c48 <UART_WaitOnFlagUntilTimeout+0x32>
 8002c42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d140      	bne.n	8002cca <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c50:	e853 3f00 	ldrex	r3, [r3]
 8002c54:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8002c56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c58:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002c5c:	667b      	str	r3, [r7, #100]	; 0x64
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	461a      	mov	r2, r3
 8002c64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c66:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c68:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c6a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002c6c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002c6e:	e841 2300 	strex	r3, r2, [r1]
 8002c72:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8002c74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d1e6      	bne.n	8002c48 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	3308      	adds	r3, #8
 8002c80:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c84:	e853 3f00 	ldrex	r3, [r3]
 8002c88:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c8c:	f023 0301 	bic.w	r3, r3, #1
 8002c90:	663b      	str	r3, [r7, #96]	; 0x60
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	3308      	adds	r3, #8
 8002c98:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002c9a:	64ba      	str	r2, [r7, #72]	; 0x48
 8002c9c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c9e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002ca0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ca2:	e841 2300 	strex	r3, r2, [r1]
 8002ca6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8002ca8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d1e5      	bne.n	8002c7a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2220      	movs	r2, #32
 8002cb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2220      	movs	r2, #32
 8002cba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e069      	b.n	8002d9e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0304 	and.w	r3, r3, #4
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d051      	beq.n	8002d7c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	69db      	ldr	r3, [r3, #28]
 8002cde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ce2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ce6:	d149      	bne.n	8002d7c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002cf0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cfa:	e853 3f00 	ldrex	r3, [r3]
 8002cfe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d02:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002d06:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d10:	637b      	str	r3, [r7, #52]	; 0x34
 8002d12:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d14:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002d16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d18:	e841 2300 	strex	r3, r2, [r1]
 8002d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d1e6      	bne.n	8002cf2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	3308      	adds	r3, #8
 8002d2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	e853 3f00 	ldrex	r3, [r3]
 8002d32:	613b      	str	r3, [r7, #16]
   return(result);
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	f023 0301 	bic.w	r3, r3, #1
 8002d3a:	66bb      	str	r3, [r7, #104]	; 0x68
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	3308      	adds	r3, #8
 8002d42:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002d44:	623a      	str	r2, [r7, #32]
 8002d46:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d48:	69f9      	ldr	r1, [r7, #28]
 8002d4a:	6a3a      	ldr	r2, [r7, #32]
 8002d4c:	e841 2300 	strex	r3, r2, [r1]
 8002d50:	61bb      	str	r3, [r7, #24]
   return(result);
 8002d52:	69bb      	ldr	r3, [r7, #24]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d1e5      	bne.n	8002d24 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2220      	movs	r2, #32
 8002d5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2220      	movs	r2, #32
 8002d64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2220      	movs	r2, #32
 8002d6c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	e010      	b.n	8002d9e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	69da      	ldr	r2, [r3, #28]
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	4013      	ands	r3, r2
 8002d86:	68ba      	ldr	r2, [r7, #8]
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	bf0c      	ite	eq
 8002d8c:	2301      	moveq	r3, #1
 8002d8e:	2300      	movne	r3, #0
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	461a      	mov	r2, r3
 8002d94:	79fb      	ldrb	r3, [r7, #7]
 8002d96:	429a      	cmp	r2, r3
 8002d98:	f43f af46 	beq.w	8002c28 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3770      	adds	r7, #112	; 0x70
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}

08002da6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002da6:	b480      	push	{r7}
 8002da8:	b085      	sub	sp, #20
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d101      	bne.n	8002dbc <HAL_UARTEx_DisableFifoMode+0x16>
 8002db8:	2302      	movs	r3, #2
 8002dba:	e027      	b.n	8002e0c <HAL_UARTEx_DisableFifoMode+0x66>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2224      	movs	r2, #36	; 0x24
 8002dc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f022 0201 	bic.w	r2, r2, #1
 8002de2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8002dea:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	68fa      	ldr	r2, [r7, #12]
 8002df8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2220      	movs	r2, #32
 8002dfe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8002e0a:	2300      	movs	r3, #0
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3714      	adds	r7, #20
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d101      	bne.n	8002e30 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8002e2c:	2302      	movs	r3, #2
 8002e2e:	e02d      	b.n	8002e8c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2224      	movs	r2, #36	; 0x24
 8002e3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f022 0201 	bic.w	r2, r2, #1
 8002e56:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	683a      	ldr	r2, [r7, #0]
 8002e68:	430a      	orrs	r2, r1
 8002e6a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f000 f84f 	bl	8002f10 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	68fa      	ldr	r2, [r7, #12]
 8002e78:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2220      	movs	r2, #32
 8002e7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8002e8a:	2300      	movs	r3, #0
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3710      	adds	r7, #16
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b084      	sub	sp, #16
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d101      	bne.n	8002eac <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8002ea8:	2302      	movs	r3, #2
 8002eaa:	e02d      	b.n	8002f08 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2224      	movs	r2, #36	; 0x24
 8002eb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f022 0201 	bic.w	r2, r2, #1
 8002ed2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	683a      	ldr	r2, [r7, #0]
 8002ee4:	430a      	orrs	r2, r1
 8002ee6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f000 f811 	bl	8002f10 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	68fa      	ldr	r2, [r7, #12]
 8002ef4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2220      	movs	r2, #32
 8002efa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8002f06:	2300      	movs	r3, #0
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3710      	adds	r7, #16
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b085      	sub	sp, #20
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d108      	bne.n	8002f32 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2201      	movs	r2, #1
 8002f24:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8002f30:	e031      	b.n	8002f96 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8002f32:	2308      	movs	r3, #8
 8002f34:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8002f36:	2308      	movs	r3, #8
 8002f38:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	0e5b      	lsrs	r3, r3, #25
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	f003 0307 	and.w	r3, r3, #7
 8002f48:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	0f5b      	lsrs	r3, r3, #29
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	f003 0307 	and.w	r3, r3, #7
 8002f58:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002f5a:	7bbb      	ldrb	r3, [r7, #14]
 8002f5c:	7b3a      	ldrb	r2, [r7, #12]
 8002f5e:	4911      	ldr	r1, [pc, #68]	; (8002fa4 <UARTEx_SetNbDataToProcess+0x94>)
 8002f60:	5c8a      	ldrb	r2, [r1, r2]
 8002f62:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8002f66:	7b3a      	ldrb	r2, [r7, #12]
 8002f68:	490f      	ldr	r1, [pc, #60]	; (8002fa8 <UARTEx_SetNbDataToProcess+0x98>)
 8002f6a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002f6c:	fb93 f3f2 	sdiv	r3, r3, r2
 8002f70:	b29a      	uxth	r2, r3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002f78:	7bfb      	ldrb	r3, [r7, #15]
 8002f7a:	7b7a      	ldrb	r2, [r7, #13]
 8002f7c:	4909      	ldr	r1, [pc, #36]	; (8002fa4 <UARTEx_SetNbDataToProcess+0x94>)
 8002f7e:	5c8a      	ldrb	r2, [r1, r2]
 8002f80:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8002f84:	7b7a      	ldrb	r2, [r7, #13]
 8002f86:	4908      	ldr	r1, [pc, #32]	; (8002fa8 <UARTEx_SetNbDataToProcess+0x98>)
 8002f88:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002f8a:	fb93 f3f2 	sdiv	r3, r3, r2
 8002f8e:	b29a      	uxth	r2, r3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8002f96:	bf00      	nop
 8002f98:	3714      	adds	r7, #20
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
 8002fa2:	bf00      	nop
 8002fa4:	08003fb0 	.word	0x08003fb0
 8002fa8:	08003fb8 	.word	0x08003fb8

08002fac <__errno>:
 8002fac:	4b01      	ldr	r3, [pc, #4]	; (8002fb4 <__errno+0x8>)
 8002fae:	6818      	ldr	r0, [r3, #0]
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	2000000c 	.word	0x2000000c

08002fb8 <__libc_init_array>:
 8002fb8:	b570      	push	{r4, r5, r6, lr}
 8002fba:	4d0d      	ldr	r5, [pc, #52]	; (8002ff0 <__libc_init_array+0x38>)
 8002fbc:	4c0d      	ldr	r4, [pc, #52]	; (8002ff4 <__libc_init_array+0x3c>)
 8002fbe:	1b64      	subs	r4, r4, r5
 8002fc0:	10a4      	asrs	r4, r4, #2
 8002fc2:	2600      	movs	r6, #0
 8002fc4:	42a6      	cmp	r6, r4
 8002fc6:	d109      	bne.n	8002fdc <__libc_init_array+0x24>
 8002fc8:	4d0b      	ldr	r5, [pc, #44]	; (8002ff8 <__libc_init_array+0x40>)
 8002fca:	4c0c      	ldr	r4, [pc, #48]	; (8002ffc <__libc_init_array+0x44>)
 8002fcc:	f000 ffae 	bl	8003f2c <_init>
 8002fd0:	1b64      	subs	r4, r4, r5
 8002fd2:	10a4      	asrs	r4, r4, #2
 8002fd4:	2600      	movs	r6, #0
 8002fd6:	42a6      	cmp	r6, r4
 8002fd8:	d105      	bne.n	8002fe6 <__libc_init_array+0x2e>
 8002fda:	bd70      	pop	{r4, r5, r6, pc}
 8002fdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fe0:	4798      	blx	r3
 8002fe2:	3601      	adds	r6, #1
 8002fe4:	e7ee      	b.n	8002fc4 <__libc_init_array+0xc>
 8002fe6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fea:	4798      	blx	r3
 8002fec:	3601      	adds	r6, #1
 8002fee:	e7f2      	b.n	8002fd6 <__libc_init_array+0x1e>
 8002ff0:	08004060 	.word	0x08004060
 8002ff4:	08004060 	.word	0x08004060
 8002ff8:	08004060 	.word	0x08004060
 8002ffc:	08004064 	.word	0x08004064

08003000 <memset>:
 8003000:	4402      	add	r2, r0
 8003002:	4603      	mov	r3, r0
 8003004:	4293      	cmp	r3, r2
 8003006:	d100      	bne.n	800300a <memset+0xa>
 8003008:	4770      	bx	lr
 800300a:	f803 1b01 	strb.w	r1, [r3], #1
 800300e:	e7f9      	b.n	8003004 <memset+0x4>

08003010 <iprintf>:
 8003010:	b40f      	push	{r0, r1, r2, r3}
 8003012:	4b0a      	ldr	r3, [pc, #40]	; (800303c <iprintf+0x2c>)
 8003014:	b513      	push	{r0, r1, r4, lr}
 8003016:	681c      	ldr	r4, [r3, #0]
 8003018:	b124      	cbz	r4, 8003024 <iprintf+0x14>
 800301a:	69a3      	ldr	r3, [r4, #24]
 800301c:	b913      	cbnz	r3, 8003024 <iprintf+0x14>
 800301e:	4620      	mov	r0, r4
 8003020:	f000 f866 	bl	80030f0 <__sinit>
 8003024:	ab05      	add	r3, sp, #20
 8003026:	9a04      	ldr	r2, [sp, #16]
 8003028:	68a1      	ldr	r1, [r4, #8]
 800302a:	9301      	str	r3, [sp, #4]
 800302c:	4620      	mov	r0, r4
 800302e:	f000 f9bd 	bl	80033ac <_vfiprintf_r>
 8003032:	b002      	add	sp, #8
 8003034:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003038:	b004      	add	sp, #16
 800303a:	4770      	bx	lr
 800303c:	2000000c 	.word	0x2000000c

08003040 <std>:
 8003040:	2300      	movs	r3, #0
 8003042:	b510      	push	{r4, lr}
 8003044:	4604      	mov	r4, r0
 8003046:	e9c0 3300 	strd	r3, r3, [r0]
 800304a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800304e:	6083      	str	r3, [r0, #8]
 8003050:	8181      	strh	r1, [r0, #12]
 8003052:	6643      	str	r3, [r0, #100]	; 0x64
 8003054:	81c2      	strh	r2, [r0, #14]
 8003056:	6183      	str	r3, [r0, #24]
 8003058:	4619      	mov	r1, r3
 800305a:	2208      	movs	r2, #8
 800305c:	305c      	adds	r0, #92	; 0x5c
 800305e:	f7ff ffcf 	bl	8003000 <memset>
 8003062:	4b05      	ldr	r3, [pc, #20]	; (8003078 <std+0x38>)
 8003064:	6263      	str	r3, [r4, #36]	; 0x24
 8003066:	4b05      	ldr	r3, [pc, #20]	; (800307c <std+0x3c>)
 8003068:	62a3      	str	r3, [r4, #40]	; 0x28
 800306a:	4b05      	ldr	r3, [pc, #20]	; (8003080 <std+0x40>)
 800306c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800306e:	4b05      	ldr	r3, [pc, #20]	; (8003084 <std+0x44>)
 8003070:	6224      	str	r4, [r4, #32]
 8003072:	6323      	str	r3, [r4, #48]	; 0x30
 8003074:	bd10      	pop	{r4, pc}
 8003076:	bf00      	nop
 8003078:	08003955 	.word	0x08003955
 800307c:	08003977 	.word	0x08003977
 8003080:	080039af 	.word	0x080039af
 8003084:	080039d3 	.word	0x080039d3

08003088 <_cleanup_r>:
 8003088:	4901      	ldr	r1, [pc, #4]	; (8003090 <_cleanup_r+0x8>)
 800308a:	f000 b8af 	b.w	80031ec <_fwalk_reent>
 800308e:	bf00      	nop
 8003090:	08003cad 	.word	0x08003cad

08003094 <__sfmoreglue>:
 8003094:	b570      	push	{r4, r5, r6, lr}
 8003096:	2268      	movs	r2, #104	; 0x68
 8003098:	1e4d      	subs	r5, r1, #1
 800309a:	4355      	muls	r5, r2
 800309c:	460e      	mov	r6, r1
 800309e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80030a2:	f000 f8e5 	bl	8003270 <_malloc_r>
 80030a6:	4604      	mov	r4, r0
 80030a8:	b140      	cbz	r0, 80030bc <__sfmoreglue+0x28>
 80030aa:	2100      	movs	r1, #0
 80030ac:	e9c0 1600 	strd	r1, r6, [r0]
 80030b0:	300c      	adds	r0, #12
 80030b2:	60a0      	str	r0, [r4, #8]
 80030b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80030b8:	f7ff ffa2 	bl	8003000 <memset>
 80030bc:	4620      	mov	r0, r4
 80030be:	bd70      	pop	{r4, r5, r6, pc}

080030c0 <__sfp_lock_acquire>:
 80030c0:	4801      	ldr	r0, [pc, #4]	; (80030c8 <__sfp_lock_acquire+0x8>)
 80030c2:	f000 b8b3 	b.w	800322c <__retarget_lock_acquire_recursive>
 80030c6:	bf00      	nop
 80030c8:	20000125 	.word	0x20000125

080030cc <__sfp_lock_release>:
 80030cc:	4801      	ldr	r0, [pc, #4]	; (80030d4 <__sfp_lock_release+0x8>)
 80030ce:	f000 b8ae 	b.w	800322e <__retarget_lock_release_recursive>
 80030d2:	bf00      	nop
 80030d4:	20000125 	.word	0x20000125

080030d8 <__sinit_lock_acquire>:
 80030d8:	4801      	ldr	r0, [pc, #4]	; (80030e0 <__sinit_lock_acquire+0x8>)
 80030da:	f000 b8a7 	b.w	800322c <__retarget_lock_acquire_recursive>
 80030de:	bf00      	nop
 80030e0:	20000126 	.word	0x20000126

080030e4 <__sinit_lock_release>:
 80030e4:	4801      	ldr	r0, [pc, #4]	; (80030ec <__sinit_lock_release+0x8>)
 80030e6:	f000 b8a2 	b.w	800322e <__retarget_lock_release_recursive>
 80030ea:	bf00      	nop
 80030ec:	20000126 	.word	0x20000126

080030f0 <__sinit>:
 80030f0:	b510      	push	{r4, lr}
 80030f2:	4604      	mov	r4, r0
 80030f4:	f7ff fff0 	bl	80030d8 <__sinit_lock_acquire>
 80030f8:	69a3      	ldr	r3, [r4, #24]
 80030fa:	b11b      	cbz	r3, 8003104 <__sinit+0x14>
 80030fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003100:	f7ff bff0 	b.w	80030e4 <__sinit_lock_release>
 8003104:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003108:	6523      	str	r3, [r4, #80]	; 0x50
 800310a:	4b13      	ldr	r3, [pc, #76]	; (8003158 <__sinit+0x68>)
 800310c:	4a13      	ldr	r2, [pc, #76]	; (800315c <__sinit+0x6c>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	62a2      	str	r2, [r4, #40]	; 0x28
 8003112:	42a3      	cmp	r3, r4
 8003114:	bf04      	itt	eq
 8003116:	2301      	moveq	r3, #1
 8003118:	61a3      	streq	r3, [r4, #24]
 800311a:	4620      	mov	r0, r4
 800311c:	f000 f820 	bl	8003160 <__sfp>
 8003120:	6060      	str	r0, [r4, #4]
 8003122:	4620      	mov	r0, r4
 8003124:	f000 f81c 	bl	8003160 <__sfp>
 8003128:	60a0      	str	r0, [r4, #8]
 800312a:	4620      	mov	r0, r4
 800312c:	f000 f818 	bl	8003160 <__sfp>
 8003130:	2200      	movs	r2, #0
 8003132:	60e0      	str	r0, [r4, #12]
 8003134:	2104      	movs	r1, #4
 8003136:	6860      	ldr	r0, [r4, #4]
 8003138:	f7ff ff82 	bl	8003040 <std>
 800313c:	68a0      	ldr	r0, [r4, #8]
 800313e:	2201      	movs	r2, #1
 8003140:	2109      	movs	r1, #9
 8003142:	f7ff ff7d 	bl	8003040 <std>
 8003146:	68e0      	ldr	r0, [r4, #12]
 8003148:	2202      	movs	r2, #2
 800314a:	2112      	movs	r1, #18
 800314c:	f7ff ff78 	bl	8003040 <std>
 8003150:	2301      	movs	r3, #1
 8003152:	61a3      	str	r3, [r4, #24]
 8003154:	e7d2      	b.n	80030fc <__sinit+0xc>
 8003156:	bf00      	nop
 8003158:	08003fc0 	.word	0x08003fc0
 800315c:	08003089 	.word	0x08003089

08003160 <__sfp>:
 8003160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003162:	4607      	mov	r7, r0
 8003164:	f7ff ffac 	bl	80030c0 <__sfp_lock_acquire>
 8003168:	4b1e      	ldr	r3, [pc, #120]	; (80031e4 <__sfp+0x84>)
 800316a:	681e      	ldr	r6, [r3, #0]
 800316c:	69b3      	ldr	r3, [r6, #24]
 800316e:	b913      	cbnz	r3, 8003176 <__sfp+0x16>
 8003170:	4630      	mov	r0, r6
 8003172:	f7ff ffbd 	bl	80030f0 <__sinit>
 8003176:	3648      	adds	r6, #72	; 0x48
 8003178:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800317c:	3b01      	subs	r3, #1
 800317e:	d503      	bpl.n	8003188 <__sfp+0x28>
 8003180:	6833      	ldr	r3, [r6, #0]
 8003182:	b30b      	cbz	r3, 80031c8 <__sfp+0x68>
 8003184:	6836      	ldr	r6, [r6, #0]
 8003186:	e7f7      	b.n	8003178 <__sfp+0x18>
 8003188:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800318c:	b9d5      	cbnz	r5, 80031c4 <__sfp+0x64>
 800318e:	4b16      	ldr	r3, [pc, #88]	; (80031e8 <__sfp+0x88>)
 8003190:	60e3      	str	r3, [r4, #12]
 8003192:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003196:	6665      	str	r5, [r4, #100]	; 0x64
 8003198:	f000 f847 	bl	800322a <__retarget_lock_init_recursive>
 800319c:	f7ff ff96 	bl	80030cc <__sfp_lock_release>
 80031a0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80031a4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80031a8:	6025      	str	r5, [r4, #0]
 80031aa:	61a5      	str	r5, [r4, #24]
 80031ac:	2208      	movs	r2, #8
 80031ae:	4629      	mov	r1, r5
 80031b0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80031b4:	f7ff ff24 	bl	8003000 <memset>
 80031b8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80031bc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80031c0:	4620      	mov	r0, r4
 80031c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80031c4:	3468      	adds	r4, #104	; 0x68
 80031c6:	e7d9      	b.n	800317c <__sfp+0x1c>
 80031c8:	2104      	movs	r1, #4
 80031ca:	4638      	mov	r0, r7
 80031cc:	f7ff ff62 	bl	8003094 <__sfmoreglue>
 80031d0:	4604      	mov	r4, r0
 80031d2:	6030      	str	r0, [r6, #0]
 80031d4:	2800      	cmp	r0, #0
 80031d6:	d1d5      	bne.n	8003184 <__sfp+0x24>
 80031d8:	f7ff ff78 	bl	80030cc <__sfp_lock_release>
 80031dc:	230c      	movs	r3, #12
 80031de:	603b      	str	r3, [r7, #0]
 80031e0:	e7ee      	b.n	80031c0 <__sfp+0x60>
 80031e2:	bf00      	nop
 80031e4:	08003fc0 	.word	0x08003fc0
 80031e8:	ffff0001 	.word	0xffff0001

080031ec <_fwalk_reent>:
 80031ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80031f0:	4606      	mov	r6, r0
 80031f2:	4688      	mov	r8, r1
 80031f4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80031f8:	2700      	movs	r7, #0
 80031fa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80031fe:	f1b9 0901 	subs.w	r9, r9, #1
 8003202:	d505      	bpl.n	8003210 <_fwalk_reent+0x24>
 8003204:	6824      	ldr	r4, [r4, #0]
 8003206:	2c00      	cmp	r4, #0
 8003208:	d1f7      	bne.n	80031fa <_fwalk_reent+0xe>
 800320a:	4638      	mov	r0, r7
 800320c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003210:	89ab      	ldrh	r3, [r5, #12]
 8003212:	2b01      	cmp	r3, #1
 8003214:	d907      	bls.n	8003226 <_fwalk_reent+0x3a>
 8003216:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800321a:	3301      	adds	r3, #1
 800321c:	d003      	beq.n	8003226 <_fwalk_reent+0x3a>
 800321e:	4629      	mov	r1, r5
 8003220:	4630      	mov	r0, r6
 8003222:	47c0      	blx	r8
 8003224:	4307      	orrs	r7, r0
 8003226:	3568      	adds	r5, #104	; 0x68
 8003228:	e7e9      	b.n	80031fe <_fwalk_reent+0x12>

0800322a <__retarget_lock_init_recursive>:
 800322a:	4770      	bx	lr

0800322c <__retarget_lock_acquire_recursive>:
 800322c:	4770      	bx	lr

0800322e <__retarget_lock_release_recursive>:
 800322e:	4770      	bx	lr

08003230 <sbrk_aligned>:
 8003230:	b570      	push	{r4, r5, r6, lr}
 8003232:	4e0e      	ldr	r6, [pc, #56]	; (800326c <sbrk_aligned+0x3c>)
 8003234:	460c      	mov	r4, r1
 8003236:	6831      	ldr	r1, [r6, #0]
 8003238:	4605      	mov	r5, r0
 800323a:	b911      	cbnz	r1, 8003242 <sbrk_aligned+0x12>
 800323c:	f000 fb7a 	bl	8003934 <_sbrk_r>
 8003240:	6030      	str	r0, [r6, #0]
 8003242:	4621      	mov	r1, r4
 8003244:	4628      	mov	r0, r5
 8003246:	f000 fb75 	bl	8003934 <_sbrk_r>
 800324a:	1c43      	adds	r3, r0, #1
 800324c:	d00a      	beq.n	8003264 <sbrk_aligned+0x34>
 800324e:	1cc4      	adds	r4, r0, #3
 8003250:	f024 0403 	bic.w	r4, r4, #3
 8003254:	42a0      	cmp	r0, r4
 8003256:	d007      	beq.n	8003268 <sbrk_aligned+0x38>
 8003258:	1a21      	subs	r1, r4, r0
 800325a:	4628      	mov	r0, r5
 800325c:	f000 fb6a 	bl	8003934 <_sbrk_r>
 8003260:	3001      	adds	r0, #1
 8003262:	d101      	bne.n	8003268 <sbrk_aligned+0x38>
 8003264:	f04f 34ff 	mov.w	r4, #4294967295
 8003268:	4620      	mov	r0, r4
 800326a:	bd70      	pop	{r4, r5, r6, pc}
 800326c:	2000012c 	.word	0x2000012c

08003270 <_malloc_r>:
 8003270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003274:	1ccd      	adds	r5, r1, #3
 8003276:	f025 0503 	bic.w	r5, r5, #3
 800327a:	3508      	adds	r5, #8
 800327c:	2d0c      	cmp	r5, #12
 800327e:	bf38      	it	cc
 8003280:	250c      	movcc	r5, #12
 8003282:	2d00      	cmp	r5, #0
 8003284:	4607      	mov	r7, r0
 8003286:	db01      	blt.n	800328c <_malloc_r+0x1c>
 8003288:	42a9      	cmp	r1, r5
 800328a:	d905      	bls.n	8003298 <_malloc_r+0x28>
 800328c:	230c      	movs	r3, #12
 800328e:	603b      	str	r3, [r7, #0]
 8003290:	2600      	movs	r6, #0
 8003292:	4630      	mov	r0, r6
 8003294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003298:	4e2e      	ldr	r6, [pc, #184]	; (8003354 <_malloc_r+0xe4>)
 800329a:	f000 fdbb 	bl	8003e14 <__malloc_lock>
 800329e:	6833      	ldr	r3, [r6, #0]
 80032a0:	461c      	mov	r4, r3
 80032a2:	bb34      	cbnz	r4, 80032f2 <_malloc_r+0x82>
 80032a4:	4629      	mov	r1, r5
 80032a6:	4638      	mov	r0, r7
 80032a8:	f7ff ffc2 	bl	8003230 <sbrk_aligned>
 80032ac:	1c43      	adds	r3, r0, #1
 80032ae:	4604      	mov	r4, r0
 80032b0:	d14d      	bne.n	800334e <_malloc_r+0xde>
 80032b2:	6834      	ldr	r4, [r6, #0]
 80032b4:	4626      	mov	r6, r4
 80032b6:	2e00      	cmp	r6, #0
 80032b8:	d140      	bne.n	800333c <_malloc_r+0xcc>
 80032ba:	6823      	ldr	r3, [r4, #0]
 80032bc:	4631      	mov	r1, r6
 80032be:	4638      	mov	r0, r7
 80032c0:	eb04 0803 	add.w	r8, r4, r3
 80032c4:	f000 fb36 	bl	8003934 <_sbrk_r>
 80032c8:	4580      	cmp	r8, r0
 80032ca:	d13a      	bne.n	8003342 <_malloc_r+0xd2>
 80032cc:	6821      	ldr	r1, [r4, #0]
 80032ce:	3503      	adds	r5, #3
 80032d0:	1a6d      	subs	r5, r5, r1
 80032d2:	f025 0503 	bic.w	r5, r5, #3
 80032d6:	3508      	adds	r5, #8
 80032d8:	2d0c      	cmp	r5, #12
 80032da:	bf38      	it	cc
 80032dc:	250c      	movcc	r5, #12
 80032de:	4629      	mov	r1, r5
 80032e0:	4638      	mov	r0, r7
 80032e2:	f7ff ffa5 	bl	8003230 <sbrk_aligned>
 80032e6:	3001      	adds	r0, #1
 80032e8:	d02b      	beq.n	8003342 <_malloc_r+0xd2>
 80032ea:	6823      	ldr	r3, [r4, #0]
 80032ec:	442b      	add	r3, r5
 80032ee:	6023      	str	r3, [r4, #0]
 80032f0:	e00e      	b.n	8003310 <_malloc_r+0xa0>
 80032f2:	6822      	ldr	r2, [r4, #0]
 80032f4:	1b52      	subs	r2, r2, r5
 80032f6:	d41e      	bmi.n	8003336 <_malloc_r+0xc6>
 80032f8:	2a0b      	cmp	r2, #11
 80032fa:	d916      	bls.n	800332a <_malloc_r+0xba>
 80032fc:	1961      	adds	r1, r4, r5
 80032fe:	42a3      	cmp	r3, r4
 8003300:	6025      	str	r5, [r4, #0]
 8003302:	bf18      	it	ne
 8003304:	6059      	strne	r1, [r3, #4]
 8003306:	6863      	ldr	r3, [r4, #4]
 8003308:	bf08      	it	eq
 800330a:	6031      	streq	r1, [r6, #0]
 800330c:	5162      	str	r2, [r4, r5]
 800330e:	604b      	str	r3, [r1, #4]
 8003310:	4638      	mov	r0, r7
 8003312:	f104 060b 	add.w	r6, r4, #11
 8003316:	f000 fd83 	bl	8003e20 <__malloc_unlock>
 800331a:	f026 0607 	bic.w	r6, r6, #7
 800331e:	1d23      	adds	r3, r4, #4
 8003320:	1af2      	subs	r2, r6, r3
 8003322:	d0b6      	beq.n	8003292 <_malloc_r+0x22>
 8003324:	1b9b      	subs	r3, r3, r6
 8003326:	50a3      	str	r3, [r4, r2]
 8003328:	e7b3      	b.n	8003292 <_malloc_r+0x22>
 800332a:	6862      	ldr	r2, [r4, #4]
 800332c:	42a3      	cmp	r3, r4
 800332e:	bf0c      	ite	eq
 8003330:	6032      	streq	r2, [r6, #0]
 8003332:	605a      	strne	r2, [r3, #4]
 8003334:	e7ec      	b.n	8003310 <_malloc_r+0xa0>
 8003336:	4623      	mov	r3, r4
 8003338:	6864      	ldr	r4, [r4, #4]
 800333a:	e7b2      	b.n	80032a2 <_malloc_r+0x32>
 800333c:	4634      	mov	r4, r6
 800333e:	6876      	ldr	r6, [r6, #4]
 8003340:	e7b9      	b.n	80032b6 <_malloc_r+0x46>
 8003342:	230c      	movs	r3, #12
 8003344:	603b      	str	r3, [r7, #0]
 8003346:	4638      	mov	r0, r7
 8003348:	f000 fd6a 	bl	8003e20 <__malloc_unlock>
 800334c:	e7a1      	b.n	8003292 <_malloc_r+0x22>
 800334e:	6025      	str	r5, [r4, #0]
 8003350:	e7de      	b.n	8003310 <_malloc_r+0xa0>
 8003352:	bf00      	nop
 8003354:	20000128 	.word	0x20000128

08003358 <__sfputc_r>:
 8003358:	6893      	ldr	r3, [r2, #8]
 800335a:	3b01      	subs	r3, #1
 800335c:	2b00      	cmp	r3, #0
 800335e:	b410      	push	{r4}
 8003360:	6093      	str	r3, [r2, #8]
 8003362:	da08      	bge.n	8003376 <__sfputc_r+0x1e>
 8003364:	6994      	ldr	r4, [r2, #24]
 8003366:	42a3      	cmp	r3, r4
 8003368:	db01      	blt.n	800336e <__sfputc_r+0x16>
 800336a:	290a      	cmp	r1, #10
 800336c:	d103      	bne.n	8003376 <__sfputc_r+0x1e>
 800336e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003372:	f000 bb33 	b.w	80039dc <__swbuf_r>
 8003376:	6813      	ldr	r3, [r2, #0]
 8003378:	1c58      	adds	r0, r3, #1
 800337a:	6010      	str	r0, [r2, #0]
 800337c:	7019      	strb	r1, [r3, #0]
 800337e:	4608      	mov	r0, r1
 8003380:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003384:	4770      	bx	lr

08003386 <__sfputs_r>:
 8003386:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003388:	4606      	mov	r6, r0
 800338a:	460f      	mov	r7, r1
 800338c:	4614      	mov	r4, r2
 800338e:	18d5      	adds	r5, r2, r3
 8003390:	42ac      	cmp	r4, r5
 8003392:	d101      	bne.n	8003398 <__sfputs_r+0x12>
 8003394:	2000      	movs	r0, #0
 8003396:	e007      	b.n	80033a8 <__sfputs_r+0x22>
 8003398:	f814 1b01 	ldrb.w	r1, [r4], #1
 800339c:	463a      	mov	r2, r7
 800339e:	4630      	mov	r0, r6
 80033a0:	f7ff ffda 	bl	8003358 <__sfputc_r>
 80033a4:	1c43      	adds	r3, r0, #1
 80033a6:	d1f3      	bne.n	8003390 <__sfputs_r+0xa>
 80033a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080033ac <_vfiprintf_r>:
 80033ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033b0:	460d      	mov	r5, r1
 80033b2:	b09d      	sub	sp, #116	; 0x74
 80033b4:	4614      	mov	r4, r2
 80033b6:	4698      	mov	r8, r3
 80033b8:	4606      	mov	r6, r0
 80033ba:	b118      	cbz	r0, 80033c4 <_vfiprintf_r+0x18>
 80033bc:	6983      	ldr	r3, [r0, #24]
 80033be:	b90b      	cbnz	r3, 80033c4 <_vfiprintf_r+0x18>
 80033c0:	f7ff fe96 	bl	80030f0 <__sinit>
 80033c4:	4b89      	ldr	r3, [pc, #548]	; (80035ec <_vfiprintf_r+0x240>)
 80033c6:	429d      	cmp	r5, r3
 80033c8:	d11b      	bne.n	8003402 <_vfiprintf_r+0x56>
 80033ca:	6875      	ldr	r5, [r6, #4]
 80033cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80033ce:	07d9      	lsls	r1, r3, #31
 80033d0:	d405      	bmi.n	80033de <_vfiprintf_r+0x32>
 80033d2:	89ab      	ldrh	r3, [r5, #12]
 80033d4:	059a      	lsls	r2, r3, #22
 80033d6:	d402      	bmi.n	80033de <_vfiprintf_r+0x32>
 80033d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80033da:	f7ff ff27 	bl	800322c <__retarget_lock_acquire_recursive>
 80033de:	89ab      	ldrh	r3, [r5, #12]
 80033e0:	071b      	lsls	r3, r3, #28
 80033e2:	d501      	bpl.n	80033e8 <_vfiprintf_r+0x3c>
 80033e4:	692b      	ldr	r3, [r5, #16]
 80033e6:	b9eb      	cbnz	r3, 8003424 <_vfiprintf_r+0x78>
 80033e8:	4629      	mov	r1, r5
 80033ea:	4630      	mov	r0, r6
 80033ec:	f000 fb5a 	bl	8003aa4 <__swsetup_r>
 80033f0:	b1c0      	cbz	r0, 8003424 <_vfiprintf_r+0x78>
 80033f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80033f4:	07dc      	lsls	r4, r3, #31
 80033f6:	d50e      	bpl.n	8003416 <_vfiprintf_r+0x6a>
 80033f8:	f04f 30ff 	mov.w	r0, #4294967295
 80033fc:	b01d      	add	sp, #116	; 0x74
 80033fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003402:	4b7b      	ldr	r3, [pc, #492]	; (80035f0 <_vfiprintf_r+0x244>)
 8003404:	429d      	cmp	r5, r3
 8003406:	d101      	bne.n	800340c <_vfiprintf_r+0x60>
 8003408:	68b5      	ldr	r5, [r6, #8]
 800340a:	e7df      	b.n	80033cc <_vfiprintf_r+0x20>
 800340c:	4b79      	ldr	r3, [pc, #484]	; (80035f4 <_vfiprintf_r+0x248>)
 800340e:	429d      	cmp	r5, r3
 8003410:	bf08      	it	eq
 8003412:	68f5      	ldreq	r5, [r6, #12]
 8003414:	e7da      	b.n	80033cc <_vfiprintf_r+0x20>
 8003416:	89ab      	ldrh	r3, [r5, #12]
 8003418:	0598      	lsls	r0, r3, #22
 800341a:	d4ed      	bmi.n	80033f8 <_vfiprintf_r+0x4c>
 800341c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800341e:	f7ff ff06 	bl	800322e <__retarget_lock_release_recursive>
 8003422:	e7e9      	b.n	80033f8 <_vfiprintf_r+0x4c>
 8003424:	2300      	movs	r3, #0
 8003426:	9309      	str	r3, [sp, #36]	; 0x24
 8003428:	2320      	movs	r3, #32
 800342a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800342e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003432:	2330      	movs	r3, #48	; 0x30
 8003434:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80035f8 <_vfiprintf_r+0x24c>
 8003438:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800343c:	f04f 0901 	mov.w	r9, #1
 8003440:	4623      	mov	r3, r4
 8003442:	469a      	mov	sl, r3
 8003444:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003448:	b10a      	cbz	r2, 800344e <_vfiprintf_r+0xa2>
 800344a:	2a25      	cmp	r2, #37	; 0x25
 800344c:	d1f9      	bne.n	8003442 <_vfiprintf_r+0x96>
 800344e:	ebba 0b04 	subs.w	fp, sl, r4
 8003452:	d00b      	beq.n	800346c <_vfiprintf_r+0xc0>
 8003454:	465b      	mov	r3, fp
 8003456:	4622      	mov	r2, r4
 8003458:	4629      	mov	r1, r5
 800345a:	4630      	mov	r0, r6
 800345c:	f7ff ff93 	bl	8003386 <__sfputs_r>
 8003460:	3001      	adds	r0, #1
 8003462:	f000 80aa 	beq.w	80035ba <_vfiprintf_r+0x20e>
 8003466:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003468:	445a      	add	r2, fp
 800346a:	9209      	str	r2, [sp, #36]	; 0x24
 800346c:	f89a 3000 	ldrb.w	r3, [sl]
 8003470:	2b00      	cmp	r3, #0
 8003472:	f000 80a2 	beq.w	80035ba <_vfiprintf_r+0x20e>
 8003476:	2300      	movs	r3, #0
 8003478:	f04f 32ff 	mov.w	r2, #4294967295
 800347c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003480:	f10a 0a01 	add.w	sl, sl, #1
 8003484:	9304      	str	r3, [sp, #16]
 8003486:	9307      	str	r3, [sp, #28]
 8003488:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800348c:	931a      	str	r3, [sp, #104]	; 0x68
 800348e:	4654      	mov	r4, sl
 8003490:	2205      	movs	r2, #5
 8003492:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003496:	4858      	ldr	r0, [pc, #352]	; (80035f8 <_vfiprintf_r+0x24c>)
 8003498:	f7fc fec2 	bl	8000220 <memchr>
 800349c:	9a04      	ldr	r2, [sp, #16]
 800349e:	b9d8      	cbnz	r0, 80034d8 <_vfiprintf_r+0x12c>
 80034a0:	06d1      	lsls	r1, r2, #27
 80034a2:	bf44      	itt	mi
 80034a4:	2320      	movmi	r3, #32
 80034a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80034aa:	0713      	lsls	r3, r2, #28
 80034ac:	bf44      	itt	mi
 80034ae:	232b      	movmi	r3, #43	; 0x2b
 80034b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80034b4:	f89a 3000 	ldrb.w	r3, [sl]
 80034b8:	2b2a      	cmp	r3, #42	; 0x2a
 80034ba:	d015      	beq.n	80034e8 <_vfiprintf_r+0x13c>
 80034bc:	9a07      	ldr	r2, [sp, #28]
 80034be:	4654      	mov	r4, sl
 80034c0:	2000      	movs	r0, #0
 80034c2:	f04f 0c0a 	mov.w	ip, #10
 80034c6:	4621      	mov	r1, r4
 80034c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80034cc:	3b30      	subs	r3, #48	; 0x30
 80034ce:	2b09      	cmp	r3, #9
 80034d0:	d94e      	bls.n	8003570 <_vfiprintf_r+0x1c4>
 80034d2:	b1b0      	cbz	r0, 8003502 <_vfiprintf_r+0x156>
 80034d4:	9207      	str	r2, [sp, #28]
 80034d6:	e014      	b.n	8003502 <_vfiprintf_r+0x156>
 80034d8:	eba0 0308 	sub.w	r3, r0, r8
 80034dc:	fa09 f303 	lsl.w	r3, r9, r3
 80034e0:	4313      	orrs	r3, r2
 80034e2:	9304      	str	r3, [sp, #16]
 80034e4:	46a2      	mov	sl, r4
 80034e6:	e7d2      	b.n	800348e <_vfiprintf_r+0xe2>
 80034e8:	9b03      	ldr	r3, [sp, #12]
 80034ea:	1d19      	adds	r1, r3, #4
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	9103      	str	r1, [sp, #12]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	bfbb      	ittet	lt
 80034f4:	425b      	neglt	r3, r3
 80034f6:	f042 0202 	orrlt.w	r2, r2, #2
 80034fa:	9307      	strge	r3, [sp, #28]
 80034fc:	9307      	strlt	r3, [sp, #28]
 80034fe:	bfb8      	it	lt
 8003500:	9204      	strlt	r2, [sp, #16]
 8003502:	7823      	ldrb	r3, [r4, #0]
 8003504:	2b2e      	cmp	r3, #46	; 0x2e
 8003506:	d10c      	bne.n	8003522 <_vfiprintf_r+0x176>
 8003508:	7863      	ldrb	r3, [r4, #1]
 800350a:	2b2a      	cmp	r3, #42	; 0x2a
 800350c:	d135      	bne.n	800357a <_vfiprintf_r+0x1ce>
 800350e:	9b03      	ldr	r3, [sp, #12]
 8003510:	1d1a      	adds	r2, r3, #4
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	9203      	str	r2, [sp, #12]
 8003516:	2b00      	cmp	r3, #0
 8003518:	bfb8      	it	lt
 800351a:	f04f 33ff 	movlt.w	r3, #4294967295
 800351e:	3402      	adds	r4, #2
 8003520:	9305      	str	r3, [sp, #20]
 8003522:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003608 <_vfiprintf_r+0x25c>
 8003526:	7821      	ldrb	r1, [r4, #0]
 8003528:	2203      	movs	r2, #3
 800352a:	4650      	mov	r0, sl
 800352c:	f7fc fe78 	bl	8000220 <memchr>
 8003530:	b140      	cbz	r0, 8003544 <_vfiprintf_r+0x198>
 8003532:	2340      	movs	r3, #64	; 0x40
 8003534:	eba0 000a 	sub.w	r0, r0, sl
 8003538:	fa03 f000 	lsl.w	r0, r3, r0
 800353c:	9b04      	ldr	r3, [sp, #16]
 800353e:	4303      	orrs	r3, r0
 8003540:	3401      	adds	r4, #1
 8003542:	9304      	str	r3, [sp, #16]
 8003544:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003548:	482c      	ldr	r0, [pc, #176]	; (80035fc <_vfiprintf_r+0x250>)
 800354a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800354e:	2206      	movs	r2, #6
 8003550:	f7fc fe66 	bl	8000220 <memchr>
 8003554:	2800      	cmp	r0, #0
 8003556:	d03f      	beq.n	80035d8 <_vfiprintf_r+0x22c>
 8003558:	4b29      	ldr	r3, [pc, #164]	; (8003600 <_vfiprintf_r+0x254>)
 800355a:	bb1b      	cbnz	r3, 80035a4 <_vfiprintf_r+0x1f8>
 800355c:	9b03      	ldr	r3, [sp, #12]
 800355e:	3307      	adds	r3, #7
 8003560:	f023 0307 	bic.w	r3, r3, #7
 8003564:	3308      	adds	r3, #8
 8003566:	9303      	str	r3, [sp, #12]
 8003568:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800356a:	443b      	add	r3, r7
 800356c:	9309      	str	r3, [sp, #36]	; 0x24
 800356e:	e767      	b.n	8003440 <_vfiprintf_r+0x94>
 8003570:	fb0c 3202 	mla	r2, ip, r2, r3
 8003574:	460c      	mov	r4, r1
 8003576:	2001      	movs	r0, #1
 8003578:	e7a5      	b.n	80034c6 <_vfiprintf_r+0x11a>
 800357a:	2300      	movs	r3, #0
 800357c:	3401      	adds	r4, #1
 800357e:	9305      	str	r3, [sp, #20]
 8003580:	4619      	mov	r1, r3
 8003582:	f04f 0c0a 	mov.w	ip, #10
 8003586:	4620      	mov	r0, r4
 8003588:	f810 2b01 	ldrb.w	r2, [r0], #1
 800358c:	3a30      	subs	r2, #48	; 0x30
 800358e:	2a09      	cmp	r2, #9
 8003590:	d903      	bls.n	800359a <_vfiprintf_r+0x1ee>
 8003592:	2b00      	cmp	r3, #0
 8003594:	d0c5      	beq.n	8003522 <_vfiprintf_r+0x176>
 8003596:	9105      	str	r1, [sp, #20]
 8003598:	e7c3      	b.n	8003522 <_vfiprintf_r+0x176>
 800359a:	fb0c 2101 	mla	r1, ip, r1, r2
 800359e:	4604      	mov	r4, r0
 80035a0:	2301      	movs	r3, #1
 80035a2:	e7f0      	b.n	8003586 <_vfiprintf_r+0x1da>
 80035a4:	ab03      	add	r3, sp, #12
 80035a6:	9300      	str	r3, [sp, #0]
 80035a8:	462a      	mov	r2, r5
 80035aa:	4b16      	ldr	r3, [pc, #88]	; (8003604 <_vfiprintf_r+0x258>)
 80035ac:	a904      	add	r1, sp, #16
 80035ae:	4630      	mov	r0, r6
 80035b0:	f3af 8000 	nop.w
 80035b4:	4607      	mov	r7, r0
 80035b6:	1c78      	adds	r0, r7, #1
 80035b8:	d1d6      	bne.n	8003568 <_vfiprintf_r+0x1bc>
 80035ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80035bc:	07d9      	lsls	r1, r3, #31
 80035be:	d405      	bmi.n	80035cc <_vfiprintf_r+0x220>
 80035c0:	89ab      	ldrh	r3, [r5, #12]
 80035c2:	059a      	lsls	r2, r3, #22
 80035c4:	d402      	bmi.n	80035cc <_vfiprintf_r+0x220>
 80035c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80035c8:	f7ff fe31 	bl	800322e <__retarget_lock_release_recursive>
 80035cc:	89ab      	ldrh	r3, [r5, #12]
 80035ce:	065b      	lsls	r3, r3, #25
 80035d0:	f53f af12 	bmi.w	80033f8 <_vfiprintf_r+0x4c>
 80035d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80035d6:	e711      	b.n	80033fc <_vfiprintf_r+0x50>
 80035d8:	ab03      	add	r3, sp, #12
 80035da:	9300      	str	r3, [sp, #0]
 80035dc:	462a      	mov	r2, r5
 80035de:	4b09      	ldr	r3, [pc, #36]	; (8003604 <_vfiprintf_r+0x258>)
 80035e0:	a904      	add	r1, sp, #16
 80035e2:	4630      	mov	r0, r6
 80035e4:	f000 f880 	bl	80036e8 <_printf_i>
 80035e8:	e7e4      	b.n	80035b4 <_vfiprintf_r+0x208>
 80035ea:	bf00      	nop
 80035ec:	08003fe4 	.word	0x08003fe4
 80035f0:	08004004 	.word	0x08004004
 80035f4:	08003fc4 	.word	0x08003fc4
 80035f8:	08004024 	.word	0x08004024
 80035fc:	0800402e 	.word	0x0800402e
 8003600:	00000000 	.word	0x00000000
 8003604:	08003387 	.word	0x08003387
 8003608:	0800402a 	.word	0x0800402a

0800360c <_printf_common>:
 800360c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003610:	4616      	mov	r6, r2
 8003612:	4699      	mov	r9, r3
 8003614:	688a      	ldr	r2, [r1, #8]
 8003616:	690b      	ldr	r3, [r1, #16]
 8003618:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800361c:	4293      	cmp	r3, r2
 800361e:	bfb8      	it	lt
 8003620:	4613      	movlt	r3, r2
 8003622:	6033      	str	r3, [r6, #0]
 8003624:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003628:	4607      	mov	r7, r0
 800362a:	460c      	mov	r4, r1
 800362c:	b10a      	cbz	r2, 8003632 <_printf_common+0x26>
 800362e:	3301      	adds	r3, #1
 8003630:	6033      	str	r3, [r6, #0]
 8003632:	6823      	ldr	r3, [r4, #0]
 8003634:	0699      	lsls	r1, r3, #26
 8003636:	bf42      	ittt	mi
 8003638:	6833      	ldrmi	r3, [r6, #0]
 800363a:	3302      	addmi	r3, #2
 800363c:	6033      	strmi	r3, [r6, #0]
 800363e:	6825      	ldr	r5, [r4, #0]
 8003640:	f015 0506 	ands.w	r5, r5, #6
 8003644:	d106      	bne.n	8003654 <_printf_common+0x48>
 8003646:	f104 0a19 	add.w	sl, r4, #25
 800364a:	68e3      	ldr	r3, [r4, #12]
 800364c:	6832      	ldr	r2, [r6, #0]
 800364e:	1a9b      	subs	r3, r3, r2
 8003650:	42ab      	cmp	r3, r5
 8003652:	dc26      	bgt.n	80036a2 <_printf_common+0x96>
 8003654:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003658:	1e13      	subs	r3, r2, #0
 800365a:	6822      	ldr	r2, [r4, #0]
 800365c:	bf18      	it	ne
 800365e:	2301      	movne	r3, #1
 8003660:	0692      	lsls	r2, r2, #26
 8003662:	d42b      	bmi.n	80036bc <_printf_common+0xb0>
 8003664:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003668:	4649      	mov	r1, r9
 800366a:	4638      	mov	r0, r7
 800366c:	47c0      	blx	r8
 800366e:	3001      	adds	r0, #1
 8003670:	d01e      	beq.n	80036b0 <_printf_common+0xa4>
 8003672:	6823      	ldr	r3, [r4, #0]
 8003674:	68e5      	ldr	r5, [r4, #12]
 8003676:	6832      	ldr	r2, [r6, #0]
 8003678:	f003 0306 	and.w	r3, r3, #6
 800367c:	2b04      	cmp	r3, #4
 800367e:	bf08      	it	eq
 8003680:	1aad      	subeq	r5, r5, r2
 8003682:	68a3      	ldr	r3, [r4, #8]
 8003684:	6922      	ldr	r2, [r4, #16]
 8003686:	bf0c      	ite	eq
 8003688:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800368c:	2500      	movne	r5, #0
 800368e:	4293      	cmp	r3, r2
 8003690:	bfc4      	itt	gt
 8003692:	1a9b      	subgt	r3, r3, r2
 8003694:	18ed      	addgt	r5, r5, r3
 8003696:	2600      	movs	r6, #0
 8003698:	341a      	adds	r4, #26
 800369a:	42b5      	cmp	r5, r6
 800369c:	d11a      	bne.n	80036d4 <_printf_common+0xc8>
 800369e:	2000      	movs	r0, #0
 80036a0:	e008      	b.n	80036b4 <_printf_common+0xa8>
 80036a2:	2301      	movs	r3, #1
 80036a4:	4652      	mov	r2, sl
 80036a6:	4649      	mov	r1, r9
 80036a8:	4638      	mov	r0, r7
 80036aa:	47c0      	blx	r8
 80036ac:	3001      	adds	r0, #1
 80036ae:	d103      	bne.n	80036b8 <_printf_common+0xac>
 80036b0:	f04f 30ff 	mov.w	r0, #4294967295
 80036b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036b8:	3501      	adds	r5, #1
 80036ba:	e7c6      	b.n	800364a <_printf_common+0x3e>
 80036bc:	18e1      	adds	r1, r4, r3
 80036be:	1c5a      	adds	r2, r3, #1
 80036c0:	2030      	movs	r0, #48	; 0x30
 80036c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80036c6:	4422      	add	r2, r4
 80036c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80036cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80036d0:	3302      	adds	r3, #2
 80036d2:	e7c7      	b.n	8003664 <_printf_common+0x58>
 80036d4:	2301      	movs	r3, #1
 80036d6:	4622      	mov	r2, r4
 80036d8:	4649      	mov	r1, r9
 80036da:	4638      	mov	r0, r7
 80036dc:	47c0      	blx	r8
 80036de:	3001      	adds	r0, #1
 80036e0:	d0e6      	beq.n	80036b0 <_printf_common+0xa4>
 80036e2:	3601      	adds	r6, #1
 80036e4:	e7d9      	b.n	800369a <_printf_common+0x8e>
	...

080036e8 <_printf_i>:
 80036e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80036ec:	7e0f      	ldrb	r7, [r1, #24]
 80036ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80036f0:	2f78      	cmp	r7, #120	; 0x78
 80036f2:	4691      	mov	r9, r2
 80036f4:	4680      	mov	r8, r0
 80036f6:	460c      	mov	r4, r1
 80036f8:	469a      	mov	sl, r3
 80036fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80036fe:	d807      	bhi.n	8003710 <_printf_i+0x28>
 8003700:	2f62      	cmp	r7, #98	; 0x62
 8003702:	d80a      	bhi.n	800371a <_printf_i+0x32>
 8003704:	2f00      	cmp	r7, #0
 8003706:	f000 80d8 	beq.w	80038ba <_printf_i+0x1d2>
 800370a:	2f58      	cmp	r7, #88	; 0x58
 800370c:	f000 80a3 	beq.w	8003856 <_printf_i+0x16e>
 8003710:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003714:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003718:	e03a      	b.n	8003790 <_printf_i+0xa8>
 800371a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800371e:	2b15      	cmp	r3, #21
 8003720:	d8f6      	bhi.n	8003710 <_printf_i+0x28>
 8003722:	a101      	add	r1, pc, #4	; (adr r1, 8003728 <_printf_i+0x40>)
 8003724:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003728:	08003781 	.word	0x08003781
 800372c:	08003795 	.word	0x08003795
 8003730:	08003711 	.word	0x08003711
 8003734:	08003711 	.word	0x08003711
 8003738:	08003711 	.word	0x08003711
 800373c:	08003711 	.word	0x08003711
 8003740:	08003795 	.word	0x08003795
 8003744:	08003711 	.word	0x08003711
 8003748:	08003711 	.word	0x08003711
 800374c:	08003711 	.word	0x08003711
 8003750:	08003711 	.word	0x08003711
 8003754:	080038a1 	.word	0x080038a1
 8003758:	080037c5 	.word	0x080037c5
 800375c:	08003883 	.word	0x08003883
 8003760:	08003711 	.word	0x08003711
 8003764:	08003711 	.word	0x08003711
 8003768:	080038c3 	.word	0x080038c3
 800376c:	08003711 	.word	0x08003711
 8003770:	080037c5 	.word	0x080037c5
 8003774:	08003711 	.word	0x08003711
 8003778:	08003711 	.word	0x08003711
 800377c:	0800388b 	.word	0x0800388b
 8003780:	682b      	ldr	r3, [r5, #0]
 8003782:	1d1a      	adds	r2, r3, #4
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	602a      	str	r2, [r5, #0]
 8003788:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800378c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003790:	2301      	movs	r3, #1
 8003792:	e0a3      	b.n	80038dc <_printf_i+0x1f4>
 8003794:	6820      	ldr	r0, [r4, #0]
 8003796:	6829      	ldr	r1, [r5, #0]
 8003798:	0606      	lsls	r6, r0, #24
 800379a:	f101 0304 	add.w	r3, r1, #4
 800379e:	d50a      	bpl.n	80037b6 <_printf_i+0xce>
 80037a0:	680e      	ldr	r6, [r1, #0]
 80037a2:	602b      	str	r3, [r5, #0]
 80037a4:	2e00      	cmp	r6, #0
 80037a6:	da03      	bge.n	80037b0 <_printf_i+0xc8>
 80037a8:	232d      	movs	r3, #45	; 0x2d
 80037aa:	4276      	negs	r6, r6
 80037ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80037b0:	485e      	ldr	r0, [pc, #376]	; (800392c <_printf_i+0x244>)
 80037b2:	230a      	movs	r3, #10
 80037b4:	e019      	b.n	80037ea <_printf_i+0x102>
 80037b6:	680e      	ldr	r6, [r1, #0]
 80037b8:	602b      	str	r3, [r5, #0]
 80037ba:	f010 0f40 	tst.w	r0, #64	; 0x40
 80037be:	bf18      	it	ne
 80037c0:	b236      	sxthne	r6, r6
 80037c2:	e7ef      	b.n	80037a4 <_printf_i+0xbc>
 80037c4:	682b      	ldr	r3, [r5, #0]
 80037c6:	6820      	ldr	r0, [r4, #0]
 80037c8:	1d19      	adds	r1, r3, #4
 80037ca:	6029      	str	r1, [r5, #0]
 80037cc:	0601      	lsls	r1, r0, #24
 80037ce:	d501      	bpl.n	80037d4 <_printf_i+0xec>
 80037d0:	681e      	ldr	r6, [r3, #0]
 80037d2:	e002      	b.n	80037da <_printf_i+0xf2>
 80037d4:	0646      	lsls	r6, r0, #25
 80037d6:	d5fb      	bpl.n	80037d0 <_printf_i+0xe8>
 80037d8:	881e      	ldrh	r6, [r3, #0]
 80037da:	4854      	ldr	r0, [pc, #336]	; (800392c <_printf_i+0x244>)
 80037dc:	2f6f      	cmp	r7, #111	; 0x6f
 80037de:	bf0c      	ite	eq
 80037e0:	2308      	moveq	r3, #8
 80037e2:	230a      	movne	r3, #10
 80037e4:	2100      	movs	r1, #0
 80037e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80037ea:	6865      	ldr	r5, [r4, #4]
 80037ec:	60a5      	str	r5, [r4, #8]
 80037ee:	2d00      	cmp	r5, #0
 80037f0:	bfa2      	ittt	ge
 80037f2:	6821      	ldrge	r1, [r4, #0]
 80037f4:	f021 0104 	bicge.w	r1, r1, #4
 80037f8:	6021      	strge	r1, [r4, #0]
 80037fa:	b90e      	cbnz	r6, 8003800 <_printf_i+0x118>
 80037fc:	2d00      	cmp	r5, #0
 80037fe:	d04d      	beq.n	800389c <_printf_i+0x1b4>
 8003800:	4615      	mov	r5, r2
 8003802:	fbb6 f1f3 	udiv	r1, r6, r3
 8003806:	fb03 6711 	mls	r7, r3, r1, r6
 800380a:	5dc7      	ldrb	r7, [r0, r7]
 800380c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003810:	4637      	mov	r7, r6
 8003812:	42bb      	cmp	r3, r7
 8003814:	460e      	mov	r6, r1
 8003816:	d9f4      	bls.n	8003802 <_printf_i+0x11a>
 8003818:	2b08      	cmp	r3, #8
 800381a:	d10b      	bne.n	8003834 <_printf_i+0x14c>
 800381c:	6823      	ldr	r3, [r4, #0]
 800381e:	07de      	lsls	r6, r3, #31
 8003820:	d508      	bpl.n	8003834 <_printf_i+0x14c>
 8003822:	6923      	ldr	r3, [r4, #16]
 8003824:	6861      	ldr	r1, [r4, #4]
 8003826:	4299      	cmp	r1, r3
 8003828:	bfde      	ittt	le
 800382a:	2330      	movle	r3, #48	; 0x30
 800382c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003830:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003834:	1b52      	subs	r2, r2, r5
 8003836:	6122      	str	r2, [r4, #16]
 8003838:	f8cd a000 	str.w	sl, [sp]
 800383c:	464b      	mov	r3, r9
 800383e:	aa03      	add	r2, sp, #12
 8003840:	4621      	mov	r1, r4
 8003842:	4640      	mov	r0, r8
 8003844:	f7ff fee2 	bl	800360c <_printf_common>
 8003848:	3001      	adds	r0, #1
 800384a:	d14c      	bne.n	80038e6 <_printf_i+0x1fe>
 800384c:	f04f 30ff 	mov.w	r0, #4294967295
 8003850:	b004      	add	sp, #16
 8003852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003856:	4835      	ldr	r0, [pc, #212]	; (800392c <_printf_i+0x244>)
 8003858:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800385c:	6829      	ldr	r1, [r5, #0]
 800385e:	6823      	ldr	r3, [r4, #0]
 8003860:	f851 6b04 	ldr.w	r6, [r1], #4
 8003864:	6029      	str	r1, [r5, #0]
 8003866:	061d      	lsls	r5, r3, #24
 8003868:	d514      	bpl.n	8003894 <_printf_i+0x1ac>
 800386a:	07df      	lsls	r7, r3, #31
 800386c:	bf44      	itt	mi
 800386e:	f043 0320 	orrmi.w	r3, r3, #32
 8003872:	6023      	strmi	r3, [r4, #0]
 8003874:	b91e      	cbnz	r6, 800387e <_printf_i+0x196>
 8003876:	6823      	ldr	r3, [r4, #0]
 8003878:	f023 0320 	bic.w	r3, r3, #32
 800387c:	6023      	str	r3, [r4, #0]
 800387e:	2310      	movs	r3, #16
 8003880:	e7b0      	b.n	80037e4 <_printf_i+0xfc>
 8003882:	6823      	ldr	r3, [r4, #0]
 8003884:	f043 0320 	orr.w	r3, r3, #32
 8003888:	6023      	str	r3, [r4, #0]
 800388a:	2378      	movs	r3, #120	; 0x78
 800388c:	4828      	ldr	r0, [pc, #160]	; (8003930 <_printf_i+0x248>)
 800388e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003892:	e7e3      	b.n	800385c <_printf_i+0x174>
 8003894:	0659      	lsls	r1, r3, #25
 8003896:	bf48      	it	mi
 8003898:	b2b6      	uxthmi	r6, r6
 800389a:	e7e6      	b.n	800386a <_printf_i+0x182>
 800389c:	4615      	mov	r5, r2
 800389e:	e7bb      	b.n	8003818 <_printf_i+0x130>
 80038a0:	682b      	ldr	r3, [r5, #0]
 80038a2:	6826      	ldr	r6, [r4, #0]
 80038a4:	6961      	ldr	r1, [r4, #20]
 80038a6:	1d18      	adds	r0, r3, #4
 80038a8:	6028      	str	r0, [r5, #0]
 80038aa:	0635      	lsls	r5, r6, #24
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	d501      	bpl.n	80038b4 <_printf_i+0x1cc>
 80038b0:	6019      	str	r1, [r3, #0]
 80038b2:	e002      	b.n	80038ba <_printf_i+0x1d2>
 80038b4:	0670      	lsls	r0, r6, #25
 80038b6:	d5fb      	bpl.n	80038b0 <_printf_i+0x1c8>
 80038b8:	8019      	strh	r1, [r3, #0]
 80038ba:	2300      	movs	r3, #0
 80038bc:	6123      	str	r3, [r4, #16]
 80038be:	4615      	mov	r5, r2
 80038c0:	e7ba      	b.n	8003838 <_printf_i+0x150>
 80038c2:	682b      	ldr	r3, [r5, #0]
 80038c4:	1d1a      	adds	r2, r3, #4
 80038c6:	602a      	str	r2, [r5, #0]
 80038c8:	681d      	ldr	r5, [r3, #0]
 80038ca:	6862      	ldr	r2, [r4, #4]
 80038cc:	2100      	movs	r1, #0
 80038ce:	4628      	mov	r0, r5
 80038d0:	f7fc fca6 	bl	8000220 <memchr>
 80038d4:	b108      	cbz	r0, 80038da <_printf_i+0x1f2>
 80038d6:	1b40      	subs	r0, r0, r5
 80038d8:	6060      	str	r0, [r4, #4]
 80038da:	6863      	ldr	r3, [r4, #4]
 80038dc:	6123      	str	r3, [r4, #16]
 80038de:	2300      	movs	r3, #0
 80038e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80038e4:	e7a8      	b.n	8003838 <_printf_i+0x150>
 80038e6:	6923      	ldr	r3, [r4, #16]
 80038e8:	462a      	mov	r2, r5
 80038ea:	4649      	mov	r1, r9
 80038ec:	4640      	mov	r0, r8
 80038ee:	47d0      	blx	sl
 80038f0:	3001      	adds	r0, #1
 80038f2:	d0ab      	beq.n	800384c <_printf_i+0x164>
 80038f4:	6823      	ldr	r3, [r4, #0]
 80038f6:	079b      	lsls	r3, r3, #30
 80038f8:	d413      	bmi.n	8003922 <_printf_i+0x23a>
 80038fa:	68e0      	ldr	r0, [r4, #12]
 80038fc:	9b03      	ldr	r3, [sp, #12]
 80038fe:	4298      	cmp	r0, r3
 8003900:	bfb8      	it	lt
 8003902:	4618      	movlt	r0, r3
 8003904:	e7a4      	b.n	8003850 <_printf_i+0x168>
 8003906:	2301      	movs	r3, #1
 8003908:	4632      	mov	r2, r6
 800390a:	4649      	mov	r1, r9
 800390c:	4640      	mov	r0, r8
 800390e:	47d0      	blx	sl
 8003910:	3001      	adds	r0, #1
 8003912:	d09b      	beq.n	800384c <_printf_i+0x164>
 8003914:	3501      	adds	r5, #1
 8003916:	68e3      	ldr	r3, [r4, #12]
 8003918:	9903      	ldr	r1, [sp, #12]
 800391a:	1a5b      	subs	r3, r3, r1
 800391c:	42ab      	cmp	r3, r5
 800391e:	dcf2      	bgt.n	8003906 <_printf_i+0x21e>
 8003920:	e7eb      	b.n	80038fa <_printf_i+0x212>
 8003922:	2500      	movs	r5, #0
 8003924:	f104 0619 	add.w	r6, r4, #25
 8003928:	e7f5      	b.n	8003916 <_printf_i+0x22e>
 800392a:	bf00      	nop
 800392c:	08004035 	.word	0x08004035
 8003930:	08004046 	.word	0x08004046

08003934 <_sbrk_r>:
 8003934:	b538      	push	{r3, r4, r5, lr}
 8003936:	4d06      	ldr	r5, [pc, #24]	; (8003950 <_sbrk_r+0x1c>)
 8003938:	2300      	movs	r3, #0
 800393a:	4604      	mov	r4, r0
 800393c:	4608      	mov	r0, r1
 800393e:	602b      	str	r3, [r5, #0]
 8003940:	f7fd f8ac 	bl	8000a9c <_sbrk>
 8003944:	1c43      	adds	r3, r0, #1
 8003946:	d102      	bne.n	800394e <_sbrk_r+0x1a>
 8003948:	682b      	ldr	r3, [r5, #0]
 800394a:	b103      	cbz	r3, 800394e <_sbrk_r+0x1a>
 800394c:	6023      	str	r3, [r4, #0]
 800394e:	bd38      	pop	{r3, r4, r5, pc}
 8003950:	20000130 	.word	0x20000130

08003954 <__sread>:
 8003954:	b510      	push	{r4, lr}
 8003956:	460c      	mov	r4, r1
 8003958:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800395c:	f000 fab2 	bl	8003ec4 <_read_r>
 8003960:	2800      	cmp	r0, #0
 8003962:	bfab      	itete	ge
 8003964:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003966:	89a3      	ldrhlt	r3, [r4, #12]
 8003968:	181b      	addge	r3, r3, r0
 800396a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800396e:	bfac      	ite	ge
 8003970:	6563      	strge	r3, [r4, #84]	; 0x54
 8003972:	81a3      	strhlt	r3, [r4, #12]
 8003974:	bd10      	pop	{r4, pc}

08003976 <__swrite>:
 8003976:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800397a:	461f      	mov	r7, r3
 800397c:	898b      	ldrh	r3, [r1, #12]
 800397e:	05db      	lsls	r3, r3, #23
 8003980:	4605      	mov	r5, r0
 8003982:	460c      	mov	r4, r1
 8003984:	4616      	mov	r6, r2
 8003986:	d505      	bpl.n	8003994 <__swrite+0x1e>
 8003988:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800398c:	2302      	movs	r3, #2
 800398e:	2200      	movs	r2, #0
 8003990:	f000 f9c8 	bl	8003d24 <_lseek_r>
 8003994:	89a3      	ldrh	r3, [r4, #12]
 8003996:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800399a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800399e:	81a3      	strh	r3, [r4, #12]
 80039a0:	4632      	mov	r2, r6
 80039a2:	463b      	mov	r3, r7
 80039a4:	4628      	mov	r0, r5
 80039a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80039aa:	f000 b869 	b.w	8003a80 <_write_r>

080039ae <__sseek>:
 80039ae:	b510      	push	{r4, lr}
 80039b0:	460c      	mov	r4, r1
 80039b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039b6:	f000 f9b5 	bl	8003d24 <_lseek_r>
 80039ba:	1c43      	adds	r3, r0, #1
 80039bc:	89a3      	ldrh	r3, [r4, #12]
 80039be:	bf15      	itete	ne
 80039c0:	6560      	strne	r0, [r4, #84]	; 0x54
 80039c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80039c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80039ca:	81a3      	strheq	r3, [r4, #12]
 80039cc:	bf18      	it	ne
 80039ce:	81a3      	strhne	r3, [r4, #12]
 80039d0:	bd10      	pop	{r4, pc}

080039d2 <__sclose>:
 80039d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039d6:	f000 b8d3 	b.w	8003b80 <_close_r>
	...

080039dc <__swbuf_r>:
 80039dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039de:	460e      	mov	r6, r1
 80039e0:	4614      	mov	r4, r2
 80039e2:	4605      	mov	r5, r0
 80039e4:	b118      	cbz	r0, 80039ee <__swbuf_r+0x12>
 80039e6:	6983      	ldr	r3, [r0, #24]
 80039e8:	b90b      	cbnz	r3, 80039ee <__swbuf_r+0x12>
 80039ea:	f7ff fb81 	bl	80030f0 <__sinit>
 80039ee:	4b21      	ldr	r3, [pc, #132]	; (8003a74 <__swbuf_r+0x98>)
 80039f0:	429c      	cmp	r4, r3
 80039f2:	d12b      	bne.n	8003a4c <__swbuf_r+0x70>
 80039f4:	686c      	ldr	r4, [r5, #4]
 80039f6:	69a3      	ldr	r3, [r4, #24]
 80039f8:	60a3      	str	r3, [r4, #8]
 80039fa:	89a3      	ldrh	r3, [r4, #12]
 80039fc:	071a      	lsls	r2, r3, #28
 80039fe:	d52f      	bpl.n	8003a60 <__swbuf_r+0x84>
 8003a00:	6923      	ldr	r3, [r4, #16]
 8003a02:	b36b      	cbz	r3, 8003a60 <__swbuf_r+0x84>
 8003a04:	6923      	ldr	r3, [r4, #16]
 8003a06:	6820      	ldr	r0, [r4, #0]
 8003a08:	1ac0      	subs	r0, r0, r3
 8003a0a:	6963      	ldr	r3, [r4, #20]
 8003a0c:	b2f6      	uxtb	r6, r6
 8003a0e:	4283      	cmp	r3, r0
 8003a10:	4637      	mov	r7, r6
 8003a12:	dc04      	bgt.n	8003a1e <__swbuf_r+0x42>
 8003a14:	4621      	mov	r1, r4
 8003a16:	4628      	mov	r0, r5
 8003a18:	f000 f948 	bl	8003cac <_fflush_r>
 8003a1c:	bb30      	cbnz	r0, 8003a6c <__swbuf_r+0x90>
 8003a1e:	68a3      	ldr	r3, [r4, #8]
 8003a20:	3b01      	subs	r3, #1
 8003a22:	60a3      	str	r3, [r4, #8]
 8003a24:	6823      	ldr	r3, [r4, #0]
 8003a26:	1c5a      	adds	r2, r3, #1
 8003a28:	6022      	str	r2, [r4, #0]
 8003a2a:	701e      	strb	r6, [r3, #0]
 8003a2c:	6963      	ldr	r3, [r4, #20]
 8003a2e:	3001      	adds	r0, #1
 8003a30:	4283      	cmp	r3, r0
 8003a32:	d004      	beq.n	8003a3e <__swbuf_r+0x62>
 8003a34:	89a3      	ldrh	r3, [r4, #12]
 8003a36:	07db      	lsls	r3, r3, #31
 8003a38:	d506      	bpl.n	8003a48 <__swbuf_r+0x6c>
 8003a3a:	2e0a      	cmp	r6, #10
 8003a3c:	d104      	bne.n	8003a48 <__swbuf_r+0x6c>
 8003a3e:	4621      	mov	r1, r4
 8003a40:	4628      	mov	r0, r5
 8003a42:	f000 f933 	bl	8003cac <_fflush_r>
 8003a46:	b988      	cbnz	r0, 8003a6c <__swbuf_r+0x90>
 8003a48:	4638      	mov	r0, r7
 8003a4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a4c:	4b0a      	ldr	r3, [pc, #40]	; (8003a78 <__swbuf_r+0x9c>)
 8003a4e:	429c      	cmp	r4, r3
 8003a50:	d101      	bne.n	8003a56 <__swbuf_r+0x7a>
 8003a52:	68ac      	ldr	r4, [r5, #8]
 8003a54:	e7cf      	b.n	80039f6 <__swbuf_r+0x1a>
 8003a56:	4b09      	ldr	r3, [pc, #36]	; (8003a7c <__swbuf_r+0xa0>)
 8003a58:	429c      	cmp	r4, r3
 8003a5a:	bf08      	it	eq
 8003a5c:	68ec      	ldreq	r4, [r5, #12]
 8003a5e:	e7ca      	b.n	80039f6 <__swbuf_r+0x1a>
 8003a60:	4621      	mov	r1, r4
 8003a62:	4628      	mov	r0, r5
 8003a64:	f000 f81e 	bl	8003aa4 <__swsetup_r>
 8003a68:	2800      	cmp	r0, #0
 8003a6a:	d0cb      	beq.n	8003a04 <__swbuf_r+0x28>
 8003a6c:	f04f 37ff 	mov.w	r7, #4294967295
 8003a70:	e7ea      	b.n	8003a48 <__swbuf_r+0x6c>
 8003a72:	bf00      	nop
 8003a74:	08003fe4 	.word	0x08003fe4
 8003a78:	08004004 	.word	0x08004004
 8003a7c:	08003fc4 	.word	0x08003fc4

08003a80 <_write_r>:
 8003a80:	b538      	push	{r3, r4, r5, lr}
 8003a82:	4d07      	ldr	r5, [pc, #28]	; (8003aa0 <_write_r+0x20>)
 8003a84:	4604      	mov	r4, r0
 8003a86:	4608      	mov	r0, r1
 8003a88:	4611      	mov	r1, r2
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	602a      	str	r2, [r5, #0]
 8003a8e:	461a      	mov	r2, r3
 8003a90:	f7fc ffb3 	bl	80009fa <_write>
 8003a94:	1c43      	adds	r3, r0, #1
 8003a96:	d102      	bne.n	8003a9e <_write_r+0x1e>
 8003a98:	682b      	ldr	r3, [r5, #0]
 8003a9a:	b103      	cbz	r3, 8003a9e <_write_r+0x1e>
 8003a9c:	6023      	str	r3, [r4, #0]
 8003a9e:	bd38      	pop	{r3, r4, r5, pc}
 8003aa0:	20000130 	.word	0x20000130

08003aa4 <__swsetup_r>:
 8003aa4:	4b32      	ldr	r3, [pc, #200]	; (8003b70 <__swsetup_r+0xcc>)
 8003aa6:	b570      	push	{r4, r5, r6, lr}
 8003aa8:	681d      	ldr	r5, [r3, #0]
 8003aaa:	4606      	mov	r6, r0
 8003aac:	460c      	mov	r4, r1
 8003aae:	b125      	cbz	r5, 8003aba <__swsetup_r+0x16>
 8003ab0:	69ab      	ldr	r3, [r5, #24]
 8003ab2:	b913      	cbnz	r3, 8003aba <__swsetup_r+0x16>
 8003ab4:	4628      	mov	r0, r5
 8003ab6:	f7ff fb1b 	bl	80030f0 <__sinit>
 8003aba:	4b2e      	ldr	r3, [pc, #184]	; (8003b74 <__swsetup_r+0xd0>)
 8003abc:	429c      	cmp	r4, r3
 8003abe:	d10f      	bne.n	8003ae0 <__swsetup_r+0x3c>
 8003ac0:	686c      	ldr	r4, [r5, #4]
 8003ac2:	89a3      	ldrh	r3, [r4, #12]
 8003ac4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003ac8:	0719      	lsls	r1, r3, #28
 8003aca:	d42c      	bmi.n	8003b26 <__swsetup_r+0x82>
 8003acc:	06dd      	lsls	r5, r3, #27
 8003ace:	d411      	bmi.n	8003af4 <__swsetup_r+0x50>
 8003ad0:	2309      	movs	r3, #9
 8003ad2:	6033      	str	r3, [r6, #0]
 8003ad4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003ad8:	81a3      	strh	r3, [r4, #12]
 8003ada:	f04f 30ff 	mov.w	r0, #4294967295
 8003ade:	e03e      	b.n	8003b5e <__swsetup_r+0xba>
 8003ae0:	4b25      	ldr	r3, [pc, #148]	; (8003b78 <__swsetup_r+0xd4>)
 8003ae2:	429c      	cmp	r4, r3
 8003ae4:	d101      	bne.n	8003aea <__swsetup_r+0x46>
 8003ae6:	68ac      	ldr	r4, [r5, #8]
 8003ae8:	e7eb      	b.n	8003ac2 <__swsetup_r+0x1e>
 8003aea:	4b24      	ldr	r3, [pc, #144]	; (8003b7c <__swsetup_r+0xd8>)
 8003aec:	429c      	cmp	r4, r3
 8003aee:	bf08      	it	eq
 8003af0:	68ec      	ldreq	r4, [r5, #12]
 8003af2:	e7e6      	b.n	8003ac2 <__swsetup_r+0x1e>
 8003af4:	0758      	lsls	r0, r3, #29
 8003af6:	d512      	bpl.n	8003b1e <__swsetup_r+0x7a>
 8003af8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003afa:	b141      	cbz	r1, 8003b0e <__swsetup_r+0x6a>
 8003afc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003b00:	4299      	cmp	r1, r3
 8003b02:	d002      	beq.n	8003b0a <__swsetup_r+0x66>
 8003b04:	4630      	mov	r0, r6
 8003b06:	f000 f991 	bl	8003e2c <_free_r>
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	6363      	str	r3, [r4, #52]	; 0x34
 8003b0e:	89a3      	ldrh	r3, [r4, #12]
 8003b10:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003b14:	81a3      	strh	r3, [r4, #12]
 8003b16:	2300      	movs	r3, #0
 8003b18:	6063      	str	r3, [r4, #4]
 8003b1a:	6923      	ldr	r3, [r4, #16]
 8003b1c:	6023      	str	r3, [r4, #0]
 8003b1e:	89a3      	ldrh	r3, [r4, #12]
 8003b20:	f043 0308 	orr.w	r3, r3, #8
 8003b24:	81a3      	strh	r3, [r4, #12]
 8003b26:	6923      	ldr	r3, [r4, #16]
 8003b28:	b94b      	cbnz	r3, 8003b3e <__swsetup_r+0x9a>
 8003b2a:	89a3      	ldrh	r3, [r4, #12]
 8003b2c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003b30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b34:	d003      	beq.n	8003b3e <__swsetup_r+0x9a>
 8003b36:	4621      	mov	r1, r4
 8003b38:	4630      	mov	r0, r6
 8003b3a:	f000 f92b 	bl	8003d94 <__smakebuf_r>
 8003b3e:	89a0      	ldrh	r0, [r4, #12]
 8003b40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003b44:	f010 0301 	ands.w	r3, r0, #1
 8003b48:	d00a      	beq.n	8003b60 <__swsetup_r+0xbc>
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	60a3      	str	r3, [r4, #8]
 8003b4e:	6963      	ldr	r3, [r4, #20]
 8003b50:	425b      	negs	r3, r3
 8003b52:	61a3      	str	r3, [r4, #24]
 8003b54:	6923      	ldr	r3, [r4, #16]
 8003b56:	b943      	cbnz	r3, 8003b6a <__swsetup_r+0xc6>
 8003b58:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003b5c:	d1ba      	bne.n	8003ad4 <__swsetup_r+0x30>
 8003b5e:	bd70      	pop	{r4, r5, r6, pc}
 8003b60:	0781      	lsls	r1, r0, #30
 8003b62:	bf58      	it	pl
 8003b64:	6963      	ldrpl	r3, [r4, #20]
 8003b66:	60a3      	str	r3, [r4, #8]
 8003b68:	e7f4      	b.n	8003b54 <__swsetup_r+0xb0>
 8003b6a:	2000      	movs	r0, #0
 8003b6c:	e7f7      	b.n	8003b5e <__swsetup_r+0xba>
 8003b6e:	bf00      	nop
 8003b70:	2000000c 	.word	0x2000000c
 8003b74:	08003fe4 	.word	0x08003fe4
 8003b78:	08004004 	.word	0x08004004
 8003b7c:	08003fc4 	.word	0x08003fc4

08003b80 <_close_r>:
 8003b80:	b538      	push	{r3, r4, r5, lr}
 8003b82:	4d06      	ldr	r5, [pc, #24]	; (8003b9c <_close_r+0x1c>)
 8003b84:	2300      	movs	r3, #0
 8003b86:	4604      	mov	r4, r0
 8003b88:	4608      	mov	r0, r1
 8003b8a:	602b      	str	r3, [r5, #0]
 8003b8c:	f7fc ff51 	bl	8000a32 <_close>
 8003b90:	1c43      	adds	r3, r0, #1
 8003b92:	d102      	bne.n	8003b9a <_close_r+0x1a>
 8003b94:	682b      	ldr	r3, [r5, #0]
 8003b96:	b103      	cbz	r3, 8003b9a <_close_r+0x1a>
 8003b98:	6023      	str	r3, [r4, #0]
 8003b9a:	bd38      	pop	{r3, r4, r5, pc}
 8003b9c:	20000130 	.word	0x20000130

08003ba0 <__sflush_r>:
 8003ba0:	898a      	ldrh	r2, [r1, #12]
 8003ba2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ba6:	4605      	mov	r5, r0
 8003ba8:	0710      	lsls	r0, r2, #28
 8003baa:	460c      	mov	r4, r1
 8003bac:	d458      	bmi.n	8003c60 <__sflush_r+0xc0>
 8003bae:	684b      	ldr	r3, [r1, #4]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	dc05      	bgt.n	8003bc0 <__sflush_r+0x20>
 8003bb4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	dc02      	bgt.n	8003bc0 <__sflush_r+0x20>
 8003bba:	2000      	movs	r0, #0
 8003bbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003bc0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003bc2:	2e00      	cmp	r6, #0
 8003bc4:	d0f9      	beq.n	8003bba <__sflush_r+0x1a>
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003bcc:	682f      	ldr	r7, [r5, #0]
 8003bce:	602b      	str	r3, [r5, #0]
 8003bd0:	d032      	beq.n	8003c38 <__sflush_r+0x98>
 8003bd2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003bd4:	89a3      	ldrh	r3, [r4, #12]
 8003bd6:	075a      	lsls	r2, r3, #29
 8003bd8:	d505      	bpl.n	8003be6 <__sflush_r+0x46>
 8003bda:	6863      	ldr	r3, [r4, #4]
 8003bdc:	1ac0      	subs	r0, r0, r3
 8003bde:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003be0:	b10b      	cbz	r3, 8003be6 <__sflush_r+0x46>
 8003be2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003be4:	1ac0      	subs	r0, r0, r3
 8003be6:	2300      	movs	r3, #0
 8003be8:	4602      	mov	r2, r0
 8003bea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003bec:	6a21      	ldr	r1, [r4, #32]
 8003bee:	4628      	mov	r0, r5
 8003bf0:	47b0      	blx	r6
 8003bf2:	1c43      	adds	r3, r0, #1
 8003bf4:	89a3      	ldrh	r3, [r4, #12]
 8003bf6:	d106      	bne.n	8003c06 <__sflush_r+0x66>
 8003bf8:	6829      	ldr	r1, [r5, #0]
 8003bfa:	291d      	cmp	r1, #29
 8003bfc:	d82c      	bhi.n	8003c58 <__sflush_r+0xb8>
 8003bfe:	4a2a      	ldr	r2, [pc, #168]	; (8003ca8 <__sflush_r+0x108>)
 8003c00:	40ca      	lsrs	r2, r1
 8003c02:	07d6      	lsls	r6, r2, #31
 8003c04:	d528      	bpl.n	8003c58 <__sflush_r+0xb8>
 8003c06:	2200      	movs	r2, #0
 8003c08:	6062      	str	r2, [r4, #4]
 8003c0a:	04d9      	lsls	r1, r3, #19
 8003c0c:	6922      	ldr	r2, [r4, #16]
 8003c0e:	6022      	str	r2, [r4, #0]
 8003c10:	d504      	bpl.n	8003c1c <__sflush_r+0x7c>
 8003c12:	1c42      	adds	r2, r0, #1
 8003c14:	d101      	bne.n	8003c1a <__sflush_r+0x7a>
 8003c16:	682b      	ldr	r3, [r5, #0]
 8003c18:	b903      	cbnz	r3, 8003c1c <__sflush_r+0x7c>
 8003c1a:	6560      	str	r0, [r4, #84]	; 0x54
 8003c1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003c1e:	602f      	str	r7, [r5, #0]
 8003c20:	2900      	cmp	r1, #0
 8003c22:	d0ca      	beq.n	8003bba <__sflush_r+0x1a>
 8003c24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003c28:	4299      	cmp	r1, r3
 8003c2a:	d002      	beq.n	8003c32 <__sflush_r+0x92>
 8003c2c:	4628      	mov	r0, r5
 8003c2e:	f000 f8fd 	bl	8003e2c <_free_r>
 8003c32:	2000      	movs	r0, #0
 8003c34:	6360      	str	r0, [r4, #52]	; 0x34
 8003c36:	e7c1      	b.n	8003bbc <__sflush_r+0x1c>
 8003c38:	6a21      	ldr	r1, [r4, #32]
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	4628      	mov	r0, r5
 8003c3e:	47b0      	blx	r6
 8003c40:	1c41      	adds	r1, r0, #1
 8003c42:	d1c7      	bne.n	8003bd4 <__sflush_r+0x34>
 8003c44:	682b      	ldr	r3, [r5, #0]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d0c4      	beq.n	8003bd4 <__sflush_r+0x34>
 8003c4a:	2b1d      	cmp	r3, #29
 8003c4c:	d001      	beq.n	8003c52 <__sflush_r+0xb2>
 8003c4e:	2b16      	cmp	r3, #22
 8003c50:	d101      	bne.n	8003c56 <__sflush_r+0xb6>
 8003c52:	602f      	str	r7, [r5, #0]
 8003c54:	e7b1      	b.n	8003bba <__sflush_r+0x1a>
 8003c56:	89a3      	ldrh	r3, [r4, #12]
 8003c58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c5c:	81a3      	strh	r3, [r4, #12]
 8003c5e:	e7ad      	b.n	8003bbc <__sflush_r+0x1c>
 8003c60:	690f      	ldr	r7, [r1, #16]
 8003c62:	2f00      	cmp	r7, #0
 8003c64:	d0a9      	beq.n	8003bba <__sflush_r+0x1a>
 8003c66:	0793      	lsls	r3, r2, #30
 8003c68:	680e      	ldr	r6, [r1, #0]
 8003c6a:	bf08      	it	eq
 8003c6c:	694b      	ldreq	r3, [r1, #20]
 8003c6e:	600f      	str	r7, [r1, #0]
 8003c70:	bf18      	it	ne
 8003c72:	2300      	movne	r3, #0
 8003c74:	eba6 0807 	sub.w	r8, r6, r7
 8003c78:	608b      	str	r3, [r1, #8]
 8003c7a:	f1b8 0f00 	cmp.w	r8, #0
 8003c7e:	dd9c      	ble.n	8003bba <__sflush_r+0x1a>
 8003c80:	6a21      	ldr	r1, [r4, #32]
 8003c82:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003c84:	4643      	mov	r3, r8
 8003c86:	463a      	mov	r2, r7
 8003c88:	4628      	mov	r0, r5
 8003c8a:	47b0      	blx	r6
 8003c8c:	2800      	cmp	r0, #0
 8003c8e:	dc06      	bgt.n	8003c9e <__sflush_r+0xfe>
 8003c90:	89a3      	ldrh	r3, [r4, #12]
 8003c92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c96:	81a3      	strh	r3, [r4, #12]
 8003c98:	f04f 30ff 	mov.w	r0, #4294967295
 8003c9c:	e78e      	b.n	8003bbc <__sflush_r+0x1c>
 8003c9e:	4407      	add	r7, r0
 8003ca0:	eba8 0800 	sub.w	r8, r8, r0
 8003ca4:	e7e9      	b.n	8003c7a <__sflush_r+0xda>
 8003ca6:	bf00      	nop
 8003ca8:	20400001 	.word	0x20400001

08003cac <_fflush_r>:
 8003cac:	b538      	push	{r3, r4, r5, lr}
 8003cae:	690b      	ldr	r3, [r1, #16]
 8003cb0:	4605      	mov	r5, r0
 8003cb2:	460c      	mov	r4, r1
 8003cb4:	b913      	cbnz	r3, 8003cbc <_fflush_r+0x10>
 8003cb6:	2500      	movs	r5, #0
 8003cb8:	4628      	mov	r0, r5
 8003cba:	bd38      	pop	{r3, r4, r5, pc}
 8003cbc:	b118      	cbz	r0, 8003cc6 <_fflush_r+0x1a>
 8003cbe:	6983      	ldr	r3, [r0, #24]
 8003cc0:	b90b      	cbnz	r3, 8003cc6 <_fflush_r+0x1a>
 8003cc2:	f7ff fa15 	bl	80030f0 <__sinit>
 8003cc6:	4b14      	ldr	r3, [pc, #80]	; (8003d18 <_fflush_r+0x6c>)
 8003cc8:	429c      	cmp	r4, r3
 8003cca:	d11b      	bne.n	8003d04 <_fflush_r+0x58>
 8003ccc:	686c      	ldr	r4, [r5, #4]
 8003cce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d0ef      	beq.n	8003cb6 <_fflush_r+0xa>
 8003cd6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003cd8:	07d0      	lsls	r0, r2, #31
 8003cda:	d404      	bmi.n	8003ce6 <_fflush_r+0x3a>
 8003cdc:	0599      	lsls	r1, r3, #22
 8003cde:	d402      	bmi.n	8003ce6 <_fflush_r+0x3a>
 8003ce0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003ce2:	f7ff faa3 	bl	800322c <__retarget_lock_acquire_recursive>
 8003ce6:	4628      	mov	r0, r5
 8003ce8:	4621      	mov	r1, r4
 8003cea:	f7ff ff59 	bl	8003ba0 <__sflush_r>
 8003cee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003cf0:	07da      	lsls	r2, r3, #31
 8003cf2:	4605      	mov	r5, r0
 8003cf4:	d4e0      	bmi.n	8003cb8 <_fflush_r+0xc>
 8003cf6:	89a3      	ldrh	r3, [r4, #12]
 8003cf8:	059b      	lsls	r3, r3, #22
 8003cfa:	d4dd      	bmi.n	8003cb8 <_fflush_r+0xc>
 8003cfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003cfe:	f7ff fa96 	bl	800322e <__retarget_lock_release_recursive>
 8003d02:	e7d9      	b.n	8003cb8 <_fflush_r+0xc>
 8003d04:	4b05      	ldr	r3, [pc, #20]	; (8003d1c <_fflush_r+0x70>)
 8003d06:	429c      	cmp	r4, r3
 8003d08:	d101      	bne.n	8003d0e <_fflush_r+0x62>
 8003d0a:	68ac      	ldr	r4, [r5, #8]
 8003d0c:	e7df      	b.n	8003cce <_fflush_r+0x22>
 8003d0e:	4b04      	ldr	r3, [pc, #16]	; (8003d20 <_fflush_r+0x74>)
 8003d10:	429c      	cmp	r4, r3
 8003d12:	bf08      	it	eq
 8003d14:	68ec      	ldreq	r4, [r5, #12]
 8003d16:	e7da      	b.n	8003cce <_fflush_r+0x22>
 8003d18:	08003fe4 	.word	0x08003fe4
 8003d1c:	08004004 	.word	0x08004004
 8003d20:	08003fc4 	.word	0x08003fc4

08003d24 <_lseek_r>:
 8003d24:	b538      	push	{r3, r4, r5, lr}
 8003d26:	4d07      	ldr	r5, [pc, #28]	; (8003d44 <_lseek_r+0x20>)
 8003d28:	4604      	mov	r4, r0
 8003d2a:	4608      	mov	r0, r1
 8003d2c:	4611      	mov	r1, r2
 8003d2e:	2200      	movs	r2, #0
 8003d30:	602a      	str	r2, [r5, #0]
 8003d32:	461a      	mov	r2, r3
 8003d34:	f7fc fea4 	bl	8000a80 <_lseek>
 8003d38:	1c43      	adds	r3, r0, #1
 8003d3a:	d102      	bne.n	8003d42 <_lseek_r+0x1e>
 8003d3c:	682b      	ldr	r3, [r5, #0]
 8003d3e:	b103      	cbz	r3, 8003d42 <_lseek_r+0x1e>
 8003d40:	6023      	str	r3, [r4, #0]
 8003d42:	bd38      	pop	{r3, r4, r5, pc}
 8003d44:	20000130 	.word	0x20000130

08003d48 <__swhatbuf_r>:
 8003d48:	b570      	push	{r4, r5, r6, lr}
 8003d4a:	460e      	mov	r6, r1
 8003d4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d50:	2900      	cmp	r1, #0
 8003d52:	b096      	sub	sp, #88	; 0x58
 8003d54:	4614      	mov	r4, r2
 8003d56:	461d      	mov	r5, r3
 8003d58:	da08      	bge.n	8003d6c <__swhatbuf_r+0x24>
 8003d5a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	602a      	str	r2, [r5, #0]
 8003d62:	061a      	lsls	r2, r3, #24
 8003d64:	d410      	bmi.n	8003d88 <__swhatbuf_r+0x40>
 8003d66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d6a:	e00e      	b.n	8003d8a <__swhatbuf_r+0x42>
 8003d6c:	466a      	mov	r2, sp
 8003d6e:	f000 f8bb 	bl	8003ee8 <_fstat_r>
 8003d72:	2800      	cmp	r0, #0
 8003d74:	dbf1      	blt.n	8003d5a <__swhatbuf_r+0x12>
 8003d76:	9a01      	ldr	r2, [sp, #4]
 8003d78:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003d7c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003d80:	425a      	negs	r2, r3
 8003d82:	415a      	adcs	r2, r3
 8003d84:	602a      	str	r2, [r5, #0]
 8003d86:	e7ee      	b.n	8003d66 <__swhatbuf_r+0x1e>
 8003d88:	2340      	movs	r3, #64	; 0x40
 8003d8a:	2000      	movs	r0, #0
 8003d8c:	6023      	str	r3, [r4, #0]
 8003d8e:	b016      	add	sp, #88	; 0x58
 8003d90:	bd70      	pop	{r4, r5, r6, pc}
	...

08003d94 <__smakebuf_r>:
 8003d94:	898b      	ldrh	r3, [r1, #12]
 8003d96:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003d98:	079d      	lsls	r5, r3, #30
 8003d9a:	4606      	mov	r6, r0
 8003d9c:	460c      	mov	r4, r1
 8003d9e:	d507      	bpl.n	8003db0 <__smakebuf_r+0x1c>
 8003da0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003da4:	6023      	str	r3, [r4, #0]
 8003da6:	6123      	str	r3, [r4, #16]
 8003da8:	2301      	movs	r3, #1
 8003daa:	6163      	str	r3, [r4, #20]
 8003dac:	b002      	add	sp, #8
 8003dae:	bd70      	pop	{r4, r5, r6, pc}
 8003db0:	ab01      	add	r3, sp, #4
 8003db2:	466a      	mov	r2, sp
 8003db4:	f7ff ffc8 	bl	8003d48 <__swhatbuf_r>
 8003db8:	9900      	ldr	r1, [sp, #0]
 8003dba:	4605      	mov	r5, r0
 8003dbc:	4630      	mov	r0, r6
 8003dbe:	f7ff fa57 	bl	8003270 <_malloc_r>
 8003dc2:	b948      	cbnz	r0, 8003dd8 <__smakebuf_r+0x44>
 8003dc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003dc8:	059a      	lsls	r2, r3, #22
 8003dca:	d4ef      	bmi.n	8003dac <__smakebuf_r+0x18>
 8003dcc:	f023 0303 	bic.w	r3, r3, #3
 8003dd0:	f043 0302 	orr.w	r3, r3, #2
 8003dd4:	81a3      	strh	r3, [r4, #12]
 8003dd6:	e7e3      	b.n	8003da0 <__smakebuf_r+0xc>
 8003dd8:	4b0d      	ldr	r3, [pc, #52]	; (8003e10 <__smakebuf_r+0x7c>)
 8003dda:	62b3      	str	r3, [r6, #40]	; 0x28
 8003ddc:	89a3      	ldrh	r3, [r4, #12]
 8003dde:	6020      	str	r0, [r4, #0]
 8003de0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003de4:	81a3      	strh	r3, [r4, #12]
 8003de6:	9b00      	ldr	r3, [sp, #0]
 8003de8:	6163      	str	r3, [r4, #20]
 8003dea:	9b01      	ldr	r3, [sp, #4]
 8003dec:	6120      	str	r0, [r4, #16]
 8003dee:	b15b      	cbz	r3, 8003e08 <__smakebuf_r+0x74>
 8003df0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003df4:	4630      	mov	r0, r6
 8003df6:	f000 f889 	bl	8003f0c <_isatty_r>
 8003dfa:	b128      	cbz	r0, 8003e08 <__smakebuf_r+0x74>
 8003dfc:	89a3      	ldrh	r3, [r4, #12]
 8003dfe:	f023 0303 	bic.w	r3, r3, #3
 8003e02:	f043 0301 	orr.w	r3, r3, #1
 8003e06:	81a3      	strh	r3, [r4, #12]
 8003e08:	89a0      	ldrh	r0, [r4, #12]
 8003e0a:	4305      	orrs	r5, r0
 8003e0c:	81a5      	strh	r5, [r4, #12]
 8003e0e:	e7cd      	b.n	8003dac <__smakebuf_r+0x18>
 8003e10:	08003089 	.word	0x08003089

08003e14 <__malloc_lock>:
 8003e14:	4801      	ldr	r0, [pc, #4]	; (8003e1c <__malloc_lock+0x8>)
 8003e16:	f7ff ba09 	b.w	800322c <__retarget_lock_acquire_recursive>
 8003e1a:	bf00      	nop
 8003e1c:	20000124 	.word	0x20000124

08003e20 <__malloc_unlock>:
 8003e20:	4801      	ldr	r0, [pc, #4]	; (8003e28 <__malloc_unlock+0x8>)
 8003e22:	f7ff ba04 	b.w	800322e <__retarget_lock_release_recursive>
 8003e26:	bf00      	nop
 8003e28:	20000124 	.word	0x20000124

08003e2c <_free_r>:
 8003e2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003e2e:	2900      	cmp	r1, #0
 8003e30:	d044      	beq.n	8003ebc <_free_r+0x90>
 8003e32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e36:	9001      	str	r0, [sp, #4]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	f1a1 0404 	sub.w	r4, r1, #4
 8003e3e:	bfb8      	it	lt
 8003e40:	18e4      	addlt	r4, r4, r3
 8003e42:	f7ff ffe7 	bl	8003e14 <__malloc_lock>
 8003e46:	4a1e      	ldr	r2, [pc, #120]	; (8003ec0 <_free_r+0x94>)
 8003e48:	9801      	ldr	r0, [sp, #4]
 8003e4a:	6813      	ldr	r3, [r2, #0]
 8003e4c:	b933      	cbnz	r3, 8003e5c <_free_r+0x30>
 8003e4e:	6063      	str	r3, [r4, #4]
 8003e50:	6014      	str	r4, [r2, #0]
 8003e52:	b003      	add	sp, #12
 8003e54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003e58:	f7ff bfe2 	b.w	8003e20 <__malloc_unlock>
 8003e5c:	42a3      	cmp	r3, r4
 8003e5e:	d908      	bls.n	8003e72 <_free_r+0x46>
 8003e60:	6825      	ldr	r5, [r4, #0]
 8003e62:	1961      	adds	r1, r4, r5
 8003e64:	428b      	cmp	r3, r1
 8003e66:	bf01      	itttt	eq
 8003e68:	6819      	ldreq	r1, [r3, #0]
 8003e6a:	685b      	ldreq	r3, [r3, #4]
 8003e6c:	1949      	addeq	r1, r1, r5
 8003e6e:	6021      	streq	r1, [r4, #0]
 8003e70:	e7ed      	b.n	8003e4e <_free_r+0x22>
 8003e72:	461a      	mov	r2, r3
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	b10b      	cbz	r3, 8003e7c <_free_r+0x50>
 8003e78:	42a3      	cmp	r3, r4
 8003e7a:	d9fa      	bls.n	8003e72 <_free_r+0x46>
 8003e7c:	6811      	ldr	r1, [r2, #0]
 8003e7e:	1855      	adds	r5, r2, r1
 8003e80:	42a5      	cmp	r5, r4
 8003e82:	d10b      	bne.n	8003e9c <_free_r+0x70>
 8003e84:	6824      	ldr	r4, [r4, #0]
 8003e86:	4421      	add	r1, r4
 8003e88:	1854      	adds	r4, r2, r1
 8003e8a:	42a3      	cmp	r3, r4
 8003e8c:	6011      	str	r1, [r2, #0]
 8003e8e:	d1e0      	bne.n	8003e52 <_free_r+0x26>
 8003e90:	681c      	ldr	r4, [r3, #0]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	6053      	str	r3, [r2, #4]
 8003e96:	4421      	add	r1, r4
 8003e98:	6011      	str	r1, [r2, #0]
 8003e9a:	e7da      	b.n	8003e52 <_free_r+0x26>
 8003e9c:	d902      	bls.n	8003ea4 <_free_r+0x78>
 8003e9e:	230c      	movs	r3, #12
 8003ea0:	6003      	str	r3, [r0, #0]
 8003ea2:	e7d6      	b.n	8003e52 <_free_r+0x26>
 8003ea4:	6825      	ldr	r5, [r4, #0]
 8003ea6:	1961      	adds	r1, r4, r5
 8003ea8:	428b      	cmp	r3, r1
 8003eaa:	bf04      	itt	eq
 8003eac:	6819      	ldreq	r1, [r3, #0]
 8003eae:	685b      	ldreq	r3, [r3, #4]
 8003eb0:	6063      	str	r3, [r4, #4]
 8003eb2:	bf04      	itt	eq
 8003eb4:	1949      	addeq	r1, r1, r5
 8003eb6:	6021      	streq	r1, [r4, #0]
 8003eb8:	6054      	str	r4, [r2, #4]
 8003eba:	e7ca      	b.n	8003e52 <_free_r+0x26>
 8003ebc:	b003      	add	sp, #12
 8003ebe:	bd30      	pop	{r4, r5, pc}
 8003ec0:	20000128 	.word	0x20000128

08003ec4 <_read_r>:
 8003ec4:	b538      	push	{r3, r4, r5, lr}
 8003ec6:	4d07      	ldr	r5, [pc, #28]	; (8003ee4 <_read_r+0x20>)
 8003ec8:	4604      	mov	r4, r0
 8003eca:	4608      	mov	r0, r1
 8003ecc:	4611      	mov	r1, r2
 8003ece:	2200      	movs	r2, #0
 8003ed0:	602a      	str	r2, [r5, #0]
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	f7fc fd74 	bl	80009c0 <_read>
 8003ed8:	1c43      	adds	r3, r0, #1
 8003eda:	d102      	bne.n	8003ee2 <_read_r+0x1e>
 8003edc:	682b      	ldr	r3, [r5, #0]
 8003ede:	b103      	cbz	r3, 8003ee2 <_read_r+0x1e>
 8003ee0:	6023      	str	r3, [r4, #0]
 8003ee2:	bd38      	pop	{r3, r4, r5, pc}
 8003ee4:	20000130 	.word	0x20000130

08003ee8 <_fstat_r>:
 8003ee8:	b538      	push	{r3, r4, r5, lr}
 8003eea:	4d07      	ldr	r5, [pc, #28]	; (8003f08 <_fstat_r+0x20>)
 8003eec:	2300      	movs	r3, #0
 8003eee:	4604      	mov	r4, r0
 8003ef0:	4608      	mov	r0, r1
 8003ef2:	4611      	mov	r1, r2
 8003ef4:	602b      	str	r3, [r5, #0]
 8003ef6:	f7fc fda8 	bl	8000a4a <_fstat>
 8003efa:	1c43      	adds	r3, r0, #1
 8003efc:	d102      	bne.n	8003f04 <_fstat_r+0x1c>
 8003efe:	682b      	ldr	r3, [r5, #0]
 8003f00:	b103      	cbz	r3, 8003f04 <_fstat_r+0x1c>
 8003f02:	6023      	str	r3, [r4, #0]
 8003f04:	bd38      	pop	{r3, r4, r5, pc}
 8003f06:	bf00      	nop
 8003f08:	20000130 	.word	0x20000130

08003f0c <_isatty_r>:
 8003f0c:	b538      	push	{r3, r4, r5, lr}
 8003f0e:	4d06      	ldr	r5, [pc, #24]	; (8003f28 <_isatty_r+0x1c>)
 8003f10:	2300      	movs	r3, #0
 8003f12:	4604      	mov	r4, r0
 8003f14:	4608      	mov	r0, r1
 8003f16:	602b      	str	r3, [r5, #0]
 8003f18:	f7fc fda7 	bl	8000a6a <_isatty>
 8003f1c:	1c43      	adds	r3, r0, #1
 8003f1e:	d102      	bne.n	8003f26 <_isatty_r+0x1a>
 8003f20:	682b      	ldr	r3, [r5, #0]
 8003f22:	b103      	cbz	r3, 8003f26 <_isatty_r+0x1a>
 8003f24:	6023      	str	r3, [r4, #0]
 8003f26:	bd38      	pop	{r3, r4, r5, pc}
 8003f28:	20000130 	.word	0x20000130

08003f2c <_init>:
 8003f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f2e:	bf00      	nop
 8003f30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f32:	bc08      	pop	{r3}
 8003f34:	469e      	mov	lr, r3
 8003f36:	4770      	bx	lr

08003f38 <_fini>:
 8003f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f3a:	bf00      	nop
 8003f3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f3e:	bc08      	pop	{r3}
 8003f40:	469e      	mov	lr, r3
 8003f42:	4770      	bx	lr
